Abstract

for

seeking  as-
the  world  wide  web.  This

We describe  an  information
sistant
agent,  called  WebWatcher, interactively
helps  users  locate  desired  information  by
employing  learned  knowledge about  which
hyperlinks  are  likely  to  lead  to  the  target
information.  Our primary  focus  to  date
(1)  organizing
has  been  on  two  issues:
WebWatcher to  provide  interactive
advice
to  Mosaic users  while  logging  their  suc-
cessful  and unsuccessful  searches  as  train-
ing  data,  and (2)  incorporating  machine
learning  methods to  automatically  acquire
knowledge for  selecting  an appropriate  hy-
perlink  given  the  current  web page viewed
information
by  the  user  and  the  users
goal.  We describe
design  of
WebWatcher, and  the  results  of  our  pre-
liminary  learning  experiments.

the  initial

Machine Learning Information Services
Tlds ~ti~ being rnaintu~cd bF the ML Groul~ at the AustrianResea~.h
Arti0cial Int cll~ence (OPAl), Vienna, Austria

Institute [or

It  is far from complete and is being opdatcd on anincgular basis. Pleas e direct comment~
/su~estions/...to Gelll~d Widmer {gerh~dCc~,cd,~nilie,~:.~

)

To ~ out our experlnncnt~l WcbWatcher

s catch as slstant, click lj_ _e~_

GeJmral ML l,tfottrtatio,t  Sotuces

Univcr~i~, Qf Cal~omla-lr,~e (UCI) Machine Lcamin~ PaEc,
University of 10snob /  Urbana {US UC~ AS /  M L Paec,
M L M aHin P. List Archive moderate.d by M,Pozzani~,
M LNct -  Network of Excellence ~ M acl~ Lcaratmz (GMD s  tJ~cr}.
M LNet M ailing Lis t  Arckivc (Armtcrdam - - -  NOT YET |NSTA L L ED~.
I  LPN[~T,
Pro ~ar~c" L caratn~.tn Huraam and M addncs" (Euranean Science Foundation~,

tile  Inductive Lo P.ic Pro mam/l~P. Pan-l~urol~can Sclent~Ic Network,

Variou~ ML Prograra m1 Data Sout~ces

GMD M addnc LczcnJn~. Rcgo siton~,
UC Irvi~ Rano sitor] o f  M L Databases.
U C Irvinc Rano sitovl of M L Pro ~rams,
M LC++ -  A M acl~e Lcam~t Library in C4+ (R, K0hav~ Stal~0rti UI~v3.
Pr0benl ---  A $e$ 0f N etral  Network Benchmark Problems (Siz~ -2M b l  i~,
Probcnl
MLT - Mac}fine Lcamln~ Toolbox [Es+~dt Prolcct~,
ST ATLOG
EcoaData - Econoredc Time Series Data (Univ. of M aryiand~,
Uiatied States Census Bt~cau,
Ins)eriE Collc~.a Prolo~t i000 Datubas c,

--- Des C, dlltio n (Tcch Ranort~.

{l~S,}l~ Pro Sect),

1 Overview

the  initial

Many have noted  the  need for  software  to  assist  peo-
ple  in  locating  information  on the  world  wide web.
design  and imple-
This  paper  presents
mentation  of  an  agent  called  WebWatcher that
is
intended to  assist  users  both by interactively  advis-
ing  them as  they  traverse  web links  in  search  of  in-
formation,  and by  searching  autonomously on  their
behalf.  In  interactive  mode, WebWatcher acts  as  a
learning  apprentice  [Mitchell  et  al.,  1985; Mitchell
et.  al.,  1994],  providing  interactive  advice  to  the
Mosaic user  regarding  which hyperlinks
to  follow
next,  then  learning  by observing the  users  reaction
to  this  advice as  well  as  the  eventual success or  fail-
ure  of  the  users  actions.  The initial
implementation
of  WebWatcher provides  only  this  interactive  mode,
and it  does  not  yet  possess  sufficient  knowledge to
give  widely  useful  search  advice.  In  this  paper  we
present  WebWatcher as  a  case  study  in  the  design  of
web-based learning  agents  for  information  retrieval.
We focus  in  particular  on the  interface  that  enables
WebWatcher to  observe  and  advise  any  consenting
user  browsing  any location  on  the  web,  and on  re-
sults  of  initial
experiments with its  learning  meth-
ods.

6

2 WebWatcher
This  section  presents
the  design  of  WebWatcher
through  a  scenario  of  its  use.  WebWatcher is  an
information  search  agent  that  is  "invoked"  by fol-
lowing a  web hyperlink  to  its  web page,  then  filling
out  a  Mosaic form to  indicate  what information  is
a  publication  by some author).  Web-
sought  (e.g.,
Watcher then  returns
the  user  to  (a  copy of)  the
web page  from  which he  or  she  came,  and  assists
the  user  as  they  follow  hyperlinks  forward  through
the  web in  search  of  the  target  information.  As the
user  traverses
the  web, WebWateher uses  its  learned
knowledge  to  recommend especially  promising  hy-
perlinks  to  the  user  by  highlighting
these  links  on
the  users  display.  At any point,  the  user  may dis-
miss  WebWatcher, by  clicking  one of  two indicators
on the  WebWatcher icon,  indicating  either
that  the
search has  succeeded, or  that  the  user  wishes to  give
up on this  search.

The sequence of  web pages  visited  by the  user  in

o...... "".:E,e--er
ootOoor

DocumentURL: [http://pansy.learning.cs.cmu.edu:BoBo/cgi-bin

File  O~otlon~ /Vavlgate  Annotate  Documents

Document URL: Ifile://localhost/afs/cs/project/theo-6/web-ag,

l

Welcome to  the WebWatcher

This is an c~)rJtmemtal
arc alter.

! ystr.m to ?~Iv you advice wldJe you s torch for thetz~ormati0n you

If  you would
like ma to hdp you, pleas e [ndinate 01e type of lrfformn~on you n$~ s ee2Jn g. I wig
then wamil over your s houldct and Idg}dJght Rnks 01at I think arc mo st us e/u1. I wig ~lso make
an anonymous
nmd t~ze.

rcco rd o[ you~ scotch path, In order to Imam more useJul search sbat~ghis
[or

Yas, please help me (b~l:

 aI)aDer.
 a pc-,= ons homepage.
  a protect homepagc~
  so~wAr~
 ~urse ~onanattozt
 som~hing

rJz~.

N o thanks,,~us t  take me bar.~ to where I come from.

i

I found it!

I  give up!

Machine Learning Information Services

T}ds llst Is bdngma~ta~e, dby the ML OrqLq) at  the AvsUian Research Institute for
Art~icJal

[ntcl~lzcnce (OffAl), Victoria, Aus bi~

It  Is tar frem corn}lists, andis berg Ulldated on an irregular basis. Pleas e direct comracmts
/  suggestiom/, to  O edward Wldmer (gerhardC_~univiem~at)

To i~ o ut our exp er~emtal We~Watchet

~ eard~ at sis tent, dick }_L _e~_.

C.,etleral I%~L ]#lfortnailult Sotlt~e.~

Univ~dtv ot  Calffomie-lrvine (UCD M ad~ine Leaminf. Pa~.e
~e~ tbdverzttv  of  llllnab/[Ix,
M L Mailing Lift Archive (moderatedbv M ,Pv,~anl~
MLNct- Network el  Exc~emcein Machine Leamin~ (GMD lelver),
M LNet M~l~g List  Arc}dye tAunte.rdam--- NOT VET INSTALLED~
ILPN ET, the Inductive Lo ~Jc Pro ~ramrt~ Pan-Euro:)ean ScienCe Network
Pro Rramme" Leamlne in Humam and iv[  ad~incs" tEu.,o~)cm~. Science Foundation).

balm KIIUC| AI /ML P~-~  ~o~

Vaxtam ML Program altl  Dale Sources

GMD M addne Leamln~ Re;~0 siren,,
UC Irvine P.epo sltow of M L Database,
UC Irvine Repo sitov/of M L Pro:~raun.
M LC-H- - A M a~n Leam~t LIbrar~ in C++ tR. IehavL Stanford Univ.).
Pmhenl ---  A Set at  Neural Network Bendtmark Problems (Size.:  ~2Mb I I).
Prebenl --- Des c~ution (Tech Rel)orb.
M LT - bIaddne Leaming Toolbox (Esprit Proiect).
STATLOG
EcanData -  Economic Time S e2ies Data

(Esprit Pro~ect).

Ig~l,-,.~,,,,.,d

IIHo~ollRo,omillo.o.,,.l~ ~ ~ ~

Figure  4:  Copy of  original  page  with  WebWatcher
advice

_,J]

DocumentTltle:  LLearning Web Apprentice Paper Agent

Document URL: Lhttp:I/pansy,learnlng,cs,cmu,edu:8OBO/cgi-bln

Document Title:

Lets find a paper!

Ill  Uy to heJl) you ~nd it Pleas e ~llin eny o[ the folio wing that e~l~ht help me nerrow yo~
search, Use keyword! in  a~,/ormat:

institution:

authors
:, ....

Lllllnols
L

gub3ect area:

IMachine Learning,

]
J

I

O ):,  letg ~, Well |  tart with the |late you came trom, From now on I  wBl )o ok over
your d~ouldcr and hlghligl~t tl~k fo r you whenevex

I t}dnk I haw go o d advice,

UIUC Artificial  Intelligence Information

If  youre wondcr~f~

thexes k~ind o f a i~q~o s e to this, And veJy few rrJUtctiom.

In case yo u came in a back do or, lo cal AI related res catch link~ i~ at 0~ebottom of the
page.

Figure 3: Paper search form

Figure  5:  Next page (user  has  followed  Web-
Watchers advice)

in  figures  1 through
a typical  scenario  is  illustrated
5.  The first  screen  shows a  typical  web page,  1  pro-
viding  information  about  Machine Learning.  Notice
in  the  third  paragraph,  this  page invites  the  user  to
try  out  WebWatcher. If  the  user  clicks  on this  link,
he or  she  arrives  at  the  front  door  WebWatcher page
(Figure 2),  which allows the  user to  identify  the  type
of  information he seeks.  In  this  scenario  the  user  in-
dicates  that  the  goal  is  to  locate  a  paper,  so  he is
shown a new screen  (Figure  3)  with  a  form to  elabo-
rate  this  information  request.  Once completed,  the
user is  returned  to  the  original  page (Figure 4),  with
WebWatcher now "looking  over  his  shoulder".  No-
tice
the  WebWatcher icon  at  the  top  of  the  screen,
and  the  highlighted
link  (bracketed  by  the  Web-
Watcher  eyes  icon)  halfway  down the  screen.  This
highlighted  link  indicates  WebWatchers advice  that
the  user  follow the  link  to  the  University  of  Illinois
/  Urbana (UIUC) AI  /  ML Page.  The user  decides
to  select  this  recommended link,  and arrives  at  the
new web page  shown  in  Figure  5,  which  contains
new advice  from  WebWatcher. The  search  contin-
ues  in  this  way, with  the  user  directing
the  search
and  WebWatcher highlighting
until
"I  found it"  or  "I  give up".

the  user  dismisses  WebWatcher by  clicking  on

recommended links,

From the  users  perspective  WebWatcher is  an
agent  with  specialized
knowledge  about  how to
search  outward  from the  page  on  which it  was in-
voked.  While  WebWatcher suggests  which  hyper-
link  the  user  should take,  the  user  remains firmly  in
control,  and may ignore  the  systems  advice  at  any
step.  We feel  it  is  important  for  the  user  to  remain
in  control,  because  WebWatchers  knowledge  may
provide  imperfect  advice,  and  because  WebWatcher
might  not  perfectly  understand  the  users  informa-
tion  seeking goal.

Prom WebWatchers perspective,

the  above  sce-
nario  looks  somewhat different.  When first
invoked
it  accepts  an argument,  encoded in  the  URL that  ac-
cesses  it,  which contains  the  users  "return  address."
The return  address  is  the  UP~L of  the  web page from
which the  user  came.  Once the  user  fills  out  the
form specifying  his  or  her  information  seeking goal,
WebWatcher sends  the  user  back  to  a  copy of  this
original  page,  after  making three  changes. First,
the
WebWatcher banner  is  added to  the  top  of  the  page.
Second,  each  hyperlink  UI%L in  the  original  page
is  replaced  by  a  new URL that  points  back  to  the
WebWatcher. Third,
that
any of  the  hyperlinks  on this  page are  strongly  rec-
ommended by  its  search  control  knowledge,  then  it
highlights  the  most promising links  in  order  to  sug-
gest  them to  the  user.  It  sends  this  modified  copy
of  the  return  page to  the  user,  and opens a  file
to
begin logging this  users  information search as  train-
ing  data.  While it  waits  for  the  users  next  step,  it
prefetches  any  web pages  it  has  just

the  WebWatcher finds

if

recommended

1This is  a copy of  the  web page

htt  p://www.ai.univie.ac.at/oefai/ml/ml-ressources.ht
to  which we have added the  third  paragraph  inviting
the  user  to  invoke WebWatcher.

ml,

to  the  user,  and begins  to  process  these  pages  to
determine  their  most promising outgoing  hyperlink.
When the  user  clicks  on  the  next  hyperlink,  Web-
Watcher updates  the  log  for  this  search,  retrieves
the  page  (unless  it  has  already  been prefetched),
performs similar  substitutions,  and returns  the  copy
to  the  user.

This  process  continues,  with  WebWatcher track-
ing  the  users  search  across  the  Web, providing  ad-
vice  at  each step,  until  the  user  elects  to  dismiss the
agent.  At  this  point,
the
log file  for  this  session (indicating  either  success or
failure  in  the  search,  depending on which button  the
user  selected  when dismissing  WebWatcher), and re-
turns  the  user  to  the  original,  unsubstituted  copy of
the  web page he is  currently  at.

the  WebWatcher closes

The above scenario  describes  a  typical

interac-
tion  with  the  current  WebWatcher. We plan  to  ex-
tend  the  initial
system in  several  ways. For example,
WebWatcher could  be  made to  search  several  pages
ahead,  by following  its  own advice  while  waiting  for
the  users  next  input,  in  order  to  improve upon the
quality  of  advice it  provides.  In  addition,  if  it  en-
counters  an especially  promising page while  search-
ing  ahead,  it  might suggest  that  the  user  jump di-
rectly  to  this  page rather  than  follow tediously  along
the  path  that  the  agent  has  already  traversed.

Learning

3
The success  of  WebWatcher depends  crucially
on
the  quality  of  its  knowledge for  guiding search.  Be-
cause  of  the  difficulty  of  hand-crafting  this  knowl-
edge,  and because we wish for  many different  copies
of  WebWatcher  to  become  knowledgeable
about
regions  of  the  Web, we are  explor-
many different
ing  methods for  automatically  learning
this  search
control  knowledge from experience.

be  Learned?

3.1 What  Should
What is  the  form of  the  knowledge required  by  Web-
Watcher? In  general,
task  is  to  suggest  an ap-
propriate  link  given  the  current  user,  goal,  and web
page.  Hence,  one  general  form  of  knowledge  that
would be  useful  corresponds
to  knowledge of  the
function:

its

LinkUtility

:  Page x  Goal x  User x  Link  ~ [0,  1]

where Page is  the  current  web page,  Goal is  the  in-
formation sought by the  user,  User is  the  identity  of
the  user,  and Link  is  one of  the  hyperlinks  found on
Page.  The value  of  LinkUtility
is  the  probability
that  following  Link  from Page leads  along  a  short-
est  path to  a page that  satisfies
the  current  Goal for
the  current  User.

In  the  learning  experiments  reported  here,  we

consider  learning  a  simpler function  for  which train-
ing  data is  more readily  available,  and which is  still
of  considerable practical  use.  This function  is:

UserChoice? :  Page x  Goal x  Link  --*  [0,  1]

f 00word

I 200words

I 100word

I 0word

Underlined

User  goal

Sentence

Heading

Table  1:  Encoding  of  selected
given  Page,  Link,  and  Goal.

information

for  a

Where the  value  of  UserChoice? is  the  probability
that  an arbitrary  user  will  select  Link given the  cur-
rent  Page and Goal. Notice  here  the  User is  not  an
explicit
input,  and the  function  value  predicts  only
whether users  tend  to  select  Link  -  not  whether it
leads  optimally  toward to  the  goal.  Notice also  that
information  about  the  search  trajectory
by  which
the  user  arrived  at  the  current  page is  not  consid-
ered.

One reason  for  focusing  on  UscrChoice?  in  our
experiments  is  that  the  data  automatically
initial
training
examples
logged  by  WebWatcher provides
of  this  function.  In  particular,
each  time  the  user
selects  a new hyperlink,  a training  example is  logged
for  each  hyperlink  on the  current  page,  correspond-
ing  to  the  Page,  Goal,  Link,  and whether  the  user
chose  this  Link.

3.2

How  Should
Goals

be  Represented?

Pages,

Links

and

representation

In  order  to  learn  and utilize  knowledge of  the  tar-
get  function  UserChoice?, it
is  necessary  to  first
choose  an  appropriate
for  Page x
Goal   Link.  This  representation  must  be  com-
patible  with  available
learning  methods,  and must
allow  the  agent  to  evaluate  learned  knowledge ef-
ficiently
(i.e.,  with  a delay  negligible  compared to
typical  page access  delays  on  the  web). Notice  that
one issue  here  is  that  web pages,  information  asso-
ciated  with  hyperlinks,  and user  information  goals
are  all  predominantly  text-based,  whereas most ma-
chine  learning  methods  assume a  more structured
data  representation
have experimented with  a  variety  of  representations
that  re-represent
text  associ-
ated  with  pages,  links,  and goals  as  a  fixed-length
feature  vector.  This  idea  is  common within  informa-
tion  retrieval
retrieval  systems [Salton  and McGill,
1983].  It  offers  the  advantage that  the  information
in  an  arbitrary
is  summarized in
a  fixed  length  feature  vector  compatible  with  cur-
rent  machine learning  methods. It  also  carries
the
disadvantage  that  much information  is  lost  by this
re-representation.

the  arbitrary-length

such  as  a  feature  vector.  We

amount  of  text

The experiments  described  here  all  use  the  same

Information  about  the  current
information

representation.
Page,  the  users
search  Goal,  and  a
particular  outgoing  Link  is  represented  by  a  vec-
tor  of  approximately 530 boolean features,  each  fea-
ture  indicating  the  occurrence  of  a  particular  word
within  the  text  that  originally  defines  these  three
attributes.  The vector  of  530 features
of  four  concatenated  subvectors:

is  composed

that  occur  within  the  scope  of  the  hypertext
link  (i.e.,
the  underlined  words seen  by  the
user).  These  200 features  correspond  to  only
the  200  words  found  to  be  most  informative
over all  links  in  the  training  data  (see  below.)
2. Words in  the  sentence containing  the  hyperlink.
200 boolean features  are  allocated  to  indicate
the  occurrence  of  200 selected  words within  the
sentence  (if  any)  that  contains  Link.

3. Words in  the  headings  associated  with  the  hy-
perlink.  100 boolean  features  are  allocated  to
indicate  selected  words that  occur  in  the  head-
ings  (if  any)  under  which Link  is  found.  This
includes  words  occurring
in  headings  at  any
level  of  nesting,  as  long as  Link is  within  the
scope  of  the  heading.  For  example,  in  Fig-
ure  4,  any of  the  words in  the  headings Machine
Learning  Information  Services  and General  ML
Information  Sources may be used  as  features
describe  the  link  that  was highlighted.

to

4. Words used  to  define  the  user  goal.  These fea-
tures  indicate  words entered  by  the  user  while
defining
the  information  search  goal.  In  our
experiments,
the  only  goals  considered  were
searches  for  technical  papers,  for  which the  user
could optionally  enter  the  title,  author,  organi-
zation,  etc.  (see  Figure  3).  All  words entered
in  this  way throughout  the  training
set  were
included  (approximately  30 words,  though  the
exact  number varied  with  the  training  set  used
in  the  particular  experiment).  The encoding  of
the  boolean feature  in  this  case is  assigned a 1 if
and only if  the  word occurs in  the  user-specified
goal  and occurs  in  the  hyperlink,  sentence,  or
headings  associated  with  this  example.

In  each  case,

To choose the  encodings for  the  first

three  fields,
to  select  which words  would  be
it  was necessary
considered.
the  words were selected
by first  gathering  every  distinct  word that  occurred
then  ranking  these  accord-
over  the  training  set,
ing  to  their  mutual  information  with  respect
to
correctly  classifying
the  training  data,  and finally
choosing  the  top  N words in  this  ranking. 2  Mutual
information  is  a  common statistical  measure  (see,
e.g.,  [Quinlan,  1993]) of  the  degree to  which an in-
dividual  feature  (in  this  case  a word) can correctly
classify  the  observed data.

Figure  1  summarizes the  encoding  of  information

about  the  current  Page,  Link,  and  Goal.

3.3 What  Learning

Method

Should

be  Used?

The task  of  the  learner  is  to  learn  the  general  func-
tion  UserChoice?,  given  a  sample  of  training  data
logged  from  users.
In  order  to  explore  possible
learning  approaches  and to  determine  the  level  of
competence achievable  by a  learning  agent,  we ap-
plied  the  following  four  methods to  training  data

1.  Underlined words in  the  hyperlink.  200 boolean
features  are  allocated  to  encode selected  words

2The appendix lists

the  words selected  by this  pro-

cedure using one of our training  sets.

collected
search sessions:

by  WebWatcher during  30  information

* Winnou [Littlestone,  1988] learns  a  boolean con-
cept  represented  as  a  single  linear
threshold
function  of  the  instance  features.  Weights for
this  threshold  function  are  learned  using a  mul-
tiplicative
update  rule.  In  our  experiments  we
enriched the  original  530 attributes  by a  trans-
formation.  Each attribute  a  of  an example vec-
tor  was transformed  into
a,~.
One attribute
is  equivalent  with  the  original,
the  other  is  its  negation.  After  the  learning
phase  we removed the  threshold  and  used  the
output of  the  learned linear  function  as  an eval-
uation  for  instances.
 Wordstat attempts

to  make  a  prediction

two attributes

in  the  Page  Goal   Link  vector,

whether  a  link  is  followed  based  directly  on
the  statistics
of  individual  words.  For  each
feature
it
keeps  two  counts:  a  count  of  the  number  of
times this  feature  was set  over all  training  ex-
amples  (total),
and  a  count  of  the  number of
times  this  feature  was set  and the  instance  was
classified  as  positive  (pos).  The ratio  pos/total
provides  an  estimate  of  the  conditional  proba-
bility  that  the  link  will  be followed, given that
this  feature  occurs.  We experimented with  var-
ious  ways of  combining these  ratios.  Of the  ap-
proaches  we tried,
the  one that  worked best  in
our  experiments,  the  results  of  which we report
here,  involves  assuming that  these  single-word
estimates  are  mutually  independent.  This  as-
sumptions  allows  us  to  combine individual  es-
timates  in  a straightforward  way. If  Pl,  ...,pn
are  the  individual  probabilities,
and I  is  the
set  of  indexes for  which a  bit  is  set  in  a  given
test  vector,  then  the  probability
that  the  cor-
responding  link  was followed  is  determined  by
1 -  1-[i~i(1  -  Pi).

 TFIDF with  cosine  similarity  measure  [Salton
and McGill,  1983;  Lang,  1995]  is  a  method de-
veloped  in  information  retrieval.
In  the  gen-
eral  case  at  first  a  vector  V of  words is  cre-
ated.  In  our  experiments it  is  already  given  by
the  representation  described  above.  Every in-
stance  can  now be represented  as  a  vector  with
the  same length  as  V,  replacing  every  word
by  a  number.  These  numbers  are  calculated
by  the  formula  t~  =  Ereq(Wordi)  *  [log2(n)
log2(DocEveq(Wordi))],  with  n  being  the  total
number of  examples,  Freq(Wordi)  the  number
of  occurrences  of  Wordi  in  the  actual  exam-
ple  and  DocFreq(Wordi)  the  number of  exam-
ples  Wordl appears  in.  The length  of  the  vec-
tor  is  normalized  to  1.  Prototype  vectors  for
each  class  of  the  target  concept  are  created  by
adding all  training  vectors  of  this  class.  In  our
case  we had a  target  concept  with  two classes:
positive
negative  (link  was not  followed  by  the  user).
The evaluation  of  an instance  is  calculated  by

(link  was followed  by the  user),  and

10

the  cosine  between  the  instance

subtracting
vector  and the  negative  prototype  vector  from
the  cosine  between the  instance  vector  and the
positive  prototype  vector.
Random To provide  a  baseline  measure  against
which to  compare the  learning  methods, we also
measured  the  performance  achieved  by  ran-
domly choosing  one link  on the  page with  uni-
form  probability.
The  mean number of  links
per  page over  the  data  used  here  is  16,  ranging
from  a  minimum of  1  to  a  maximum of  300.

4 Results
In  order  to  explore  the  potential  of  machine learn-
ing  methods to  automatically  acquire  search  control
knowledge  for  WebWateher, we collected
a  set  of
data  from 30  sessions  using  WebWatcher to  search
for  technical  papers.  In  each  session  the  user  began
at  the  web page shown in  Figure  1,  and searched  for
a particular
type  of  technical  paper  following  links
forward  from  there.  Searches  were  conducted  by
three  different  users.  The average depth  of  a  search
was 6 steps,  with  23 of  the  30 searches  successfully
locating  a  paper.  Each search  session  provided  a
set  of  training  examples  corresponding  to  all  the
Page  Link  pairs  occurring  on  each  page  visited
by the  user.

4.1

How  Accurately
UscrChoice?

Can

Be  Learned?

and  learning

Given  the  above  representation
method, the  obvious  questiorkis  "How well  can  Web-
Watcher learn  to  advise  the  user?"  To estimate  the
answer to  this  question,  the  available  data  was split
into  training  and testing  sets.  Each learning  method
was applied  to  the  set  of  training  sessions  and eval-
uated  according  to  how frequently
the  hyperlink  taken  by the  user  in  the  separate  test-
ing sessions.

it  recommended

In  order  to  obtain more statistically

significant  es-
timates  of  learning  accuracy,  the  training  data  was
separated  into  29 training  sessions  and one test  ses-
sion,  in  each  of  the  30  possible  ways.  Each learn-
ing  method was then  applied  to  each  training
ses-
sion  collection  and evaluated  on  the  test  session.
The results  of  these  30 experiments  were averaged.
This  procedure was run  for  each  of  the  four  learning
methods.

Figure 6  plots  the  results  of  this  experiment.  The
vertical  axis  indicates  the  fraction  of  test  cases  in
which the  user-selected  hyperlink  was among those
recommended by  the  learned  knowledge.  The hori-
zontal  axis  indicates
the  number of  hyperlinks  that
the  learner  was allowed to  recommend for  each  page.
Thus, the  leftmost  point  of  each  line  indicates
the
fraction  of  cases in  which the  user  chose the  learners
highest-rated
link.  The second point  to  the  left  in-
dicates  the  fraction  of  cases  in  which the  user  chose
one of  the  two highest-rated  links,  and so  on.

Notice  that  all  three  learning  methods signifi-

cantly  outperform  randomly  generated  advice.  For

1

0.9

0.8

0.7

o.o
~ O.5

"~

11,4

WebWatcher Predictive Accuracy

Winnow
Wordstst
-+--,
TFIDF -o-- 
Random
..~. .....
Worst Case ~-

.........

........  -"

..O .............

1

0,9

0.8

0.7

0,6

O.4

0,3 .:::: .........

0.2

................

0.1 .................

~ .................

. ...................................................
0.2

2

3

Numbar of Links to Advise

4

0.1

o

WebWatcher Precision-Recall

Winnow
--0--
TFIDF -~-.
Wordstat
-o--

y/"

. .B""

..,,..

g ..........

~"

o ...........

o:, o:~ o.~ o:,, olo o:o o:, o:,, o.,

Fraction of Predictions Considered

Figure  6:  Accuracy  of  advice  for  different  meth-
ods.  The vertical  axis  indicates  the  fraction  of  pages
for  which the  recommended hyperlinks  included  the
link  chosen  by  the  user.  The horizontal
axis  in-
dicates
the  number of  hyperlinks  recommended per
page.  The worst  case  line  shows the  fraction  of  pages
having N or  fewer links  total.

Figure  7:  Increasing  accuracy  by  reducing  cover-
age.  The vertical  axis  indicates  the  fraction  of  test
pages  for  which the  learners
top  recommendation
was taken  by the  user.  The horizontal  axis  indicates
the  fraction  of  test  cases  covered by advice  as  the
confidence  threshold  is  varied  from high  confidence
(left)  to low (right).

example,  Winnow recommends the  user-selected
as  its  first  choice in  30% of  the  test  cases,  and among
its  top  three  choices  in  54% of  the  cases.  Given the
mean of  16 links  per  page in  this  data,  random ad-
vice  chooses  the  user-selected
link  only  6% of  the
time.

link

4.2 Can  Accuracy  be  Improved  by

Sacrificing  Coverage?

coverage is  decreased to  a more selective  10% of  the
cases.  Interestingly,  while Wordstats advice is  rel-
atively  accurate  in  general,
its  accuracy  degrades
at  higher  thresholds.  The presence  of
drastically
features  which occur  very  infrequently  in  the  train-
ing  set,  resulting  in  poor probability  estimates,  and
independence  assumption,  which
the  inter-feature
the  training  set  by no means justifies,
appear to  ac-
count  for  this  phenomenon.

Some users  may prefer
that  the  agent  provide  more
accurate  advice,  even if  this  requires  that  it  make
recommendations more sparingly.  To determine  the
feasibility  of  increasing  advice  accuracy by reducing
coverage,  we experimented  with  adding  a  thresh-
old  on  the  confidence  of  the  advice.  For  each  of
the  learning  methods considered  here,  the  learners
output
number that  can  be  used
to  estimate
in  recommending  the
link.  Therefore,  it  is  easy to  introduce  a  confidence
threshold  in  each of  these  cases.

is  a  real-valued

its  confidence

Figure  7  shows how advice  accuracy  varies  with
coverage,  as  the  confidence threshold  is  varied.  For
high  values  of  the  confidence  threshold,
the  agent
provides  advice  less  often,  but  can usually  achieve
higher  accuracy.  In  this  case,  accuracy  is  measured
by the  fraction  of  test  cases  for  which the  learners
top  ranked hyperlink is  the  link  selected  by the  user.
Thus,  the  rightmost  points  in  the  plots  of  figure  7
correspond exactly  to  the  leftmost  plots  in  figure  6
(i.e.,  100% coverage).

Notice  that  the  accuracy  of  I~innows top-ranked
from  30% to  53% as  its

recommendation  increases

5 Conclusions
is  already  needed to  deal  with
Software  assistance
the  growing flood  of  information  available  on  the
WWW. The  design  of  WebWatcher is  based  on  the
assumption  that  knowledge about  how to  search  the
web can  be  learned  by  interactively
and
watching  searches  performed  by  humans.  If  suc-
cessful,  different  copies  of  WebWatcher could  easily
be  attached  to  any web page for  which a  specialized
search  assistant  would be useful.  Over time,  each
copy could  learn  expertise  specializing
in  the  types
of  users,  information  needs,  and information  sources
commonly encountered  through  its  page.

assisting

In  the  preliminary  learning  experiments  reported
here,  WebWatcher was able  to  learn  search  control
knowledge that  approximately  predicts
the  hyper-
link  selected  by  users,  conditional  on the  current
page,  link,  and goal.  These experiments  also  showed
that  the  accuracy  of  the  agents  advice  can be  in-
creased  by  allowing  it  to  give  advice  only  when it
has  high  confidence.  While these  experimental  re-
sults  are  positive,

they  are  based on a small  number

11

of  training sessions,  searching for  a particular  type
of  information, from a specific  web page.  We do not
yet  know whether the  results  reported here are  rep-
resentative  of  what can be expected for  other search
goals,  users,  and web localities.

Based on our initial  exploration, we are optimistic
that  a  learning apprentice for  the  world wide web is
feasible.  Although learned  knowledge may provide
only  imperfect  advice,  even a  modest reduction  in
the  number of  hyperlinks  considered  at  each  page
leads  to  an exponential  improvement in  the  overall
search.  Moreover, we believe  learning  can be  made
more effective  by taking  advantage of  the  abundant
data  available  from many users  on the  web, and by
considering  methods beyond those  reported  here.

For additional  information,  see  the  WebWatcher

project page, http://www.cs.cmu.edu:8001/afs/cs.cmu.edu
/  project

/  theo-6  /  web-agent  /  www /  project-home.html.

6 Acknowledgments
We thank Ken Lang for  providing much of  the  soft-
ware for  learning  over pages of  text,  and for  sug-
gesting  the  idea  of  implementing the  agent  by dy-
namically  editing  web pages.  Thanks to  Michael
Mauldin for  software  and advice  on the  construc-
tion  of  a  web-based text-retrieval
system.  We are
grateful  to  Rich Caruana and Ken Lang for  helpful
comments on this  paper.  This research is  supported
by a  Rotary International  fellowship  grant,  an NSF
graduate fellowship,  and by Arpa under grant  num-
ber  F33615-93-1-1330.

