Abstract

We are at the beginning of the multicore era. Computers will have increasingly
many cores (processors), but there is still no good programming framework for
these architectures, and thus no simple and unied way for machine learning to
take advantage of the potential speed up. In this paper, we develop a broadly ap-
plicable parallel programming method, one that is easily applied to many different
learning algorithms. Our work is in distinct contrast to the tradition in machine
learning of designing (often ingenious) ways to speed up a single algorithm at a
time. Specically, we show that algorithms that t the Statistical Query model [15]
can be written in a certain summation form, which allows them to be easily par-
allelized on multicore computers. We adapt Googles map-reduce [7] paradigm to
demonstrate this parallel speed up technique on a variety of learning algorithms
including locally weighted linear regression (LWLR), k-means, logistic regres-
sion (LR), naive Bayes (NB), SVM, ICA, PCA, gaussian discriminant analysis
(GDA), EM, and backpropagation (NN). Our experimental results show basically
linear speedup with an increasing number of processors.

1 Introduction

Frequency scaling on siliconthe ability to drive chips at ever higher clock ratesis beginning to
hit a power limit as device geometries shrink due to leakage, and simply because CMOS consumes
power every time it changes state [9, 10]. Yet Moores law [20], the density of circuits doubling
every generation, is projected to last between 10 and 20 more years for silicon based circuits [10].
By keeping clock frequency xed, but doubling the number of processing cores on a chip, one can
maintain lower power while doubling the speed of many applications. This has forced an industry-
wide shift to multicore.

We thus approach an era of increasing numbers of cores per chip, but there is as yet no good frame-
work for machine learning to take advantage of massive numbers of cores. There are many parallel
programming languages such as Orca, Occam ABCL, SNOW, MPI and PARLOG, but none of these
approaches make it obvious how to parallelize a particular algorithm. There is a vast literature on
distributed learning and data mining [18], but very little of this literature focuses on our goal: A gen-
eral means of programming machine learning on multicore. Much of this literature contains a long

and distinguished tradition of developing (often ingenious) ways to speed up or parallelize individ-
ual learning algorithms, for instance cascaded SVMs [11]. But these yield no general parallelization
technique for machine learning and, more pragmatically, specialized implementations of popular
algorithms rarely lead to widespread use. Some examples of more general papers are: Caregea et.
al. [5] give some general data distribution conditions for parallelizing machine learning, but restrict
the focus to decision trees; Jin and Agrawal [14] give a general machine learning programming ap-
proach, but only for shared memory machines. This doesnt t the architecture of cellular or grid
type multiprocessors where cores have local cache, even if it can be dynamically reallocated.

In this paper, we focuses on developing a general and exact technique for parallel programming
of a large class of machine learning algorithms for multicore processors. The central idea of this
approach is to allow a future programmer or user to speed up machine learning applications by
throwing more cores at the problem rather than search for specialized optimizations. This papers
contributions are:
(i) We show that any algorithm tting the Statistical Query Model may be written in a certain sum-
mation form. This form does not change the underlying algorithm and so is not an approximation,
but is instead an exact implementation. (ii) The summation form does not depend on, but can be
easily expressed in a map-reduce [7] framework which is easy to program in. (iii) This technique
achieves basically linear speed-up with the number of cores.
We attempt to develop a pragmatic and general framework. What we do not claim:
(i) We make no claim that our technique will necessarily run faster than a specialized, one-off so-
lution. Here we achieve linear speedup which in fact often does beat specic solutions such as
cascaded SVM [11] (see section 5; however, they do handle kernels, which we have not addressed).
(ii) We make no claim that following our framework (for a specic algorithm) always leads to a
novel parallelization undiscovered by others. What is novel is the larger, broadly applicable frame-
work, together with a pragmatic programming paradigm, map-reduce. (iii) We focus here on exact
implementation of machine learning algorithms, not on parallel approximations to algorithms (a
worthy topic, but one which is beyond this papers scope).

In section 2 we discuss the Statistical Query Model, our summation form framework and an example
of its application. In section 3 we describe how our framework may be implemented in a Google-
like map-reduce paradigm. In section 4 we choose 10 frequently used machine learning algorithms
as examples of what can be coded in this framework. This is followed by experimental runs on 10
moderately large data sets in section 5, where we show a good match to our theoretical computational
complexity results. Basically, we often achieve linear speedup in the number of cores. Section 6
concludes the paper.

2 Statistical Query and Summation Form

For multicore systems, Sutter and Larus [25] point out that multicore mostly benets concurrent
applications, meaning ones where there is little communication between cores. The best match is
thus if the data is subdivided and stays local to the cores. To achieve this, we look to Kearns
Statistical Query Model [15].

The Statistical Query Model is sometimes posed as a restriction on the Valiant PAC model [26],
in which we permit the learning algorithm to access the learning problem only through a statistical
query oracle. Given a function f(x, y) over instances, the statistical query oracle returns an estimate
of the expectation of f(x, y) (averaged over the training/test distribution). Algorithms that calculate
sufcient statistics or gradients t this model, and since these calculations may be batched, they
are expressible as a sum over data points. This class of algorithms is large; We show 10 popular
algorithms in section 4 below. An example that does not t is that of learning an XOR over a subset
of bits. [16, 15]. However, when an algorithm does sum over the data, we can easily distribute the
calculations over multiple cores: We just divide the data set into as many pieces as there are cores,
give each core its share of the data to sum the equations over, and aggregate the results at the end.
We call this form of the algorithm the summation form.

(cid:80)m
As an example, consider ordinary least squares (linear regression), which ts a model of the form
i=1(T xi  yi)2 The parameter  is typically solved for by
y = T x by solving:  = min

Figure 1: Multicore map-reduce framework

dening the design matrix X  Rmn to be a matrix whose rows contain the training instances
x1, . . . , xm, letting (cid:126)y = [y1, . . . , ym]m be the vector of target labels, and solving the normal equa-
tions to obtain  = (X T X)1X T (cid:126)y.
To put this computation into summation form, we reformulate it into a two phase algorithm where
we rst compute sufcient statistics by summing over the data, and then aggregate those statistics
and solve to get  = A1b. Concretely, we compute A = X T X and b = X T (cid:126)y as follows:
i=1(xiyi). The computation of A and b can now be divided into
A =
equal size pieces and distributed among the cores. We next discuss an architecture that lends itself
to the summation form: Map-reduce.

i ) and b =

(cid:80)m

(cid:80)m

i=1(xixT

3 Architecture

Many programming frameworks are possible for the summation form, but inspired by Googles
success in adapting a functional programming construct, map-reduce [7], for wide spread parallel
programming use inside their company, we adapted this same construct for multicore use. Googles
map-reduce is specialized for use over clusters that have unreliable communication and where indi-
vidual computers may go down. These are issues that multicores do not have; thus, we were able to
developed a much lighter weight architecture for multicores, shown in Figure 1.

Figure 1 shows a high level view of our architecture and how it processes the data. In step 0, the
map-reduce engine is responsible for splitting the data by training examples (rows). The engine then
caches the split data for the subsequent map-reduce invocations. Every algorithm has its own engine
instance, and every map-reduce task will be delegated to its engine (step 1). Similar to the original
map-reduce architecture, the engine will run a master (step 1.1) which coordinates the mappers
and the reducers. The master is responsible for assigning the split data to different mappers, and
then collects the processed intermediate data from the mappers (step 1.1.1 and 1.1.2). After the
intermediate data is collected, the master will in turn invoke the reducer to process it (step 1.1.3) and
return nal results (step 1.1.4). Note that some mapper and reducer operations require additional
scalar information from the algorithms. In order to support these operations, the mapper/reducer
can obtain this information through the query info interface, which can be customized for each
different algorithm (step 1.1.1.1 and 1.1.3.2).

4 Adopted Algorithms

In this section, we will briey discuss the algorithms we have implemented based on our framework.
These algorithms were chosen partly by their popularity of use in NIPS papers, and our goal will be
to illustrate how each algorithm can be expressed in summation form. We will defer the discussion
of the theoretical improvement that can be achieved by this parallelization to Section 4.1. In the
following, x or xi denotes a training vector and y or yi denotes a training label.

AlgorithmEngineReducerMaster1.1.3: reduce1: run21.1.1.1: query_info1.1.3.1: query_info1.1.1.21.1.3.2MapperMapperMapperMapper1.1: run1.21.1.1: map (split data)1.1.2: intermediate data1.1.4: resultData0: data input(cid:80)m

(cid:80)m

(cid:80)

(cid:80)

i=1 wi(xixT

subgroup wi(xixT

results to get the nal result for the parameters.

the solution of the normal equations A = b, where A =

 Locally Weighted Linear Regression (LWLR) LWLR [28, 3] is solved by nding
i ) and b =
i=1 wi(xiyi). For the summation form, we divide the computation among different map-
i ) and another
pers. In this case, one set of mappers is used to compute
subgroup wi(xiyi). Two reducers respectively sum up the partial values
set to compute
for A and b, and the algorithm nally computes the solution  = A1b. Note that if wi = 1,
the algorithm reduces to the case of ordinary least squares (linear regression).
 Naive Bayes (NB) In NB [17, 21], we have to estimate P (xj = k|y = 1), P (xj = k|y =
(cid:80)
(cid:80)
0), and P (y) from the training data. In order to do so, we need to sum over xj = k for
(cid:80)
(cid:80)
each y label in the training data to calculate P (x|y). We specify different sets of mappers
subgroup 1{xj = k|y = 0},
subgroup 1{xj = k|y = 1},
to calculate the following:
subgroup 1{y = 0}. The reducer then sums up intermediate
subgroup 1{y = 1} and
 Gaussian Discriminative Analysis (GDA) The classic GDA algorithm [13] needs to learn
the following four statistics P (y), 0, 1 and . For all the summation forms involved in
these computations, we may leverage the map-reduce framework to parallelize the process.
Each mapper will handle the summation (i.e.  1{yi = 1},  1{yi = 0},  1{yi =
0}xi, etc) for a subgroup of the training samples. Finally, the reducer will aggregate the
intermediate sums and calculate the nal result for the parameters.
 k-means In k-means [12], it is clear that the operation of computing the Euclidean distance
between the sample vectors and the centroids can be parallelized by splitting the data into
individual subgroups and clustering samples in each subgroup separately (by the mapper).
In recalculating new centroid vectors, we divide the sample vectors into subgroups, com-
pute the sum of vectors in each subgroup in parallel, and nally the reducer will add up the
partial sums and compute the new centroids.
 Logistic Regression (LR) For logistic regression [23], we choose the form of hypothesis
as h(x) = g(T x) = 1/(1 + exp(T x)) Learning is done by tting  to the training
data where the likelihood function can be optimized by using Newton-Raphson to update
 :=   H1(cid:96)(). (cid:96)() is the gradient, which can be computed in parallel by
each NR step i. The computation
mappers summing up
of the hessian matrix can be also written in a summation form of H(j, k) := H(j, k) +
h(x(i))(h(x(i))  1)x(i)
k for the mappers. The reducer will then sum up the values
for gradient and hessian to perform the update for .
 Neural Network (NN) We focus on backpropagation [6] By dening a network struc-
ture (we use a three layer network with two output neurons classifying the data into two
categories), each mapper propagates its set of data through the network. For each train-
ing example, the error is back propagated to calculate the partial gradient for each of the
weights in the network. The reducer then sums the partial gradient from each mapper and
does a batch gradient descent to update the weights of the network.
 Principal Components Analysis (PCA) PCA [29] computes the principle eigenvectors of

(cid:80)
subgroup(y(i)  h(x(i)))x(i)

j x(i)

(cid:162)

(cid:161)(cid:80)m

(cid:161)(cid:80)m

(cid:162)  T over the data. In the denition for
(cid:80)m

i=1 xixT
i

i=1 xixT
i

the covariance matrix  = 1
m
, the term
is already expressed in summation form. Further, we can also
express the mean vector  as a sum,  = 1
i=1 xi. The sums can be mapped to separate
m
cores, and then the reducer will sum up the partial results to produce the nal empirical
covariance matrix.
 Independent Component Analysis (ICA) ICA [1] tries to identify the independent source
vectors based on the assumption that the observed data are linearly transformed from the
source data. In ICA, the main goal is to compute the unmixing matrix W. We implement
batch gradient ascent to optimize the W s likelihood. In this scheme, we can independently

j

calculate the expression

x(i)T in the mappers and sum them up in the

(cid:34)

(cid:35)

1  2g(wT

1 x(i))

...

reducer.

 Expectation Maximization (EM) For EM [8] we use Mixture of Gaussian as the underly-
ing model as per [19]. For parallelization: In the E-step, every mapper processes its subset

(cid:80)

subgroup(w(i)

(cid:80)

subgroup(w(i)

(cid:80)

(cid:80)

(cid:80)
j  x(i)) and

subgroup(w(i)
j  (x(i)  j)  (x(i)  j)T ) and

of the training data and computes the corresponding w(i)
(expected pseudo count). In M-
j
phase, three sets of parameters need to be updated: p(y), , and . For p(y), every mapper
j ), and the reducer will sum up the partial result and divide it
will compute
j ), and
by m. For , each mapper will compute
the reducer will sum up the partial result and divide them. For , every mapper will com-
j ), and the reducer
pute
will again sum up the partial result and divide them.
 Support Vector Machine (SVM) Linear SVMs [27, 22] primary goal is to optimize the
y(i)(wT x(i) + b)  1 
following primal problem minw,b (cid:107)w(cid:107)2 + C
i:i>0 p
(cid:80)
s.t.
i where p is either 1 (hinge loss) or 2 (quadratic loss).
[2] has shown that the primal
(cid:80)
problem for quadratic loss can be solved using the following formula where sv are the
support vectors:  = 2w + 2C
isv (w  xi  yi)xi & Hessian H = I + C
isv xixT
i
We perform batch gradient descent to optimize the objective function. The mappers will
subgroup(isv) (w  xi  yi)xi and the reducer will sum up
calculate the partial gradient
the partial results to update w vector.

subgroup(w(i)

subgroup(w(i)

(cid:80)

i

(cid:80)

Some implementations of machine learning algorithms, such as ICA, are commonly done with
stochastic gradient ascent, which poses a challenge to parallelization. The problem is that in ev-
ery step of gradient ascent, the algorithm updates a common set of parameters (e.g. the unmixing
W matrix in ICA). When one gradient ascent step (involving one training sample) is updating W , it
has to lock down this matrix, read it, compute the gradient, update W , and nally release the lock.
This lock-release block creates a bottleneck for parallelization; thus, instead of stochastic gradient
ascent, our algorithms above were implemented using batch gradient ascent.

4.1 Algorithm Time Complexity Analysis

Table 1 shows the theoretical complexity analysis for the ten algorithms we implemented on top of
our framework. We assume that the dimension of the inputs is n (i.e., x  Rn), that we have m
training examples, and that there are P cores. The complexity of iterative algorithms is analyzed
for one iteration, and so their actual running time may be slower.1 A few algorithms require matrix
inversion or an eigen-decomposition of an n-by-n matrix; we did not parallelize these steps in our
experiments, because for us m >> n, and so their cost is small. However, there is extensive research
in numerical linear algebra on parallelizing these numerical operations [4], and in the complexity
analysis shown in the table, we have assumed that matrix inversion and eigen-decompositions can be
sped up by a factor of P (cid:48) on P cores. (In practice, we expect P (cid:48)  P .) In our own software imple-
mentation, we had P (cid:48) = 1. Further, the reduce phase can minimize communication by combining
data as its passed back; this accounts for the log(P ) factor.
As an example of our running-time analysis, for single-core LWLR we have to compute A =
i ), which gives us the mn2 term. This matrix must be inverted for n3; also, the

(cid:80)m

i=1 wi(xixT

reduce step incurs a covariance matrix communication cost of n2.

5 Experiments

To provide fair comparisons, each algorithm had two different versions: One running map-reduce,
and the other a serial implementation without the framework. We conducted an extensive series of
experiments to compare the speed up on data sets of various sizes (table 2), on eight commonly used
machine learning data sets from the UCI Machine Learning repository and two other ones from a
[anonymous] research group (Helicopter Control and sensor data). Note that not all the experiments
make sense from an output view  regression on categorical data  but our purpose was to test
speedup so we ran every algorithm over all the data.

The rst environment we conducted experiments on was an Intel X86 PC with two Pentium-III 700
MHz CPUs and 1GB physical memory. The operating system was Linux RedHat 8.0 Kernel 2.4.20-

1If, for example, the number of iterations required grows with m. However, this would affect single- and

multi-core implementations equally.

LWLR
LR
NB
NN
GDA
PCA
ICA
k-means
EM
SVM

single

O(mn2 + n3) O( mn2
O(mn2 + n3) O( mn2
O(mn + nc)
O(mn + nc)
O(mn2 + n3) O( mn2
O(mn2 + n3) O( mn2
O(mn2 + n3) O( mn2

O(mn2 + n3) O( mn2

O(mnc)

O(m2n)

multi
P (cid:48) + n2 log(P ))
P (cid:48) + n2 log(P ))

P + nc log(P ))
P + nc log(P ))

P (cid:48) + n2 log(P ))
P (cid:48) + n2 log(P ))
P (cid:48) + n2 log(P ))

P + mn log(P ))

P (cid:48) + n2 log(P ))

P + n log(P ))

P + n3
P + n3
O( mn
O( mn
P + n3
P + n3
P + n3
O( mnc
P + n3
O( m2n

Table 1: time complexity analysis

Data Sets
Adult
Helicopter Control
Corel Image Features
IPUMS Census
Synthetic Time Series
Census Income
ACIP Sensor
KDD Cup 99
Forest Cover Type
1990 US Census

samples (m)

features (n)

30162
44170
68040
88443
100001
199523
229564
494021
581012
2458285

14
21
32
61
10
40
8
41
55
68

Table 2: data sets size and description

8smp. In addition, we also ran extensive comparison experiments on a 16 way Sun Enterprise 6000,
running Solaris 10; here, we compared results using 1,2,4,8, and 16 cores.

5.1 Results and Discussion

Table 3 shows the speedup on dual processors over all the algorithms on all the data sets. As can be
seen from the table, most of the algorithms achieve more than 1.9x times performance improvement.
For some of the experiments, e.g. gda/covertype, ica/ipums, nn/colorhistogram, etc., we obtain a
greater than 2x speedup. This is because the original algorithms do not utilize all the cpu cycles
efciently, but do better when we distribute the tasks to separate threads/processes.

Figure 2 shows the speedup of the algorithms over all the data sets for 2,4,8 and 16 processing cores.
In the gure, the thick lines shows the average speedup, the error bars show the maximum and
minimum speedups and the dashed lines show the variance. Speedup is basically linear with number

Adult
Helicopter
Corel Image
IPUMS
Synthetic
Census Income
Sensor
KDD
Cover Type
Census
avg.

lwlr
1.922
1.93
1.96
1.963
1.909
1.975
1.927
1.969
1.961
2.327
1.985

gda
1.801
2.155
1.876
2.23
1.964
2.179
1.853
2.216
2.232
2.292
2.080

nb

1.844
1.924
2.002
1.965
1.972
1.967
2.01
1.848
1.951
2.008
1.950

logistic
1.962
1.92
1.929
1.938
1.92
1.941
1.913
1.927
1.935
1.906
1.930

pca
1.809
1.791
1.97
1.965
1.842
2.019
1.955
2.012
2.007
1.997
1.937

ica
1.857
1.856
1.936
2.025
1.907
1.941
1.893
1.998
2.029
2.001
1.944

svm
1.643
1.744
1.754
1.799
1.76
1.88
1.803
1.946
1.906
1.959
1.819

nn

1.825
1.847
2.018
1.974
1.902
1.896
1.914
1.899
1.887
1.883
1.905

kmeans
1.947
1.857
1.921
1.957
1.888
1.961
1.953
1.973
1.963
1.946
1.937

em
1.854
1.86
1.832
1.984
1.804
1.99
1.949
1.979
1.991
1.977
1.922

Table 3: Speedups achieved on a dual core processor, without load time. Numbers reported are dual-
core time / single-core time. Super linear speedup sometimes occurs due to a reduction in processor
idle time with multiple threads.

(a)

(d)

(g)

(b)

(e)

(h)

(c)

(f)

(i)

Figure 2: (a)-(i) show the speedup from 1 to 16 processors of all the algorithms over all the data
sets. The Bold line is the average, error bars are the max and min speedups and the dashed lines are
the variance.

of cores, but with a slope < 1.0. The reason for the sub-unity slope is increasing communication
overhead. For simplicity and because the number of data points m typically dominates reduction
phase communication costs (typically a factor of n2 but n << m), we did not parallelize the reduce
phase where we could have combined data on the way back. Even so, our simple SVM approach
gets about 13.6% speed up on average over 16 cores whereas the specialized SVM cascade [11]
averages only 4%.

Finally, the above are runs on multiprocessor machines. We nish by reporting some conrming
results and higher performance on a proprietary multicore simulator over the sensor dataset.2 NN
speedup was [16 cores, 15.5x], [32 cores, 29x], [64 cores, 54x]. LR speedup was [16 cores, 15x],
[32 cores, 29.5x], [64 cores, 53x]. Multicore machines are generally faster than multiprocessor
machines because communication internal to the chip is much less costly.

6 Conclusion

As the Intel and AMD product roadmaps indicate [24], the number of processing cores on a chip
will be doubling several times over the next decade, even as individual cores cease to become sig-
nicantly faster. For machine learning to continue reaping the bounty of Moores law and apply to
ever larger datasets and problems, it is important to adopt a programming architecture which takes
advantage of multicore. In this paper, by taking advantage of the summation form in a map-reduce

2This work was done in collaboration with Intel Corporation.

framework, we could parallelize a wide range of machine learning algorithms and achieve a 1.9
times speedup on a dual processor on up to 54 times speedup on 64 cores. These results are in
line with the complexity analysis in Table 1. We note that the speedups achieved here involved no
special optimizations of the algorithms themselves. We have demonstrated a simple programming
framework where in the future we can just throw cores at the problem of speeding up machine
learning code.

Acknowledgments

We would like to thank Skip Macy from Intel for sharing his valuable experience in VTune perfor-
mance analyzer. Yirong Shen, Anya Petrovskaya, and Su-In Lee from Stanford University helped us
in preparing various data sets used in our experiments. This research was sponsored in part by the
Defense Advanced Research Projects Agency (DARPA) under the ACIP program and grant number
NBCH104009.

