Abstract
We investigate how to learn a kernel matrix for high dimensional data that lies on or near a low dimensional
manifold. Noting that the kernel matrix implicitly maps the data into a nonlinear feature space, we show how
to discover a mapping that unfolds the underlying manifold from which the data was sampled. The kernel
matrix is constructed by maximizing the variance in feature space subject to local constraints that preserve the
angles and distances between nearest neighbors. The main optimization involves an instance of semidefinite
programming---a fundamentally different computation than previous algorithms for manifold learning, such
as Isomap and locally linear embedding. The optimized kernels perform better than polynomial and Gaussian
kernels for problems in manifold learning, but worse for problems in large margin classification. We explain
these results in terms of the geometric properties of different kernels and comment on various interpretations
of other manifold learning algorithms as kernel methods.

Keywords
kernels, machine learning

Disciplines
Computer Sciences

Comments
Proceedings of the Twenty First International Conference on Machine Learning (ICML 2004), held 4-8 July
2004, Banff, Alberta, Canada.
matlab supplement

This conference paper is available at ScholarlyCommons: http://repository.upenn.edu/cis_papers/2

Learning a kernel matrix for nonlinear dimensionality reduction

Kilian Q. Weinberger
Fei Sha
Lawrence K. Saul
Department of Computer and Information Science, University of Pennsylvania, Philadelphia, PA 19104, USA

kilianw@cis.upenn.edu
feisha@cis.upenn.edu
lsaul@cis.upenn.edu

Abstract

We investigate how to learn a kernel matrix
for high dimensional data that lies on or near
a low dimensional manifold. Noting that the
kernel matrix implicitly maps the data into
a nonlinear feature space, we show how to
discover a mapping that unfolds the un-
derlying manifold from which the data was
sampled. The kernel matrix is constructed
by maximizing the variance in feature space
subject to local constraints that preserve the
angles and distances between nearest neigh-
bors. The main optimization involves an in-
stance of semidenite programminga fun-
damentally dierent computation than pre-
vious algorithms for manifold learning, such
as Isomap and locally linear embedding. The
optimized kernels perform better than poly-
nomial and Gaussian kernels for problems in
manifold learning, but worse for problems in
large margin classication. We explain these
results in terms of the geometric properties
of dierent kernels and comment on various
interpretations of other manifold learning al-
gorithms as kernel methods.

1. Introduction

Kernel methods (Scholkopf & Smola, 2002) have
proven to be extremely powerful in many areas of ma-
chine learning. The so-called kernel trick is by now
widely appreciated: a canonical algorithm (e.g., the
linear perceptron, principal component analysis) is re-
formulated in terms of Gram matrices, then general-
ized to nonlinear problems by substituting a kernel
function for the inner product. Well beyond this fa-
miliar recipe, however, the eld continues to develop

Appearing in Proceedings of the 21 st International Confer-
ence on Machine Learning, Ban, Canada, 2004. Copyright
2004 by the authors.

as researchers devise novel types of kernels, exploit-
ing prior knowledge in particular domains and insights
from computational learning theory and convex op-
timization.
Indeed, much work revolves around the
simple question: How to choose the kernel? The an-
swers are diverse, reecting the tremendous variety of
problems to which kernel methods have been applied.
Kernels based on string matching (Lodhi et al., 2004)
and weighted transducers (Cortes et al., 2003) have
been proposed for problems in bioinformatics, text,
and speech processing. Other specialized kernels have
been constructed for problems in pattern recognition
involving symmetries and invariances (Burges, 1999).
Most recently, kernel matrices have been learned by
semidenite programming for large margin classica-
tion (Graepel, 2002; Lanckriet et al., 2004).
In this paper, we revisit the problem of nonlinear
dimensionality reduction and its solution by kernel
principal component analysis (PCA) (Scholkopf et al.,
1998). Our specic interest lies in the application
of kernel PCA to high dimensional data whose basic
modes of variability are described by a low dimensional
manifold. The goal of nonlinear dimensionality reduc-
tion in these applications is to discover the underly-
ing manifold (Tenenbaum et al., 2000; Roweis & Saul,
2000). For problems of this nature, we show how to
learn a kernel matrix whose implicit mapping into fea-
ture space unfolds the manifold from which the data
was sampled. The main optimization of our algorithm
involves an instance of semidenite programming, but
unlike earlier work in learning kernel matrices (Grae-
pel, 2002; Lanckriet et al., 2004), the setting here is
completely unsupervised.
The problem of manifold learning has recently at-
tracted a great deal of attention (Tenenbaum et al.,
2000; Roweis & Saul, 2000; Belkin & Niyogi, 2003;
Saul & Roweis, 2003), and a number of authors (Ben-
gio et al., 2004; Ham et al., 2004) have developed
connections between manifold learning algorithms and
kernel PCA. In contrast to previous work, however,

our paper does not serve to reinterpret pre-existing
algorithms such as Isomap and locally linear embed-
ding as instances of kernel PCA. Instead, we propose
a novel optimization (based on semidenite program-
ming) that bridges the literature on kernel methods
and manifold learning in a rather dierent way. The
algorithm we describe can be viewed from several com-
plementary perspectives. This paper focuses mainly
on its interpretation as a kernel method, while a com-
panion paper (Weinberger & Saul, 2004) focuses on
its application to the unsupervised learning of image
manifolds.

2. Kernel PCA

Scholkopf, Smola, and Muller (1998) introduced ker-
nel PCA as a nonlinear generalization of PCA (Jol-
lie, 1986). The generalization is obtained by mapping
the original inputs into a higher (and possibly in-
nite) dimensional feature space F before extracting the
principal components. In particular, consider inputs
x1, . . . , xN  RD and features (x1), . . . , (xN )F
computed by some mapping  : RD  F. Kernel
PCA is based on the insight that the principal com-
ponents in F can be computed for mappings (x)
that are only implicitly dened by specifying the inner
product in feature spacethat is, the kernel function
K(x, y) = (x)  (y).
Kernel PCA can be used to obtain low dimensional
representations of high dimensional inputs. For this,
it suces to compute the dominant eigenvectors of the
kernel matrix Kij = (xi)  (xj). The kernel matrix
can be expressed in terms of its eigenvalues  and
. Assuming the
eigenvalues are sorted from largest to smallest, the d-
dimensional embedding that best preserves inner prod-

ucts in feature space is obtained by mapping the input
xiRD to the vector yi = (
The main freedom in kernel PCA lies in choosing the
kernel function K(x, y) or otherwise specifying the
kernel matrix Kij. Some widely used kernels are the
linear, polynomial and Gaussian kernels, given by:

eigenvectors v as K =P

 vvT

1v1i, . . . ,

dvdi).



K(x, y) = x  y,
K(x, y) = (1 + x  y)p,
K(x, y) = e

|xy|2

.

(1)
(2)

22

(3)
The linear kernel simply identies the feature space
with the input space. Implicitly, the polynomial kernel
maps the inputs into a feature space of dimensional-
ity O(Dp), while the Gaussian kernel maps the inputs
onto the surface of an innite-dimensional sphere.
The dominant eigenvalues of the kernel matrix Kij

measure the variance along the principal components
in feature space, provided that the features are cen-
tered on the origin. The features can always be cen-
tered by subtracting out their meannamely, by the
transformation (xi)  (xi)  1
j (xj). When
the mapping (x) is only implicitly specied by the
kernel function, the centering transformation can be
applied directly to the kernel matrix. In particular, re-
computing the inner products Kij = (xi)(xj) from
the centered features gives:

P

N

Kij  Kij  2
N

Kkj +

1
N 2

X

k

X

k

Kk.

(4)

For a centered kernel matrix, the relative weight of
the leading d eigenvalues, obtained by dividing their
sum by the trace, measures the relative variance cap-
tured by the leading d eigenvectors. When this ratio
is nearly unity, the data can be viewed as inhabiting a
d-dimensional subspace of the feature space, or equiv-
alently, a d-dimensional manifold of the input space.

3. Learning the kernel matrix

The choice of the kernel plays an important role in ker-
nel PCA, in that dierent kernels are bound to reveal
(or conceal) dierent types of low dimensional struc-
ture. In this section, we show how to learn a kernel
matrix that reveals when high dimensional inputs lie
on or near a low dimensional manifold. As in earlier
work on support vector machines (SVMs) (Graepel,
2002; Lanckriet et al., 2004), we will cast the prob-
lem of learning the kernel matrix as an instance of
semidenite programming. The similarity ends there,
however, as the optimization criteria for nonlinear di-
mensionality reduction dier substantially from the
criteria for large margin classication. We describe
the constraints on the optimization in section 3.1, the
objective function in section 3.2, and the optimization
itself in section 3.3.

3.1. Constraints

Semipositive deniteness
The kernel matrix K is constrained by three criteria.
The rst is semipositive deniteness, a condition re-
quired to interpret the kernel matrix as storing the
inner products of vectors in a Hilbert space. We thus
constrain the optimization over K to the cone of sym-
metric matrices with nonnegative eigenvalues. Though
not a linear constraint, the cone of semipositive de-
nite matrices denes a convex domain for the overall
optimization.
Centering
The second constraint is that the kernel matrix stores

the inner products of features that are centered on the
origin, or:

(xi) = 0

(5)

X

i

As described in section 2, this condition enables us
to interpret the eigenvalues of the kernel matrix as
measures of variance along principal components in
feature space. Eq. (5) can be expressed in terms of
the kernel matrix as:

= X

(xi)(xj) = X

ij

ij

Kij. (6)

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)X

i

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)2

0 =

(xi)

Note that this is a linear constraint on the elements
of the kernel matrix, thus preserving the convexity of
the domain of optimization.
Isometry
The nal constraints on the kernel matrix reect our
goals for nonlinear dimensionality reduction. In partic-
ular, we are interested in the setting where the inputs
lie on or near a low dimensional manifold, and the goals
of kernel PCA are to detect the dimensionality of this
underlying manifold and discover its modes of variabil-
ity. We imagine that this manifold is isometric to an
open connected subset of Euclidean space (Tenenbaum
et al., 2000; Donoho & Grimes, 2003), and the prob-
lem of learning the kernel matrix is to discover how the
inner products between inputs transform under this
mapping. An isometry1 is a smooth invertible map-
ping that looks locally like a rotation plus translation,
thus preserving local (and hence geodesic) distances.
Thus, in our application of kernel PCA to manifold
learning, the nal constraints we impose on the kernel
matrix are to restrict the (implicitly dened) mappings
between inputs and features from fully general nonlin-
ear transformations to the special class of isometries.
How is this done? We begin by extending the no-
tion of isometry to discretely sampled manifolds, in
inputs {x1, . . . , xN} and fea-
particular to sets of
tures {(x1), . . . , (xN )} in one-to-one correspon-
dence. Let the NN binary matrix  indicate a neigh-
borhood relation on both sets, such that we regard xj
as a neighbor of xi if and only if ij =1 (and similarly,
for (xj) and (xi)). We will say that the inputs
xi and features (xi) are locally isometric under the
neighborhood relation  if for every point xi, there ex-
ists a rotation and translation that maps xi and its
neighbors precisely onto (xi) and its neighbors.
The above denition translates naturally into various

1Formally, two Riemannian manifolds are said to be iso-
metric if there is a dieomorphism such that the metric on
one pulls back to the metric on the other.

sets of linear constraints on the elements of the ker-
nel matrix Kij. Note that the local isometry between
neighborhoods will exist if and only if the distances
and angles between points and their neighbors are pre-
served. Thus, whenever both xj and xk are neighbors
of xi (that is, ijik = 1), for local isometry we must
have that:
((xi)(xj))((xi)(xk)) = (xixj)(xixk) .
(7)
Eq. (7) is sucient for local isometry because the tri-
angle formed by any point and its neighbors is deter-
mined up to rotation and translation by specifying the
lengths of two sides and the angle between them. In
fact, such a triangle is similarly determined by speci-
fying the lengths of all its sides. Thus, we can also say
that the inputs and features are locally isometric un-
der  if whenever xi and xj are themselves neighbors
(that is, ij = 1) or are common neighbors of another
input (that is, [T ]ij >0), we have:

|(xi)(xj)|2 = |xixj|2 .

(8)

This is an equivalent characterization of local isome-
try as eq. (7), but expressed only in terms of pairwise
distances. Finally, we can express these constraints
purely in terms of dot products. Let Gij = xixj de-
note the Gram matrix of the inputs, and recall that the
kernel matrix Kij =(xi) (xj) represents the Gram
matrix of the features. Then eq. (8) can be written as:

Kii+KjjKijKji = Gii+GjjGijGji.

(9)

Eq. (9) constrains how the inner products between
nearby inputs are allowed to transform under a lo-
cally isometric mapping. We impose these constraints
to ensure that the mapping dened (implicitly) by the
kernel matrix is an isometry. Note that these con-
straints are also linear in the elements of the kernel
matrix, thus preserving the convexity of the domain
of optimization.
The simplest choice for neighborhoods is to let ij in-
dicate whether input xj is one of the k nearest neigh-
bors of input xi computed using Euclidean distance.
In this case, eq. (9) species O(N k2) constraints that
x the distances between each point and its nearest
neighbors, as well as the pairwise distances between
nearest neighbors. Provided that k (cid:28) N, however,
the kernel matrix is unlikely to be fully specied by
these constraints since it contains O(N 2) elements.

3.2. Objective function

In the previous section, we showed how to restrict the
kernel matrices so that the features (xi) could be re-
garded as images of a locally isometric mapping. The

goal of nonlinear dimensionality reduction is to dis-
cover the particular isometric mapping that unfolds
the underlying manifold of inputs into a Euclidean
space of its intrinsic dimensionality. This intrinsic
dimensionality may be much lower than the extrin-
sic dimensionality of the input space. To unfold the
manifold, we need to construct an objective function
over locally isometric kernel matrices that favors this
type of dimensionality reduction.
To this end, imagine each input xi as a steel ball con-
nected to its k nearest neighbors by rigid rods. (For
simplicity, we assume that the graph formed this way
is fully connected; if not, then each connected com-
ponent of the graph should be analyzed separately.)
The eect of the rigid rods is to lock the neighbor-
hoods in place, xing the distances and angles between
nearest neighbors. The lattice of steel balls formed in
this way can be viewed as a discretized version of the
underlying manifold. Now imagine that we pull the
steel balls as far apart as possible, recording their -
nal positions by (xi). The discretized manifold will
remain connecteddue to the constraints imposed by
the rigid rodsbut it will also atten, increasing the
variance captured by its leading principal components.
(For a continuous analogy, imagine pulling on the ends
of a string; a string with any slack in it occupies at least
two dimensions, whereas a taut, fully extended string
occupies just one.)
We can formalize this intuition as an optimization over
semipositive denite matrices. The constraints im-
posed by the rigid rods are, in fact, precisely the con-
straints imposed by eq. (9). An objective function that
measures the pairwise distances between steel balls is
given by:

|(xi)  (xj)|2

(10)

X

ij

T =

1
2N

It is easy to see that this function is bounded above
due to the constraints on distances between neighbors
imposed by the rigid rods. Suppose the distance be-
tween any two neighbors is bounded by some maximal
distance . Providing the graph is connected, then for
any two points, there exists a path along the graph
of distance at most N , which (by the triangle in-
equality) provides an upper bound on the Euclidean
distance between the points that appears in eq. (10).
This results in an upper bound on the objective func-
tion of order O(N 3 2).
Eq. (10) can be expressed in terms of the elements of
the kernel matrix by expanding the right hand side:

(Kii + Kjj  2Kij) = Tr(K).

(11)

X

ij

T =

1
2N

The last step in eq. (11) follows from the centering con-
straint in eq. (6). Thus the objective function for the
optimization is simply the trace of the kernel matrix.
Maximizing the trace also corresponds to maximizing
the variance in feature space.

3.3. Semidenite embedding (SDE)

The constraints and objective function from the pre-
vious sections dene an instance of semidenite pro-
gramming (SDP) (Vandenberghe & Boyd, 1996).
Specically, the goal is to optimize a linear function
of the elements in a semipositive denite matrix sub-
ject to linear equality constraints. Collecting the con-
straints and objective function, we have the following
optimization:

Maximize: Tr(K) subject to:
1. K (cid:23) 0.

2. P
for all i, j such that ij =1 or (cid:2)T (cid:3)

3. Kii+KjjKijKji = Gii+GjjGijGji
ij >0.

ij Kij = 0.

The optimization is convex and does not suer from
local optima. There are several general-purpose tool-
boxes and polynomial-time solvers available for prob-
lems in semidenite programming. The results in
this paper were obtained using the SeDuMi tool-
box (Sturm, 1999) in MATLAB. Once the kernel ma-
trix is computed, a nonlinear embedding can be ob-
tained from its leading eigenvectors, as described in
section 2. Because the kernel matrices in this approach
are optimized by semidenite programming, we will re-
fer to this particular form of kernel PCA as Semide-
nite Embedding (SDE).

4. Experimental Results

Experiments were performed on several data sets to
evaluate the learning algorithm described in section 3.
Though the SDE kernels were expressly optimized for
problems in manifold learning, we also evaluated their
performance for large margin classication.

4.1. Nonlinear dimensionality reduction

We performed kernel PCA with linear, polynomial,
Gaussian, and SDE kernels on data sets where we knew
or suspected that the high dimensional inputs were
sampled from a low dimensional manifold. Where nec-
essary, kernel matrices were centered before computing
principal components, as in eq. (4).

Figure 1. Top:
results of SDE applied to N = 800 in-
puts sampled from a Swiss roll (top left). The inputs
had D = 23 dimensions, of which 20 were lled with small
amounts of noise (not shown). The two dimensional plot
shows the embedding from kernel PCA with the SDE ker-
nel. Bottom: eigenvalues of dierent kernel matrices, nor-
malized by their trace. Only the eigenvalues from SDE
indicate the correct intrinsic dimensionality (d = 2) of the
Swiss roll.

In the rst experiment, the inputs were sampled from
a three dimensional Swiss roll, a data set com-
monly used to evaluate algorithms in manifold learn-
ing (Tenenbaum et al., 2000). Fig. 1 shows the orig-
inal inputs (top left), the embedding discovered by
SDE with k =4 nearest neighbors (top right), and the
eigenvalue spectra from several dierent kernel matri-
ces (bottom). The color coding of the embedding re-
veals that the Swiss roll has been successfully unrav-
eled. Note that the kernel matrix learned by SDE has
two dominant eigenvalues, indicating the correct un-
derlying dimensionality of the Swiss roll, whereas the
eigenspectra of other kernel matrices fail to reveal this
structure. In particular, the linear kernel matrix has
three dominant eigenvalues, reecting the extrinsic di-
mensionality of the swiss roll, while the eigenspectra
of the polynomial (p = 4) and Gaussian ( = 1.45)
kernel matrices2 indicate that the variances of their
features (xi) are spread across a far greater number
of dimensions than the original inputs xi.
The second experiment was performed on a data set
consisting of N = 400 color images of a teapot viewed
from dierent angles in the plane. With a resolution of

2For all the data sets in this section, we set the width
parameter  of the Gaussian kernel to the estimated stan-
dard deviation within neighborhoods of size k = 4, thus
reecting the same length scale used in SDE.

Figure 2. Results of SDE applied to N = 400 images of a
teapot viewed from dierent angles in the plane, under a
full 360 degrees of rotation. The images were represented
by inputs in a D = 23028 dimensional vector space. SDE
faithfully represents the 360 degrees of rotation by a circle.
The eigenvalues of dierent kernel matrices are also shown,
normalized by their trace.

76101 and three bytes of color information per pixel,
the images were represented as points in a D = 23028
dimensional vector space. Though very high dimen-
sional, the images in this data set are eectively pa-
rameterized by a single degree of freedomnamely, the
angle of rotation. The low dimensional embedding of
these images by SDE and the eigenvalue spectra of dif-
ferent kernel matrices are shown in Fig. 2. The kernel
matrix learned by SDE (with k =4 nearest neighbors)
concentrates the variance of the feature space in two
dimensions and maps the images to a circle, a highly
intuitive representation of the full 360 degrees of rota-
tion. By contrast, the linear, polynomial (p = 4), and
Gaussian ( = 1541) kernel matrices have eigenvalue
spectra that do not reect the low intrinsic dimen-
sionality of the data set.
Why does kernel PCA with the Gaussian kernel per-
form so dierently on these data sets when its width
parameter  reects the same length scale as neighbor-
hoods in SDE? Note that the Gaussian kernel com-
putes a nearly zero inner product (Kij  0) in fea-
ture space for inputs xi and xj that do not belong to

InputsEigenvalues (normalized by trace)SDE Kernel!!""!"#"!$""$"0.00.20.40.60.81.0GAUSSIANPOLYNOMIALLINEARSDE0.00.20.40.60.81.0GAUSSIANPOLYNOMIALLINEARSDEEigenvalues (normalized by trace)SDE KernelFigure 3. Embeddings from kernel PCA with the Gaussian
kernel on the Swiss roll and teapot data sets in Figs. 1
and 2. The rst three principal components are shown. In
both cases, dierent patches of the manifolds are mapped
to orthogonal parts of feature space.

the same or closely overlapping neighborhoods. It fol-
lows from these inner products that the feature vectors
(xi) and (xj) must be nearly orthogonal. As a re-
sult, the dierent patches of the manifold are mapped
into orthogonal regions of the feature space: see Fig. 3.
Thus, rather than unfolding the manifold, the Gaus-
sian kernel leads to an embedding whose dimensional-
ity is equal to the number of non-overlapping patches
of length scale . This explains the generally poor per-
formance of the Gaussian kernel for manifold learning
(as well as its generally good performance for large
margin classication, discussed in section 4.2).
Another experiment on the data set of teapot images
was performed by restricting the angle of rotation to
180 degrees. The results are shown in Fig. 4. Interest-
ingly, in this case, the eigenspectra of the linear, poly-
nomial, and Gaussian kernel matrices are not qualita-
tively dierent. By contrast, the SDE kernel matrix
now has only one dominant eigenvalue, indicating that
the variability for this subset of images is controlled by
a single (non-cyclic) degree of freedom.
As a nal experiment, we compared the performance of
the dierent kernels on a real-world data set described
by an underlying manifold. The data set (Hull, 1994)
consisted of N =953 grayscale images at 1616 resolu-
tion of handwritten twos and threes (in roughly equal
proportion). In this data set, it is possible to nd a rel-
atively smooth morph between any pair of images,
and a relatively small number of degrees of freedom
describe the possible modes of variability (e.g. writ-
ing styles for handwritten digits). Fig 5 shows the
results. Note that the kernel matrix learned by SDE
concentrates the variance in a signicantly fewer num-
ber of dimensions, suggesting it has constructed a more

Figure 4. Results of kernel PCA applied to N = 200 images
of a teapot viewed from dierent angles in the plane, under
180 degrees of rotation. The eigenvalues of dierent kernel
matrices are shown, normalized by their trace. The one
dimensional embedding from SDE is also shown.

appropriate feature map for nonlinear dimensionality
reduction.

4.2. Large margin classication

We also evaluated the use of SDE kernel matrices for
large margin classication by SVMs. Several training
and test sets for problems in binary classication were
created from the USPS data set of handwritten dig-
its (Hull, 1994). Each training and test set had 810
and 90 examples, respectively. For each experiment,
the SDE kernel matrices were learned (using k = 4
nearest neighbors) on the combined training and test
data sets, ignoring the target labels. The results were
compared to those obtained from linear, polynomial
(p = 2), and Gaussian ( = 1) kernels. Table 1 shows
that the SDE kernels performed quite poorly in this
capacity, even worse than the linear kernels.
Fig. 6 oers an explanation of this poor performance.
The SDE kernel can only be expected to perform well
for large margin classication if the decision bound-
ary on the unfolded manifold is approximately linear.
There is no a priori reason, however, to expect this
type of linear separability. The example in Fig. 6
shows a particular binary labeling of inputs on the
Swiss roll for which the decision boundary is much
simpler in the input space than on the unfolded mani-
fold. A similar eect seems to be occurring in the large
margin classication of handwritten digits. Thus, the
strength of SDE for nonlinear dimensionality reduction
is generally a weakness for large margin classication.
By contrast, the polynomial and Gaussian kernels lead
to more powerful classiers precisely because they map
inputs to higher dimensional regions of feature space.

5. Related and ongoing work

SDE can be viewed as an unsupervised counterpart to
the work of Graepel (2002) and Lanckriet et al (2004),
who proposed learning kernel matrices by semidenite

BDACBCADBCDABCDAFigure 5. Results of kernel PCA applied to N = 953 images
of handwritten digits. The eigenvalues of dierent kernel
matrices are shown, normalized by their trace.

Digits Linear Polynomial Gaussian
1 vs 2
1 vs 3
2 vs 8
8 vs 9

0.00
0.23
2.18
1.00

0.00
0.00
1.12
0.54

0.14
0.35
0.63
0.29

SDE
0.59
1.73
3.37
1.27

Table 1. Percent error rates for SVM classication using
dierent kernels on test sets of handwritten digits. Each
line represents the average of 10 experiments with dierent
90/10 splits of training and testing data. Here, the SDE
kernel performs much worse than the other kernels.

Figure 7. The twenty eigenvalues of
leading magnitude
from Isomap and SDE on the data sets of teapot images
and handwritten digits. Note that the similarity matrices
constructed by Isomap have negative eigenvalues.

programming for large margin classication. The ker-
nel matrices learned by SDE dier from those usually
employed in SVMs, in that they aim to map inputs into
an (eectively) lower dimensional feature space. This
explains both our positive results in nonlinear dimen-
sionality reduction (section 4.1), as well as our negative
results in large margin classication (section 4.2).
SDE can also be viewed as an alternative to mani-
fold learning algorithms such as Isomap (Tenenbaum
et al., 2000), locally linear embedding (LLE) (Roweis
& Saul, 2000; Saul & Roweis, 2003), hessian LLE
(hLLE) (Donoho & Grimes, 2003), and Laplacian
eigenmaps (Belkin & Niyogi, 2003). All these al-
gorithms share a similar structure, creating a graph
based on nearest neighbors, computing an N  N ma-
trix from geometric properties of the inputs, and con-
structing an embedding from the eigenvectors with the
largest or smallest nonnegative eigenvalues. A more
detailed discussion of dierences between these algo-

linearly separable inputs (in black versus
Figure 6. Left:
white) sampled from a a Swiss roll. Right: unfolding the
manifold leads to a more complicated decision boundary.

rithms is given in a companion paper (Weinberger &
Saul, 2004). Here, we comment mainly on their various
interpretations as kernel methods (Ham et al., 2004).
In general, these other methods give rise to matrices
whose geometric properties as kernels are less robust or
not as well understood. For example, unlike SDE, the
similarity matrix constructed by Isomap from nite
data sets can have negative eigenvalues. In some cases,
moreover, these negative eigenvalues can be apprecia-
ble in magnitude to the dominant positive ones: see
Fig. 7. Unlike both SDE and Isomap, LLE and hLLE
construct matrices whose bottom eigenvectors yield low
dimensional embeddings; to interpret these matrices as
kernels, their eigenvalues must be ipped, either by
inverting the matrix itself or by subtracting it from
a large multiple of the identity matrix. Moreover, it
does not appear that these eigenvalues can be used
to estimate the intrinsic dimensionality of underlying
manifolds (Saul & Roweis, 2003). A kernel can be de-
rived from the discrete Laplacian by noting its role in
the heat diusion equation, but the intuition gained
from this analogy, in terms of diusion times through
a network, does not relate directly to the geometric
properties of the kernel matrix. SDE stands apart
from these methods in its explicit construction of a
semipositive denite kernel matrix that preserves the
geometric properties of the inputs up to local isometry
and whose eigenvalues indicate the dimensionality of
the underlying manifold.
We are pursuing many directions in ongoing work.
The rst is to develop faster and potentially dis-
tributed (Biswas & Ye, 2003) methods for solving the

5101520!0.200.20.40.65101520!0.200.20.40.6ISOMAP510152000.20.4510152000.20.4SDEinstance of semidenite programming in SDE and for
out-of-sample extensions (Bengio et al., 2004). Thus
far we have been using generic solvers with a relatively
high time complexity, relying on toolboxes that do
not exploit any special structure in our problem. We
are also investigating many variations on the objective
function and constraints in SDEfor example, to al-
low some slack in the preservation of local distances
and angles, or to learn embeddings onto spheres. Fi-
nally, we are performing more extensive comparisons
with other methods in nonlinear dimensionality reduc-
tion. Not surprisingly, perhaps, all these directions re-
ect a more general trend toward the convergence of
research in kernel methods and manifold learning.

Acknowledgements

The authors are grateful to S. Boyd and Y. Ye (Stan-
ford) for useful discussions of semidenite program-
ming and to the anonymous reviewers for many helpful
comments.

