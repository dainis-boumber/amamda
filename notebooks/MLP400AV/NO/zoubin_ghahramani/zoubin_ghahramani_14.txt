AN INTRODUCTION TO HIDDEN MARKOV MODELS AND

BAYESIAN NETWORKS

ZOUBIN GHAHRAMANI

Gatsby Computational Neuroscience Unit, University College,

London, London WC1N 3AR, UK

http://www.gatsby.ucl.ac.uk/

(cid:24)
zoubin/

E-mail : zoubin@gatsby.ucl.ac.uk

We provide a tutorial on learning and inference in hidden Markov models in the context
of the recent literature on Bayesian networks. This perspective makes it possible to con-
sider novel generalizations of hidden Markov models with multiple hidden state variables,
multiscale representations, and mixed discrete and continuous variables. Although exact
inference in these generalizations is usually intractable, one can use approximate infer-
ence algorithms such as Markov chain sampling and variational methods. We describe
how such methods are applied to these generalized hidden Markov models. We conclude
this review with a discussion of Bayesian methods for model selection in generalized
HMMs.

Keywords: Dynamic Bayesian networks; hidden Markov models; state space models; EM
algorithms; variational methods; Gibbs sampling.

1. Introduction

Hidden Markov models (HMMs) are a ubiquitous tool for modeling time series
data. They are used in almost all current speech recognition systems, in numerous
applications in computational molecular biology, in data compression, and in other
areas of arti(cid:12)cial intelligence and pattern recognition. Recently HMMs have also
been used in computer vision applications | the topic of this special issue | such
as image sequence modeling and object tracking. The goal of this paper is to answer
the following questions about HMMs, independently of what application the HMM
is used for:
(cid:15) What are hidden Markov models? HMMs will be de(cid:12)ned in Sec. 2.
(cid:15) How do they relate to other Markov models and Bayesian networks in general?
Simply stated, hidden Markov models are a particular kind of Bayesian network.
In Sec. 3, we will provide a short tutorial on Bayesian networks and describe how
HMMs and other Markov models relate to them.
(cid:15) What are the algorithms for inference and learning in HMMs and Bayesian net-
works? In order to use an HMM to track an object, segment speech, or group
amino-acid sequences into protein families, we need solutions to the inference

9

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

10 Z. Ghahramani

and learning problems. In Sec. 4, we will describe inference and learning algo-
rithms for HMMs and how they relate to the general belief propagation and EM
algorithms for Bayesian networks.
(cid:15) What are the limitations of HMMs and how can these be overcome? While a lot of
mileage has been obtained out of HMMs, these models are quite limited. In Sec. 5,
we discuss these limitations, and some generalizations of HMMs that overcome
these limitations. Unfortunately, more complex models also require more complex
(and sometimes approximate) algorithms for inference and learning. These will
be described in Sec. 6.
(cid:15) How does one avoid over(cid:12)tting and select model structures in HMMs? One of the
last frontiers in the study of HMMs is how to select model structures and how
to (cid:12)t a complex model to a small data set without (cid:12)tting noise in the data. A
Bayesian solution to these two (closely related) problems is given in Sec. 7.

While there have been several tutorials and review articles written about HMMs
(e.g. in Ref. 45), our understanding of HMMs has changed considerably since the
realization that they are a kind of Bayesian network.54 Namely, we can now relate
them to more complex and interesting models, and we can discuss general solutions
to the problems of approximate inference, parameter learning, and model selec-
tion. The hope is that this article will introduce the reader to a state-of-the-art
understanding of HMMs.

S1

Y1

S2

Y2

S3

Y3

ST

YT

Fig. 1. A Bayesian network specifying conditional independence relations for a hidden Markov
model.

2. What are Hidden Markov Models?

A hidden Markov model is a tool for representing probability distributions over
sequences of observations. Let us denote the observation at time t by the variable
Yt. This can be symbol from a discrete alphabet, a real-valued variable, an integer,
or any other object, as long as we can de(cid:12)ne a probability distribution over it. We
assume that the observations are sampled at discrete, equally-spaced time intervals,
so t can be an integer-valued time index.

The hidden Markov model gets its name from two de(cid:12)ning properties. First, it
assumes that the observation at time t was generated by some process whose state
St is hidden from the observer. Second, it assumes that the state of this hidden
process satis(cid:12)es the Markov property: that is, given the value of St1, the current

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

11

state St is independent of all the states prior to t  1.a In other words, the state

at some time encapsulates all we need to know about the history of the process
in order to predict the future of the process. The outputs also satisfy a Markov
property with respect to the states: given St; Yt is independent of the states and
observations at all other time indices.

Taken together, these Markov properties mean that the joint distribution of a

sequence of states and observations can be factored in the following way

TY

P (S1:T ; Y1:T ) = P (S1)P (Y1jS1)

P (StjSt1)P (YtjSt)

(1)

t=2

where we have used the notation X1:T to mean X1; : : : ; XT . This factorization of the
joint probability can be drawn graphically in the form shown in Fig. 1. This graph,
known as a Bayesian network, belief network, probabilistic graphical model, or
probabilistic independence network, shows the dependencies between the variables
in the model. We will de(cid:12)ne Bayesian networks more fully in the following section,
but for now it is su(cid:14)cient to note that each variable is represented by a node in the
graph, and each node receives directed arcs from nodes on which it is conditionally
dependent in the factorization of the joint distribution.

A third assumption of the hidden Markov model is that the hidden state variable

is discrete: St can take on K values which we will denote by the integers f1; : : : ; Kg.
left to specify is a probability distribution over the initial state P (S1), the K (cid:2) K
state transition matrix de(cid:12)ning P (StjSt1) and the output model de(cid:12)ning P (YtjSt).

To de(cid:12)ne a probability distribution over sequences of observations, all that is

HMMs usually assume that the state transition matrices and output models are not
dependent on t | in other words the model is time invariant (except for the initial
state). If the observables are discrete symbols taking on one of L values, the output
model can be fully speci(cid:12)ed by a K (cid:2) L observation (or emission) matrix.

For real-valued observation vectors, P (YtjSt) can be modeled in many di(cid:11)erent

forms, such as a Gaussian, mixture of Gaussians, or a neural network. For high-
dimensional real-valued observations, a very useful output model is obtained by
replacing the Gaussian by a factor analyzer.50 Factor analysis (FA) is a method for
modeling correlations in high-dimensional data, and is closely related to principal
components analysis (PCA). The relationships between FA, PCA, mixture models,
HMMs, and other models are reviewed in Ref. 48.

HMMs can be augmented to allow for input variables, Ut, in such a way that
there is an input dependent state transition probability, P (StjSt1; Ut).5;9;40 The

system then models the conditional distribution of a sequence of output observations
given a sequence of input observations. HMMs have been applied extensively to
problems in speech recognition,32 computational biology3;36 and fault detection.53

aThis is a (cid:12)rst-order Markov property. An nth order Markov process is one in which St given
St1; : : : ; Stn is independent of S(cid:28) for (cid:28) < t  n.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

12 Z. Ghahramani

We now turn to Bayesian networks, a more general framework than hidden
Markov models which will allow us both to understand the algorithms for inference
and learning in HMMs and to formulate natural extensions to the HMM.

3. A Bayesian Network Tutorial

A Bayesian network is a graphical model for representing conditional independencies
between a set of random variables. Consider four random variables, W; X; Y , and
Z. From basic probability theory we know that we can factor the joint probability
as a product of conditional probabilities

P (W; X; Y; Z) = P (W )P (XjW )P (Y jW; X)P (ZjW; X; Y ) :

This factorization does not tell us anything useful about the joint probability
distribution: each variable can potentially depend on every other variable. How-
ever, consider the following factorization

P (W; X; Y; Z) = P (W )P (X)P (Y jW )P (ZjX; Y ) :

(2)

The above factorization implies a set of conditional independence relations. A
variable (or set of variables) A is conditionally independent from B given C if
P (A; BjC) = P (AjC)P (BjC) for all A; B and C such that P (C) 6= 0. From the
above factorization we can show that given the values of X and Y; W and Z are
independent

P (W; X; Y; Z)

P (X; Y )
P (W )P (X)P (Y jW )P (ZjX; Y )

R
P (W )P (X)P (Y jW )P (ZjX; Y )dW dZ
P (W )P (Y jW )P (ZjX; Y )

P (W; ZjX; Y ) =

=

=
= P (WjY )P (ZjX; Y ) :

P (Y )

A Bayesian network is a graphical way to represent a particular factorization of a
joint distribution. Each variable is represented by a node in the network. A directed
arc is drawn from node A to node B if B is conditioned on A in the factorization
of the joint distribution. For example, to represent the factorization (2) we would
draw an arc from W to Y but not from W to Z. The Bayesian network representing
the factorization (2) is shown in Fig. 2.

Some basic de(cid:12)nitions from graph theory will be necessary at this point. The
node A is a parent of another node B if there is a directed arc from A to B; if so,
B is a child of A. The descendents of a node are its children, childrens children,
and so on. A directed path from A to B is a sequence of nodes starting from A and
ending in B such that each node in the sequence is a parent of the following node
in the sequence. An undirected path from A to B is a sequence of nodes starting

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

13

W

Y

X

Z

Fig. 2. A directed acyclic graph (DAG) consistent with the conditional independence relations
in P (W; X; Y; Z).

from A and ending in B such that each node in the sequence is a parent or child of
the following node.

The semantics of a Bayesian network are simple: each node is conditionally
independent from its nondescendents given its parents.b More generally, two disjoint
sets of nodes A and B are conditionally independent given C, if C d-separates A
and B, that is, if along every undirected path between a node in A and a node
in B there is a node D such that: (1) D has converging arrowsc and neither D
nor its descendents are in C, or (2) D does not have converging arrow and D is in
C.44 From visual inspection of the graphical model it is therefore easy to infer many
independence relations without explicitly grinding through Bayes rule. For example,
W is conditionally independent from X given the set C = fY; Zg, since Y 2 C is
along the only path between W and X, and Y does not have converging arrows.
However, we cannot infer from the graph that W is conditionally independent from
X given Z.

Notice that since each factorization implies a strict ordering of the variables, the
connections obtained in this manner de(cid:12)ne a directed acyclic graph.d Furthermore,
there are many ways to factorize a joint distribution, and consequently there are
many Bayesian networks consistent with a particular joint. A Bayesian network G
is said to be an independency map I-map for a distribution P if every d-separation
displayed in G corresponds to a valid conditional independence relation in P . G
is a minimal I-map if no arc can be deleted from G without removing the I-map
property.

The absence of arcs in a Bayesian networks implies conditional independence re-
lations which can be exploited to obtain e(cid:14)cient algorithms for computing marginal

bSince there is a one-to-one correspondence between nodes and variables, we will often talk about
conditional independence relations between nodes meaning conditional independence relations
between the variables associated with the nodes.
cThat is, D is a child of both the previous and following nodes in the path.
dUndirected graphical models (Markov networks) are another important tool for representing
probability distributions, and have a di(cid:11)erent set of semantics.6;17 We will deal exclusively with
directed graphical models in this paper.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

14 Z. Ghahramani

and conditional probabilities. For singly connected networks, in which the under-
lying undirected graph has no loops, there exists a general algorithm called belief
propagation.35;44 For multiply connected networks, in which there can be more than
one undirected path between any two nodes, there exists a more general algorithm
known as the junction tree algorithm.29;37 I will provide the essence of the belief
propagation algorithm (since the exact inference methods used throughout this
paper are based on it) and refer the reader to relevant texts24;28;44 for details.

Assume we observe some evidence: the value of some variables in the network.
The goal of belief propagation is to update the marginal probabilities of all the
variables in the network to incorporate this new evidence. This is achieved by local
message passing: each node, n sends a message to its parents and to its children.
Since the graph is singly connected, n separates the graph, and therefore the evi-
dence, into two mutually exclusive sets: e+(n), consisting of the parents of n, the
nodes connected to n through its parents,e and n itself, and e
(n) consisting of
the children n and the nodes connected to n through its children (Fig. 3). The
message from n to each of its children is the probability of each setting of n given
the evidence observed in the set e+(n). If n is a K-valued discrete variable, then
this message is a K-dimensional vector. For real-valued variables, the message is
a probability density over the domain of values n can take. The message from n
to each of its parents is the probability, given every setting of the parent, of the
(n) [ fng. The marginal probability of a node is
evidence observed in the set e
proportional to the product of the messages obtained from its parents, weighted by
the conditional probability of the node given its parents, and the message obtained

from its children. If the parents of n are fp1; : : : ; pkg and the children of n are
fc1; : : : ; cg, then





P (nje) /

P (njp1; : : : ; pk)

P (pije+(pi))



(cj)jn)

P (cj ; e

(3)

i=1

j=1

(cid:20)Z

where the summation (or more generally the integral) extends over all settings of
fp1; : : : ; pkg. For example, for the Bayesian network in Fig. 2, given the evidence
e = fX = x; Z = zg,

P (Y jX = x; Z = z) /

P (Y jW )P (W )dW

P (Z = z; X = xjY )

(4)

/ P (Y )P (Z = zjX = x; Y )P (X = x)

(5)
where P (W ) is the message passed from W to Y since e+(W ) = ;, and
P (Z = z; X = xjY ) is the message passed from Z to Y . Variables in the evi-
dence set are referred to as observable variables, while those that are not in the
evidence set are referred to as hidden variables.

eThat is, the nodes for which the undirected path to n goes through a parent of n.

24 X

fp1;:::;pkg

kY

35 Y

(cid:21)

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

15

e (n)+

p1

p2

p3

n

c1

c2

c3

e (n)-

Fig. 3. Separation of evidence in singly connected graphs.

Y1

Y2

Y3

YT

Fig. 4. A Bayesian network representing a (cid:12)rst-order Markov process.

3.1. Dynamic Bayesian networks

Hidden Markov models fall in a subclass of Bayesian networks known as dynamic
Bayesian networks, which are simply Bayesian networks for modeling time series
data. In time series modeling, the assumption that an event can cause another event
in the future, but not vice-versa, simpli(cid:12)es the design of the Bayesian network:
directed arcs should ow forward in time. Assigning a time index t to each variable,

one of the simplest causal models for a sequence of data fY1; : : : ; YTg is the (cid:12)rst-

order Markov model we have already mentioned, in which each variable is directly
inuenced only by the previous variable (Fig. 4):

P (Y1:T ) = P (Y1)P (Y2jY1)(cid:1)(cid:1)(cid:1) P (YTjYT1) :

Having observed fY1; : : : ; YTg, the model will only make use of Yt to predict
Yt+1. One simple way of extending Markov models is to allow higher order interac-
tions between variables, for example, an nth-order Markov model allows arcs from
fYtn; : : : ; Yt1g to Yt. Another way to extend Markov models is to posit that the

observations are dependent on a hidden variable, which we will call the state, and
that the sequence of states is a Markov process (Fig. 1). Hidden Markov models
fall into this class of dynamic Bayesian network. Another very well-known model
in this class is the linear-Gaussian state-space model, also known as the Kalman
(cid:12)lter, which can be thought of as the continuous-state version of HMMs.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

16 Z. Ghahramani

3.2. State-space models

In state-space models, a sequence of D-dimensional real-valued observation vectors

fY1; : : : ; YTg, is modeled by assuming that at each time step Yt was generated from
a K-dimensional real-valued hidden state variable Xt, and that the sequence of Xs
de(cid:12)ne a (cid:12)rst-order Markov process:

TY

P (X1:T ; Y1:T ) = P (X1)P (Y1jX1)

P (XtjXt1)P (YtjXt) :

(6)

t=2

This factorization of the joint probability means that the Bayesian network for
state-space models is identical to that of HMMs (Fig. 1) except that the hidden S
variables are replaced by hidden X variables.

The state transition probability P (XtjXt1) can be decomposed into determin-

istic and stochastic components:

Xt = ft(Xt1) + wt

where ft is the deterministic transition function determining the mean of Xt given
Xt1, and wt is a zero-mean random noise vector. Similarly, the observation prob-
ability P (YtjXt) can be decomposed as

Yt = gt(Xt) + vt :

If both the transition and output functions are linear and time-invariant and the
distribution of the state and observation noise variables is Gaussian, the model
becomes a linear-Gaussian state-space model:

Xt = AXt1 + wt

Yt = CXt + vt

(7)

(8)

where A is the state transition matrix and C is the observation matrix.

Often, the observations can be divided into a set of input (or predictor) variables
and output (or response) variables. Again, assuming linearity and Gaussian noise
we can write the state transition function as

Xt = AXt1 + BUt + wt

(9)

where Ut is the input observation vector and B is the input matrix. The Bayesian
network corresponding to this model would include a sequence of nodes U1:T each
of which is a parent of the corresponding Xt. Linear-Gaussian state-space models
are used extensively in all areas of control and signal processing.

What makes hidden Markov models and state-space models special is that their
hidden state spaces are closed under their respective state transition probabilities
and output models. In HMMs, the hidden state is assumed to have a K-valued
discrete (a.k.a. multinomial) distribution. After multiplying by a K (cid:2) K transition
matrix one obtains another K-valued multinomial distribution. In SSMs the hidden
state is assumed to be Gaussian distributed. After the dynamics consisting of a

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

17

linear transformation with Gaussian noise added, one again obtains a Gaussian
distributed hidden state. This closed property of HMMs and SSMs makes inference
and learning particularly simple and appealing in these models.

4. Learning and Inference

A Bayesian approach to learning starts with some a priori knowledge about the
model structure | the set of arcs in the Bayesian network | and model parameters.
This initial knowledge is represented in the form of a prior probability distribution
over model structures and parameters, and is updated using the data to obtain
a posterior probability distribution over models and parameters. More formally,
assuming a prior distribution over model structures P (M) and a prior distribution
over parameters for each model structure P ((cid:18)jM), a data set D is used to form a
posterior distribution over models using Bayes rule

R

P (MjD) =

P (Dj(cid:18);M)P ((cid:18)jM)d(cid:18)P (M)

P (D)

(10)

which averages over the uncertainty in the parameters. For a given model structure,
we can compute the posterior distribution over the parameters

P (Dj(cid:18);M)P ((cid:18)jM)

P (DjM)

:

P ((cid:18)jM;D) =
Z

If the data set is some sequence of observations D = fY1; : : : ; YTg and we wish to
predict the next observation, YT +1 based on our data and models, then the Bayesian
prediction

P (YT +1jD) =

P (YT +1j(cid:18);M;D)P ((cid:18)jM;D)P (MjD)d(cid:18) dM

averages over both the uncertainty in the model structure and in the parameters.
This is known as the predictive distribution for the model.
We obtain a somewhat impoverished but nonetheless useful limiting case of the
Bayesian approach to learning if we assume a single model structure M and we
estimate the parameter vector ^(cid:18) that maximizes the likelihood P (Dj(cid:18);M) under
that model. In the limit of a large data set and an uninformative (e.g. uniform)
prior over the parameters, the posterior P ((cid:18)jM;D) will be sharply peaked around
the maxima of the likelihood, and therefore the predictions of a single maximum
likelihood (ML) model will be similar to those obtained by Bayesian integration
over the parameters.

For now we focus on the problem of estimating ML parameters for a given
model structure. Although this is the most widely used approach to learning hidden
Markov models, it only crudely approximates Bayesian learning, and can perform
catastrophically when data is scarce and/or the model is complex. In practice an
exact Bayesian analysis of HMMs is impractical, which is why most research has
focused on ML approaches or regularized ML approaches. In Sec. 7, we will tackle
practical approaches to full-edged Bayesian learning.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

18 Z. Ghahramani

4.1. ML estimation with complete data

Assume we are given a data set of independent and identically distributed observa-
tions D = fY (1); : : : ; Y (N )g, each of which can be a vector or time series of vectors.
The likelihood of the data set is a function of the parameters of the model

P (Dj(cid:18);M) =

P (Y (i)j(cid:18);M) :

NY

i=1

For notational convenience we henceforth drop the implicit conditioning on the
model structure, M. The ML parameters are obtained by maximizing the likelihood,
or equivalently the log likelihood

NY

i=1

L((cid:18)) =

log P (Y (i)j(cid:18)) :
Y

If the observation vector includes all the variables in the Bayesian network, then
each term in the log likelihood further factors as

log P (Y (i)j(cid:18)) = log
X

P (Y (i)jY (i)

pa(j); (cid:18)j)

j

log P (Y (i)jY (i)

pa(j); (cid:18)j)

=

j

(11)

(12)

where j indexes the nodes in the Bayesian network, pa(j) is the set of parents of
j, and (cid:18)j are the parameters that de(cid:12)ne the conditional probability of Yj given its
parents. The likelihood therefore decouples into local terms involving each node and
its parents, simplifying the ML estimation problem. For example, if the Y variables
are discrete and (cid:18)j is the conditional probability table for Yj given its parents, then
the ML estimate of (cid:18)j is simply a normalized table containing counts of each setting
of Yj given each setting of its parents in the data set.

4.2. ML estimation with hidden variables: the EM algorithm

With hidden variables the log likelihood cannot be decomposed as in (12). Rather,
we (cid:12)nd:

L((cid:18)) = log P (Y j(cid:18)) = log

(13)

X
P (Y; Xj(cid:18))
P

X

where X is the set of hidden variables, and
X is the sum (or integral) over
X required to obtain the marginal probability of the data. (We have dropped the
superscript (i) in (13) by evaluating the log likelihood for a single observation, again
for notational convenience.) Maximizing (13) directly is often di(cid:14)cult because the
log of the sum can potentially couple all of the parameters of the model. We can
simplify the problem of maximizing L with respect to (cid:18) by making use of the

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

19

following insight. Any distribution Q(X) over the hidden variables de(cid:12)nes a lower
bound on L:

X

log

X

P (Y; Xj(cid:18)) = log
X
X

(cid:20)

X

X

Q(X)

X

Q(X) log

P (Y; Xj(cid:18))
Q(X)
P (X; Y j(cid:18))
Q(X)

Q(X) log P (X; Y j(cid:18)) 

=
= F(Q; (cid:18))

X

(14)

(15)

Q(X) log Q(X)

(16)

(17)

X

X

where the inequality is known as Jensens inequality and follows from the fact
that the log function is concave. If we de(cid:12)ne the energy of a global con(cid:12)guration
(X; Y ) to be log P (X; Y j(cid:18)), then some readers may notice that the lower bound
F(Q; (cid:18)) (cid:20) L((cid:18)) is the negative of a quantity known in statistical physics as the free
energy: the expected energy under Q minus the entropy of Q.42 The Expectation{
Maximization (EM) algorithm4;12 alternates between maximizing F with respect
to Q and (cid:18), respectively, holding the other (cid:12)xed. Starting from some initial
parameters (cid:18)0

E step:

M step:

Qk+1   arg max
(cid:18)k+1   arg max

F(Q; (cid:18)k)
F(Qk+1; (cid:18)) :

Q

(18)

(19)

(cid:18)

It is easy to show that the maximum in the E step is obtained by set-

ting Qk+1(X) = P (XjY; (cid:18)k), at which point the bound becomes an equality:
F(Qk+1; (cid:18)k) = L((cid:18)k). The maximum in the M step is obtained by maximizing

the (cid:12)rst term in (16), since the entropy of Q does not depend on (cid:18):

M step:

(cid:18)k+1   arg max

P (XjY; (cid:18)k) log P (X; Y j(cid:18)) :

(cid:18)

This is the expression most often associated with the EM algorithm,12 but it ob-
scures the elegant interpretation of EM as coordinate ascent in F. Since F = L
at the beginning of each M step, and since the E step does not change (cid:18), we are
guaranteed not to decrease the likelihood after each combined EM step.

It is worthwhile to point out that it is usually not necessary to explicitly evaluate

the posterior distribution P (XjY; (cid:18)k). Since log P (X; Y j(cid:18)) contains both hidden and

observed variables in the network, it can be factored as before as the sum of log
probabilities of each node given its parents. Consequently, the quantities required

for the M step are the expected values, under the posterior distribution P (XjY; (cid:18)k),

of the analogous su(cid:14)cient statistics required for ML estimation in the complete data
case.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

20 Z. Ghahramani

4.3. Example 1: Learning hidden Markov models using EM

To derive the EM algorithm for learning the parameters of an HMM we (cid:12)rst need
to write out the log probability of the hidden variables and observations:

log P (S1:T ; Y1:T ) = log P (S1) +

log P (YtjSt) +

log P (StjSt1) :

(20)

TX

TX

t=1

t=2

Let us represent the K-valued discrete state St using K-dimensional unit column
vectors, e.g. the state at time t taking on the value \2" is represented as St =
>
[010 : : :]
. Each of the terms in (20) can be decomposed into summations over S.
For example, the transition probability is

P (StjSt1) =

((cid:8)ij )St;iSt1;j

where (cid:8)ij is the probability of transitioning from state j to state i, arranged in a
K (cid:2) K matrix (cid:8). Then

KY

KY

i=1

j=1

KX

KX

log P (StjSt1) =

St;iSt1;j log (cid:8)ij

j=1

i=1
>
t (log (cid:8))St1

= S

>

(21)

(22)

using matrix notation, where
is the matrix transpose (not to be confused with the
sequence length T ), and logarithms of vectors and matrices are taken elementwise.
Similarly, if the initial state probabilities are arranged in a vector (cid:25), then

log P (S1) = S

>
1 log (cid:25) :

(23)

Finally, the emission probabilities depend on the form of the observations. If Yt is
a discrete variable which can take on D values, then we again represent it using
D-dimensional unit vectors and obtain

log P (YtjSt) = Y

>
t (log E)St

where E is a D (cid:2) K emission probability matrix. The parameter set for the HMM
is (cid:18) = f(cid:8); (cid:25); Eg.

Since the state variables are hidden we cannot compute (20) directly. The EM
algorithm, which in the case of HMMs is known as the Baum{Welch algorithm,4
allows us to circumvent this problem by computing the expectation of (20) under
the posterior distribution of the hidden states given the observations. We denote
the expected value of some quantity f (X) with respect to the posterior distribution
of X by hf (X)i,

hf (X)i =

f (X)P (XjY; (cid:18))dX :

(24)
The expected value of (20) can be expressed as a function of hSti and hStS
i. The
(cid:12)rst term, hSti, is a vector containing the probability that the HMM was in each of

>
t1

X

Z

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

21

the K states at time t given its current parameters and the entire sequence of ob-
i, is a matrix containing the joint probability
servations.f The second term, hStS
that the HMM was in each of the K 2 pairs of states at times t  1 and t. In the
HMM notation of Ref. 45, hSti corresponds to t and hStS
i corresponds to (cid:24)t.

>
t1

>
t1

Given these expectations, the M step is straightforward: we take derivatives of (20)
with respect to the parameters, set to zero, and solve subject to the sum-to-one
constraints that ensure valid transition, emission and initial state probabilities. For
discrete Yt coded in the same way as St (i.e. Yt is coded as a D-dimensional binary
unit vector), the M step is:

t=2

(cid:8)ij / TX
hSt;iSt1;ji
P
P
P
(cid:25)i   hS1;ii
P
t=1 Yt;dhSt;ii
Edi
hSt;ii

T
t=2
T
t=2

hSt;iSt1;ji
hSt1;ji



:

T

T
t=1

(25)

(26)

(27)

(28)

(29)

(30)

(31)

(32)

(33)

The necessary expectations are computed using the forward{backward algorithm.

4.4. The forward{backward algorithm

The forward{backward algorithm is an instance of belief propagation applied to
the Bayesian network corresponding to a hidden Markov model (see Ref. 54 for a
recent treatment). The forward pass recursively computes (cid:11)t, de(cid:12)ned as the joint
probability of St and the sequence of observations Y1 to Yt

35 P (YtjSt)

P (St1; Y1:t1)P (StjSt1)

35 P (YtjSt) :

(cid:11)t1P (StjSt1)

(cid:11)t = P (St; Y1:t)

24X
24X

St1

St1

=

=

(cid:12)t = P (Yt+1:TjSt)

X

=

St+1

The backward pass computes the conditional probability of the observations Yt+1
to YT given St

P (Yt+2:TjSt+1)P (St+1jSt)P (Yt+1jSt+1)

f When learning from a data set containing multiple sequences, this quantity has to be computed
separately for each sequence. For clarity, we will describe the single sequence case only.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

22 Z. Ghahramani

X

St+1

=

(cid:12)t+1P (St+1jSt)P (Yt+1jSt+1) :

From these it is easy to compute the expectations needed for EM

P
P

hSt;ii = ti =

hSt;iSt1;ji = (cid:24)tij =

(cid:11)t;i(cid:12)t;i
j (cid:11)t;j(cid:12)t;j
(cid:11)t1;j(cid:8)ijP (YtjSt;i)(cid:12)t;i
k; (cid:11)t1;k(cid:8)kP (YtjSt;)(cid:12)t;

(34)

(35)

(36)

:

In practice, for long sequences both (cid:11)t and (cid:12)t become vanishingly small as the
recursions progress. They are therefore usually renormalized to sum to one at each
step of the recursions. This makes the computation of the relevant expectations
much more numerically well-behaved, and has the nice side-e(cid:11)ect that the sum of
the log normalizations in the forward pass is the log likelihood of the observation
sequence.

Occasionally, it is also useful to compute the single most probable state sequence.
The solution to this problem is given by the Viterbi algorithm,57 which is very
similar to the forward{backward algorithm except that some of the summations
are replaced by maximizations (see Ref. 45 for a tutorial on HMMs, especially as
applied to speech recognition).

4.5. Example 2 : Learning state-space models using EM

Using Eq. (6), the log probability of the hidden states and observations for linear-
Gaussian state-space models can be written as

TX

TX

log P (X1:T ; Y1:T ) = log P (X1) +

log P (YtjXt) +

log P (XtjXt1) :

(37)

Each of the above probability densities is Gaussian, and therefore the overall ex-
pression is a sum of quadratics. For example, using Eq. (8)

t=1

t=2

log P (YtjXt) =  1

(Yt  CXt)
>

R

1(Yt  CXt)  1

jRj + const

(38)

2

2

where R is the covariance of the observation noise vt and j (cid:1) j is the matrix

determinant.

If all the random variables were observed, then the ML parameters could be
solved for by maximizing (37). Taking derivatives of (37), we obtain a linear system
of equations. For example, the ML estimate of the matrix C is

X

! X

t

t

C

>
YtX
t

>
XtX
t

:

!1

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

23

Since the states are in fact hidden, in the M step we use expected values wherever
we do not have access to the actual observed values. Then, the M step for C is

X

! X

!1

C

YthX

>
t

i

hXtX

i

>
t

:

t

t

Similar M steps can be derived for all the other parameters by taking derivatives of
the expected log probability.13;20;52;g In general we require all terms of the kind
hXti;hXtX
i. These terms can be computed using the Kalman

i and hXtX

>
t1

>
t

smoothing algorithm.

4.6. Kalman smoothing

The Kalman smoother solves the problem of estimating the state at time t of
a linear-Gaussian state-space model given the model parameters and a sequence

of observations fY1; : : : ; Yt; : : : ; YTg. It consists of two parts: a forward recursion
which uses the observations from Y1 to Yt, known as the Kalman (cid:12)lter,33 and
a backward recursion which uses the observations from YT to Yt+1.46;h We have
already seen that in order to compute the marginal probability of a variable in a
Bayesian network one must take into account both the evidence above and below
the variable. In fact, the Kalman smoother is simply a special case of the belief
propagation algorithm we have already encountered for Bayesian networks. The
Kalman smoothing algorithm and the forward{backward algorithm are conceptually
identical, although of course the details di(cid:11)er since in one Gaussian densities are
propagated and in the other discrete distributions are propagated.

5. Limitations of HMMs and Generalizations

Linear-Gaussian state-space models and hidden Markov models provide an interest-
ing starting point for designing dynamic Bayesian networks. However, they su(cid:11)er
from important limitations when it comes to modeling real-world time series. In
the case of linear-Gaussian state-space models the limitations are advertized in the
name: in many realistic applications, both the state dynamics and the relation be-
tween states and observations can be nonlinear, and the noise can be non-Gaussian.
For hidden Markov models, the situation is more subtle. HMMs are a dynamical
extension of mixture models, and unconstrained mixture models can be used to
model any distribution in the limit of an in(cid:12)nite number of mixture components.
Furthermore, if the state transition matrix is unconstrained, any arbitrary nonlinear
dynamics can also be modeled. So where does the limitation lie?

gThe parameters of a linear-Gaussian state-space model can also be estimated using methods from
on-line recursive identi(cid:12)cation.38
hThe forward and backward recursions together are also known as the Rauch-Tung-Streibel (RTS)
smoother. Thorough treatments of Kalman (cid:12)ltering and smoothing can be found in Refs. 1 and
23.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

24 Z. Ghahramani

Consider the problem of modeling the movement of several objects in a sequence
of images. If there are M objects, each of which can occupy K positions and ori-
entations in the image, there are K M possible states of the system underlying an
image. A hidden Markov model would require KM distinct states to model this sys-
tem. This representation is not only ine(cid:14)cient but di(cid:14)cult to interpret. We would
much prefer that our \HMM" could capture the underlying state space by using
M di(cid:11)erent K-dimensional variables. More seriously, an unconstrained HMM with
KM states has of order K 2M parameters in the transition matrix. Unless the data
set captures all these possible transitions or a priori knowledge is used to constrain
the parameters, severe over-(cid:12)tting may result.

In this section, we describe three ways in which HMMs and state-space models
can be extended to overcome some of these limitations. The (cid:12)rst of these represents
the hidden state of an HMM using a set of distinct state variables. We call this
HMM with a distributed state representation, a factorial hidden Markov model.22

5.1. Extension 1: Factorial HMMs

We generalize the HMM by representing the state using a collection of discrete state
variables

St = S(1)

t

; : : : S(m)

t

; : : : ; S(M)

t

(39)

each of which can take on K (m) values. The state space of this model consists
of the cross product of these state variables. For simplicity, we will assume that
K (m) = K, for all m, although the algorithms we present can be trivially generalized
to the case of di(cid:11)ering K (m). Given that the state space of this factorial HMM
consists of all KM combinations of the S(m)
variables, placing no constraints on
the state transition structure would result in a KM (cid:2) KM transition matrix. Such
an unconstrained system is uninteresting for several reasons: it is equivalent to an
HMM with KM states, it is unlikely to discover any interesting structure in the
K state variables, as all variables are allowed to interact arbitrarily, and both the
time complexity and sample complexity of the estimation algorithm are exponential
in M .

t

We therefore focus on factorial HMMs in which the underlying state transitions
are constrained. A natural structure to consider is one in which each state variable
evolves according to its own dynamics, and is a priori uncoupled from the other
state variables:

MY

P (StjSt1) =

P (S(m)

t

jS(m)
t1 ) :

(40)

m=1

A Bayesian network representing this model is shown in Fig. 5. The transition
structure for this model can be parameterized using M distinct K (cid:2) K matrices.
As shown in Fig. 5, the observation at time step t can depend on all the state
variables at that time step in a factorial HMM. For real-valued observations, one

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

25

simple form for this dependence is linear-Gaussian, that is, the observation Yt is
a Gaussian random vector whose mean is a linear function of the state variables.
We represent the state variables as K (cid:2) 1 vectors, where each of the K discrete
(cid:26)
values corresponds to a 1 in one position and 0 elsewhere. The resulting probability
density for a D (cid:2) 1 observation vector Yt is
 1
2

(cid:27)
1(Yt  (cid:22)t)

P (YtjSt) = jRj1=2(2(cid:25))

(Yt  (cid:22)t)
>

(41)

R

where

D=2 exp
MX

t

(42)
Each W (m) matrix is a D (cid:2) K matrix whose columns are the contributions to the
means for each of the settings of S(m)

, and R is a D (cid:2) D covariance matrix.

(cid:22)t =

m=1

:

t

W (m)S(m)

One way to understand the observation model in Eqs. (41) and (42) is to consider
the marginal distribution for Yt, obtained by summing over the possible states.
There are K settings for each of the M state variables, and thus there are K M
possible mean vectors obtained by forming sums of M columns where one column
is chosen from each of the W (m) matrices. The resulting marginal density of Yt
is thus a Gaussian mixture model with KM mixture components each having a
constant covariance matrix R. This static mixture model, without inclusion of the
time index and the Markov dynamics, is a factorial parameterization of the standard
mixture of Gaussians model that has interest in its own right.18;25;59 The model we
have just presented extends the static model by allowing Markov dynamics in the
discrete state variables underlying the mixture. A model of that combines features
of the factorial HMM and factor analysis has been recently applied to an image
tracking problem with impressive results.14

S(1)
t-1

S(2)
t-1

S(3)
t-1

Yt-1

S(1)
t

S(2)
t

S(3)
t

Yt

S(1)
t+1

S(2)
t+1

S(3)
t+1

Yt+1

Fig. 5. A Bayesian network representing the conditional independence relations in a factorial
HMM with M = 3 underlying Markov chains. (We only show here a portion of the Bayesian
network around time slice t.)

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

26 Z. Ghahramani

Xt-1

S(1)
t-1

S(2)
t-1

S(3)
t-1

Yt-1

Xt

S(1)
t

S(2)
t

S(3)
t

Yt

Xt+1

S(1)
t+1

S(2)
t+1

S(3)
t+1

Yt+1

Fig. 6. Tree structured hidden Markov models.

5.2. Extension 2 : Tree structured HMMs

In factorial HMMs, the state variables at one time step are assumed to be a priori
independent given the state variables at the previous time step. This assumption
can be relaxed in many ways by introducing coupling between the state variables
in a single time step.49 One interesting way to couple the variables is to order
for 1 (cid:20) n < m. Furthermore, if all the state
them, such that S(m)
variables and the output also depend on an observable input variable, Xt, we obtain
the Bayesian network shown in Fig. 6.

depends on S(n)

t

t

1

This architecture can be interpreted as a probabilistic decision tree with Marko-
vian dynamics linking the decision variables. Consider how this model would gener-
ate data at the (cid:12)rst time step, t = 1. Given input X1, the top node S(1)
can take on
K values. This stochastically partitions X-space into K decision regions. The next
node down the hierarchy, S(2)
1 , subdivides each of these regions into K subregions,
and so on. The output Y1 is generated from the input X1 and the K-way decisions
at each of the M hidden nodes. At the next time step, a similar procedure is used
to generate data from the model, except that now each decision in the tree is de-
pendent on the decision taken at that node in the previous time step. This model
generalizes the \hierarchical mixture of experts"31 and other related decision tree
models such as CART8 and MARS15 by giving the decision Markovian dynamics.
Tree structured HMMs provide a useful starting point for modeling time series with
both temporal and spatial structure at multiple resolutions. We have explored this
generalization of factorial HMMs in Ref. 30.

5.3. Extension 3 : Switching state-space models

Both factorial HMMs and tree structured HMMs use discrete hidden state represen-
tations. To model time series with continuous but nonlinear dynamics, it is possible
to combine the real-valued hidden state of linear-Gaussian state-space models and

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

27

the discrete state of HMMs. One natural way to do this is the switching state-space
model.21

In switching state-space models, the sequence of observations Y1:T is modeled
using a hidden state space comprising M real-valued state vectors, X (m)
, and one
discrete state vector St. The discrete state, St, is a multinomial variable that can
take on M values: St 2 f1; : : : ; Mg, for reasons that will become obvious we refer

t

to it as the switch variable. The joint probability of observations and hidden states
can be factored as

P (S1:T ; X (1)

1:T ; : : : ; X (M)

TY

1:T ; Y1:T )
P (StjSt1)

"

MY

TY

#

P (X (m)

1

)

P (X (m)

t

jX (m)
t1 )

t=2

m=1

t=2

P (YtjX (1)

t

; : : : ; X (M)

t

; St)

(43)

= P (S1)

(cid:2) TY

t=1

which corresponds graphically to the conditional independencies represented in
Fig. 7. Conditioned on a setting of the switch state, St = m, the observable is
multivariate Gaussian with output equation given by state-space model m. In other
words, the probability density of the observation vector Yt is

P (YtjX (1)

t

t

; : : : ; X (M)
2 jRj 1
 D

; St = m)
 1
2

2 exp

= (2(cid:25))

(cid:26)

(Yt  C(m)X (m)

t

>
)

1(Y1  C(m)X (m)

t

R

)

(44)

(cid:27)

where D is the dimension of the observation vector, R is the observation noise co-
variance matrix, and C(m) is the output matrix for state-space model m (cf. Eq. (8)
for a single linear-Gaussian state-space model). Each real-valued state vector evolves
according to the linear-Gaussian dynamics of a state-space model with di(cid:11)ering ini-
tial state, transition matrix, and state noise [Eq. (7)]. The switch state itself evolves
according to the discrete Markov dynamics speci(cid:12)ed by initial state probabilities

P (S1) and an M (cid:2) M state transition matrix P (StjSt1).

This model can be seen as an extension of the \mixture of experts" architecture
for modular learning in neural networks.9;27;40 Each state-space model is a linear
expert with Gaussian output noise and linear-Gaussian dynamics. The switch state
\gates" the outputs of the M state-space models, and therefore plays the role of a
gating network with Markovian dynamics.9;40

6. Approximate Inference and Intractability

The problem with all the extensions of hidden Markov models and state-space
models presented in the previous section is that, given a sequence of observations,
most probabilities of interest are intractable to compute.

Consider, for example, computing the likelihood of a factorial HMM | the

marginal probability of a sequence of observations given the parameters, P (Y1:Tj(cid:18)).

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

28 Z. Ghahramani

X(1)
1

X(M)
1

S1

Y1

X(1)
2

X(M)
2

S2

Y2

X(1)
3

X(M)
3

S3

Y3

Fig. 7. Bayesian network representation for switching state-space models. St is the discrete switch
variable and X(m)

are the real-valued state vectors.

t

This is the sum over all possible hidden state sequences of the joint probability of
the sequence and the observations:

P (Y1:Tj(cid:18)) =

P (S1:T ; Y1:Tj(cid:18)) :

X

S1:T

X
X

ST

=

(cid:11)T :

ST

There are KM possible states at each time step, and therefore KMT hidden state
sequences of length T , assuming none of the transition probabilities is exactly 0. The
brute-force approach of evaluating all such sequences can be avoided by making use
of the conditional independencies represented in the Bayesian network. For example,
directly applying the forward pass of the forward{backward algorithm outlined in
Sec. 4.4, we can compute the likelihood by summing the (cid:11)s at the last time step

P (Y1:Tj(cid:18)) =

P (ST ; Y1; : : : ; YTj(cid:18))

(45)

(46)

For the factorial HMM, (cid:11)t is a vector of size equal to the full state space at time t,
i.e. it has KM elements. This results in a recursive algorithm that computes the like-
lihood using O(T K 2M ) operations. This can be further improved upon by using the
fact that the state transitions are de(cid:12)ned via M matrices of size K (cid:2) K rather than
a single KM (cid:2) KM matrix, resulting in a recursive algorithm using O(T M KM+1)
operations (see Ref. 22, Appendix B). Unfortunately, this time complexity cannot
be improved upon. Given the observation at time t, the K-valued state variables
become coupled in an M th-order interaction. It is not possible to sum over each
variable independently. Like the likelihood, computing the posterior probability of a
single state variable given the observation sequence, P (S(m)
ponential in M . Similar exponential time complexity results hold for the likelihoods
and posterior probabilities of tree structured HMMs and switching state-space
models.

jY1; : : : ; YT ), is also ex-

t

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

29

6.1. Approximation 1: Gibbs sampling

X

One approach to computing approximate marginal probabilities is to make use of
Monte Carlo integration. Since the log likelihood can be expressed as

log P (Y1:Tj(cid:18)) =

P (S1:TjY1:T ; (cid:18)) [log P (S1:T ; Y1:Tj(cid:18))  log P (S1:TjY1:T ; (cid:18))]

by sampling from the posterior distribution, P (S1:TjY1:T ; (cid:18)), the log likelihood can

S1:T

be approximated using the above expression, which is just the negative of the free
energy (16). To learn the parameters of the model, samples from the posterior are
used to evaluate the expectations required for EM. Of course, for intractable models
sampling directly from the posterior distributions is computationally prohibitive.
However, it is often easy to set up a Markov chain that will converge to samples
from the posterior. One of the simplest methods to achieve this is Gibbs sampling
(for a review of Gibbs sampling and other Markov chain Monte Carlo methods, see
Ref. 41).

For a given observation sequence Y1:T , Gibbs sampling starts with a random
setting of the hidden states S1:T . At each step of the sampling process, each state
variable is updated stochastically according to its probability distribution condi-
tioned on the setting of all the other state variables. The graphical model is again
useful here, as each node is conditionally independent of all other nodes given its
Markov blanket, de(cid:12)ned as the set of children, parents, and parents of the children
of a node. For example, to sample from a typical state variable S(m)
in a factorial
HMM we only need to examine the states of a few neighboring nodes:

t

(47)

(48)

S(m)
t

(cid:28)

(cid:24) P (S(m)jfS(n)
jfS(n)
= P (S(m)
jS(m)
/ P (S(m)
t1 )P (S(m)

: (cid:28) 6= t _ n 6= mg; Y1:T )
: n 6= mg; S(m)
t1 ; S(m)
t+1 ; Yt)
)P (YtjS(1)
jS(m)

t+1

t

t

t

; : : : ; S(m)

; : : : ; S(M)

t

t

t

t

)

(49)
where (cid:24) denotes \sampled from". Sampling once from each of the T M hidden
variables in the model results in a new sample of the hidden state of the model
and requires O(T M K) operations. The sequence of states resulting from each pass
of Gibbs sampling de(cid:12)nes a Markov chain over the state space of the model. This
Markov chain is guaranteed to converge to the posterior probabilities of the states
given the observations17 as long as none of the probabilities in the model is exactly
zero.i Thus, after some suitable time, samples from the Markov chain can be taken as
approximate samples from the posterior probabilities. The (cid:12)rst- and second-order
statistics needed to estimate hS(m)
i are collected
using the states visited and the probabilities estimated during this sampling process
and are used in the approximate E step of EM.j Monte carlo methods for learning
in dynamic Bayesian networks have been explored in Refs. 10, 11, 22 and 34.

i and hS(m)

0
t1 S(m)

i, hS(m)

0
; S(n)

t

t

t

t

iActually, the weaker assumption of ergodicity is su(cid:14)cient to ensure convergence.
jA more Bayesian treatment of the learning problem, in which the parameters are also considered
hidden random variables, can be handled by Gibbs sampling by replacing the \M step" with

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

30 Z. Ghahramani

6.2. Approximation 2 : Variational methods

Another approach to approximating a probability distribution P is to de(cid:12)ne a
parameterized distribution Q and vary its parameters so as to minimize the distance
between Q and P . In the context of the EM algorithm, we have already seen that
the log likelihood L((cid:18)) is lower bounded by the negative free energy, F(Q; (cid:18)). The
di(cid:11)erence between L and F is given by the Kullback{Leibler divergence between Q
and the posterior distribution of the hidden variables

L((cid:18))  F(Q; (cid:18)) = KL(Q(S1:Tj(cid:30))kP (S1:TjY1:T ; (cid:18)))
Q(S1:Tj(cid:30))

Q(S1:Tj(cid:30)) log

=

P (S1:TjY1:T ; (cid:18))

X

S1:T

(cid:20)

(cid:21)

(50)

(51)

where (cid:30) are the parameters of the distribution Q.

The variational approach uses a tractable Q to approximate the intractable
posterior. The tractability of computing expectations with respect to Q depends
both on its parametric form and on its conditional independence relations.k The art
is to choose a family of Qs that have an analytic form and a tractable structure |
a Bayesian network that eliminates some of the dependencies in P | but that can
approximate P adequately. Given this structure, the parameters of Q are varied
so as to obtain the tightest possible bound, which minimizes (51). We will refer
to the general strategy of using a parameterized approximating distribution as a
variational approximation and refer to the free parameters of the Q distribution as
variational parameters.

6.3. Example 1: Mean (cid:12)eld for factorial HMMs

We illustrate this approach using the simplest variational approximation to the
posterior distribution in factorial HMMs: all state variables in Q are independent
[Fig. 8(a)]:

Q(S1:Tj(cid:30)) =

Q(S(m)

t

j(cid:30)(m)

t

) :

(52)

t=1

m=1

The variational parameters, (cid:30) = f(cid:30)(m)

g, are the means of the state variables,
where, as before, a state variable S(m)
is represented as a K-dimensional vector
with a 1 in the kth position and 0 elsewhere, if the mth Markov chain is in state
k at time t. The elements of the vector (cid:30)(m)
therefore de(cid:12)ne the state occupation

t

t

t

sampling from the conditional distribution of the parameters given the other hidden variables (for
example, see Ref. 56).
kWe will see later how choosing the conditional independence relations of Q sometimes deter-
mines the optimal parametric form of Q. This is \true" variational optimization, since calculus of
variations is used to optimize over all distributions Q.

TX

MX

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

31

S(1)
t-1

S(2)
t-1

S(3)
t-1

 

S(1)
t+1

S(2)
t+1

S(3)
t+1

S(1)
t

S(2)
t

S(3)
t

(a)

S(1)
t-1

S(2)
t-1

S(3)
t-1

S(1)
t

S(2)
t

S(3)
t

(b)

S(1)
t+1

S(2)
t+1

S(3)
t+1

Fig. 8.
(a) The completely factorized variational approximation assuming that all the state vari-
ables are independent (conditional on the observation sequence). (b) A structured variational
approximation assuming that the state variables retain their Markov structure within each chain,
but are independent across chains.

probabilities of the multinomial variable S(m)

under the Q distribution

t

KY

KX

Q(S(m)

t

j(cid:30)(m)

t

) =

((cid:30)(m)

t;k )S(m)

t;k where S(m)
t;k

2 f0; 1g;

S(m)
t;k = 1 :

(53)

k=1

k=1

A completely factorized approximation of this kind is often used in statistical
physics, where it provides the basis for simple yet powerful mean (cid:12)eld approxi-
mations to statistical mechanical systems.43

To make the bound as tight as possible we vary (cid:30) separately for each observation
sequence so as to minimize the KL divergence. Taking the derivatives of (51) with
respect to (cid:30)(m)
and setting them to zero, we obtain the set of (cid:12)xed point equations
de(cid:12)ned by

t

(cid:26)

(cid:30)(m)new
t

= 

>
W (m)

1 ~Y (m)

t

R

 1
2

(cid:1)(m) + (log (cid:8)(m))(cid:30)(m)

>
t1 + (log (cid:8)(m))

(cid:30)(m)
t+1

(54)

where ~Y (m)
variables not including m

t

is the reconstruction error in Yt given the predictions from all the state

(cid:27)

~Y (m)
t

W ()(cid:30)()

t

(55)

>
(cid:1)(m) is the vector of diagonal elements of W (m)
P
operator, which maps a vector a into a vector b of the same size, with elements
expfaig
j expfajg

1W (m), and f(cid:1)g is the softmax

bi =

(56)

R

and log (cid:8)(m) denotes the element-wise logarithm of the transition matrix (cid:8)(m) (see
Appendix C in Ref. 22 for details of the derivation).

The (cid:12)rst term of (54) is the projection of the reconstruction error onto the
weights of state vector m | the more a particular setting of a state vector can
reduce this error, the larger its associated variational mean. The second term arises

(cid:17) Yt  MX

6=m

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

32 Z. Ghahramani

t S(m)

i evaluated under the
from the fact that the second-order correlation hS(m)
variational distribution is a diagonal matrix composed of the elements of (cid:30)(m)
. The
last two terms introduce dependencies forward and backward in time.l Therefore,
although the posterior distribution over the hidden variables is approximated with a
completely factorized distribution, the (cid:12)xed point equations couple the parameters
associated with each node with the parameters of its Markov blanket. In this sense,
the (cid:12)xed point equations propagate information along the same pathways as those
de(cid:12)ning the exact algorithms for probability propagation.

t

t

The following may provide an intuitive interpretation of the approximation made
by this distribution. Given a particular observation sequence, the hidden state vari-
ables for the M Markov chains at time step t are stochastically coupled. This
stochastic coupling is approximated by a system in which the hidden variables
are uncorrelated but have coupled means. The variational or \mean-(cid:12)eld" equa-
tions solve for the deterministic coupling of the means that best approximates the
stochastically coupled system.

Each hidden state vector is updated in turn using (54), with a time complexity
of O(T M K 2) per iteration. Convergence is determined by monitoring the KL di-
vergence in the variational distribution between successive time steps; in practice
convergence is very rapid [about 2 to 10 iterations of (54)]. Convergence to a global
minimum of the KL divergence is not required, and in general this procedure will
converge to a local minimum. Once the (cid:12)xed point equations have converged, the
expectations required for the E step can be obtained as a simple function of the
parameters.22

6.4. Example 2 : Structured approximation for factorial HMMs

The approximation presented in the previous section factors the posterior probabil-
ity into a product of statistically independent distributions over the state variables.
Here we present another approximation which is tractable yet preserves many of
the probabilistic dependencies in the original system. In this scheme, the poste-
rior distribution of the factorial HMM is approximated by M uncoupled HMMs as
shown in Fig. 8(b). Within each HMM, e(cid:14)cient and exact inference is implemented
via the forward{backward algorithm. Since this approximation is allowed to have
dependencies between the hidden variables it will generally be superior to the com-
pletely factorized mean-(cid:12)eld approximation presented in the previous section, that
is, the lower bound will be higher and the KL-divergence lower. The approach of
exploiting such tractable substructures was (cid:12)rst suggested in the machine learning
literature by Saul and Jordan (1996).49

We write the structured variational approximation as

MY

TY

Q(S1:Tj(cid:30)) =

1
ZQ

Q(S(m)

1

j(cid:30))

Q(S(m)

t

jS(m)
t1 ; (cid:30))

(57)

m=1

t=2

lThe (cid:12)rst term is replaced by log (cid:25)(m) for t = 1 the second term does not appear for t = T .

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

33

where ZQ is a normalization constant ensuring that Q sums to one. The parameters
of Q are (cid:30) = f(cid:25)(m); (cid:8)(m); h(m)
g | the original priors and state transition matrices
of the factorial HMM and a time-varying bias for each state variable. The prior and
transition probabilities for Q are
j(cid:30)) =

Q(S(m)

(h(m)

)S(m)

(58)

1;k

t

1;k (cid:25)(m)

k

1

k=1

KY
KY
KY

k=1

0@h(m)
0@h(m)

t;k

t;k

KX
KY

j=1

k;j S(m)
(cid:8)(m)
t1;j

t;k

1AS(m)
1AS(m)

t;k

Q(S(m)

t

jS(m)
t1 ; (cid:30)) =

=

((cid:8)(m)

k;j )S(m)
t1;j

(59)

k=1

j=1

where the last equality follows from the fact that S(m)
t1 is a vector with a 1 in one
position and 0 elsewhere. Comparing Eqs. (57){(59) to Eq. (1), we can see that the
K(cid:2)1 vector h(m)
plays the role of the probability of an observation [P (YtjSt) in (1)]
1;j P (S(m)
for each of the K settings of S(m)
1;j =
1j(cid:30)) is equivalent to having an observation at time t = 1 that under state S(m)
1;j = 1
has probability h(m)
1;j .

1;j = 1j(cid:30)) = h(m)

. For example, Q(S(m)

t

t

Intuitively, this approximation uncouples the M Markov chains and attaches to
each state variable a distinct (cid:12)ctitious observation. The probability of this (cid:12)ctitious
observation can be varied so as to minimize the KL divergence between Q and P .
Applying the same arguments as before, we obtain a set of (cid:12)xed point equations

for h(m)

t

h(m)new
t

(cid:26)
that minimize KL(QkP ):
(cid:17) Yt  MX

>
W (m)

= exp

~Y (m)
t

6=m

(cid:27)

1 ~Y (m)

t

 1
2

(cid:1)(m)

R

(60)

W ()hS()

t

i :

(61)

where (cid:1)(m) is de(cid:12)ned as before, and where we rede(cid:12)ne the residual error to be

t

The parameter h(m)
obtained from these (cid:12)xed point equations is the observation
probability associated with state variable S(m)
in hidden Markov model m. Using
these probabilities, the forward{backward algorithm is used to compute a new set
of expectations for hS(m)
i, which are fed back into (60) and (61). The forward{
backward algorithm is therefore used as a subroutine in the minimization of the
KL divergence.

t

t

Notice the similarity between Eqs. (60) and (61) and Eqs. (54) and (55) for the
completely factorized approximation. In the completely factorized approximation,
since hS(m)
, the (cid:12)xed point equations can be written explicitly in terms

i = (cid:30)(m)

t

t

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

34 Z. Ghahramani

t

t

i on h(m)

of the variational parameters. In the structured approximation, the dependence of
hS(m)
is computed via the forward{backward algorithm. Also, the (cid:12)xed
point Eq. (60) do not contain terms involving the prior, (cid:25)(m), or transition matrix,
(cid:8)(m). These terms are handled exactly by our choice of approximation.

The other intractable dynamic Bayesian networks we have presented are also
amenable to structured variational approximations. In the case of tree structured
HMMs there are two natural choices for the substructures to be retained in the
approximation. One choice is to remove the arcs within a time step and retain the
temporal dependencies, resulting in the Bayesian network shown in Fig. 8(b). The
other choice is to retain the arcs within a time step and eliminate the arcs between
consecutive time steps. Both of these approximations, along with an approximation
based on the Viterbi algorithm are pursued in Ref. 30.

For switching state-space models, the natural approximation is to make the M
state-space models (SSMs) and the discrete Markov process controlling the switch
variable stochastically independent. Again, the variational approximation couples
all the SSMs and the switch variable deterministically, but this coupling can be
computed tractably using Kalman smoothing on each state-space model separately
and the forward{backward algorithm on the Markov switching process. The vari-
ational parameters are the real-valued \responsibilities" of each state-space model
for each observation in the sequence. To determine the best variational parameters
we start from some responsibilities and compute the posterior probability of the
state in each SSM using Kalman smoothing, with the data weighted by the respon-
sibilities. A weighting of 1 corresponds to applying the normal Kalman smoothing
equations, whereas a weighting of 0 corresponds to assuming that the data was not
observed at all; intermediate weighting are implemented by dividing the R matrix
in (38) by the responsibility. We then recompute responsibilities by running the
forward{backward algorithm on the switch process using the prediction error of
each SSM. Iterating this procedure until the responsibilities converge decreases the
KL-divergence. Details of this structured variational approximation for switching
state-space models and experimental results are presented in Ref. 21.

7. Bayesian HMMs

We now turn to two very important issues in the learning of HMMs and other
graphical models: over(cid:12)tting and model selection. Over(cid:12)tting refers to the scenario
where the model (cid:12)ts the training set very well but generalizes poorly to a test set
chosen from the same data distribution. Over(cid:12)tting is most prevalent when the
training set is small relative to the complexity (i.e. number of free parameters)
of the model. There is nothing in the maximum likelihood (cid:12)tting procedure itself
to avoid it. Model selection, or learning model structure, is the closely related
problem of picking a particular structure amongst several alternatives (or learning
a distribution over these alternatives). In the case of HMMs the \model structure"
would include everything from the number of hidden states to the form of the

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

35

state transition matrix and output probabilities. Model selection would also include
whether to opt for a regular HMM or the more complex factorial HMM, for example.
To learn model structure it is necessary to compare models of di(cid:11)erent complexity
and again, there is nothing in ML parameter (cid:12)tting that does this automatically.
There are three main ways to deal with the over(cid:12)tting and model selection
regularization, and Bayesian integration. Cross-
problems: cross-validation,
validation repeatedly splits the training data into two sets: a new training set and
a validation set. This provides an estimate of the true generalization error but can
become computationally prohibitive if more than a few model structure parameters
have to be determined.

Regularization augments the likelihood objective function with a penalty term
that favors simpler models over more complex models. For function approximation
problems this regularizer is often of the form of a smoothness penalty on the function
classes. In the case of neural network models the regularizer is usually expressed
as some sort of weight decay term. While there are many ad hoc ways of picking
regularizers, in the context of probabilistic modeling it is often illuminating to view
regularizers are expressing a prior over the parameters, and the regularized ML
(cid:12)tting procedure as (cid:12)nding maximum a posteriori (MAP) parameters under such a
prior. Thus the choice of regularizer can be assessed subjectively by asking whether
the implicit prior over parameters \makes sense" to the modeler.

For HMMs with discrete outputs, a natural choice of prior over the parameters
is given by the Dirichlet distribution. There are two main reasons for this.m First,
the Dirichlet distribution has the mathematically convenient property of being con-
jugate to the multinomial distribution. A family of priors is said to be conjugate
to a family of likelihoods if the posterior obtained by multiplying the prior by the
likelihood is in the same family as the prior. For example, since the likelihood of
the initial state given the parameter vector (cid:25) is multinomial [cf. Eq. (23)]

if the prior probability of (cid:25) is Dirichlet,

KY
P (S1j(cid:25)) =
KY

i=1

P ((cid:25)) =

(cid:25)S1i
i

(cid:25)ui1

i

1
Z

i=1

KY

i=1

with hyperparameter vector u = [u1; : : : ; uK] and normalization constant Z, then
the posterior is also Dirichlet

P ((cid:25)jS1) =

1
0
Z

(cid:25)ui+S1i1

i

:

Similar Dirichlet priors can be set up for columns of the transition matrix (cid:8) and
emission matrix E.

mOther, more theoretically motivated reasons are provided in Ref. 16.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

36 Z. Ghahramani

Second the Dirichlet distribution has the desirable property that its hyper-
parameters can be interpreted as hypothetical counts of observations. In the above

example, if ui = 2 and uj = 1 for j 6= i, the MAP estimate of (cid:25) is identical to an

ML estimate of (cid:25) with a training set augmented with one additional observation
of the initial state being in state i. This makes it possible to implement MAP
estimation with Dirichlet priors as a minor variant of the Baum{Welch procedure.
It also gives some theoretical justi(cid:12)cation for the seemingly ad hoc but very common
regularization method for HMMs which just adds a small positive number to all
elements of the parameter vector.

As outlined in the beginning of Sec. 4, a Bayesian approach to learning treats
all unknown quantities as random variables, assigns priors to these quantities, and
infers posterior probabilities having observed the data. In the case of HMMs, these
unknown quantities comprise the structure of the HMM (e.g. number of states), the
parameters, and the hidden states. Unlike ML and MAP, which (cid:12)nd point estimates
of the parameters, we can now compare between model structures, but we need to
integrate over both the parameters and the hidden states. We call this approach
Bayesian integration.

There are several methods for approximating the required integrals, which for
HMMs and their extensions are intractable. We briey mention four of these meth-
ods. First let us make clear which integral we are referring to. To compare models it
is necessary to compute the posterior probability of a model, which is proportional
to the product of the prior and the marginal likelihood, also known as the evidence
[cf. Eq. (10)]

(cid:20)Z

(cid:21)

P (MjD) / P (M)

P (Dj(cid:18);M)P ((cid:18)jM)d(cid:18)

:

The evidence, bracketed here, is a high-dimensional, often multimodal, intractable
integral.

Monte Carlo methods approximate the integral by taking samples from regions
of high probability. This can itself be hard, but can be made easier by setting up a
Markov chain to converge to the correct equilibrium distribution.47

Laplace approximations invoke the central limit theorem, which for well-behaved
priors and data asserts that the parameter posterior will converge in the limit
of large number of training samples to a Gaussian around the MAP estimate of
the parameters.n To estimate the evidence using the Laplace approximation, MAP
parameters are found in the usual optimization routines and then the curvature
(Hessian) of the log likelihood is computed at the MAP estimate. The evidence
is approximated by evaluating the ratio P ((cid:18);D)=P ((cid:18)jD) at the MAP estimate of
(cid:18), using the Gaussian approximation in the denominator. The Laplace approxima-
tion su(cid:11)ers from several disadvantages; here we mention two. First, computing the

nIn fact, this is never the case for unconstrained HMMs which su(cid:11)er from an identi(cid:12)ability prob-
lem, i.e. the identity of the states can be permuted with no e(cid:11)ect on the likelihood. Because of
this, the posterior for HMMs converges to a mixture of Gaussians.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

37

Hessian matrix for the parameters is usually computationally costly. Second, the
Gaussian approximation is not very good for models with parameters which are
positive and sum to one, especially when there are many parameters relative to the
size of the data set. To our knowledge the Laplace approximation has not been used
for HMMs.

Stolcke and Omohundro55 presented an ingenious method for approximating
the Bayesian integrals for HMMs. If the states of the HMM were observed rather
than hidden and if the parameter priors are Dirichlet, the parameter posteriors also
become Dirichlet and the evidence integral factors into a product of easy Dirich-
let integrals. So the intractability of the evidence integral for HMMs stems from
the fact that both the states and parameters are hidden. Stolcke and Omohundro
used a Viterbi-like algorithm to determine a single most likely sequence of hidden
states, and treated this sequence as if it had been observed. They could then do the
evidence integrals easily. By iterating between these two steps they incrementally
searched over model structures, merging or splitting states based on comparisons of
this (approximate) evidence. Their approach, which trades o(cid:11) integrating over hid-
den variables for integrating over parameters, attained impressive results recovering
some simple (cid:12)nite state grammars.

Z

The fourth approach to approximate Bayesian integration is known both as
ensemble learning and the variational Bayesian method. The basic idea is to si-
multaneously approximate the distribution over both hidden states and parameters
with a simpler distribution, usually by assuming the hidden states and parameters
are independent. More speci(cid:12)cally, the evidence can be lower bounded by applying
Jensens inequality twice
Z
log P (DjM) = log
Z
Z

log P (Dj(cid:18);M) + log

d(cid:18) P (D; (cid:18)jM)

P (D; (cid:18)jM)

P ((cid:18)jM)
Q((cid:18))
P (S;Dj(cid:18);M)

(cid:20)
"X

=

d(cid:18) Q((cid:18))

d(cid:18) Q((cid:18)) log

#

Q((cid:18))

(cid:21)

(cid:21)

(62)

(63)

(64)

(65)

Q(S) log

+ log

Q(S)

P ((cid:18)jM)
Q((cid:18))

d(cid:18) Q((cid:18))

(cid:21)
(cid:17) F(Q((cid:18)); Q(S)) :

S

(66)
The variational Bayesian approach iteratively maximizes F as a functional of the
two free distributions, Q(S) and Q((cid:18)). From (65), we can see that this maximization
is equivalent to minimizing the KL divergence between Q(S)Q((cid:18)) and the joint
posterior over hidden states and parameters P (S; (cid:18)jD;M).

This approach was (cid:12)rst proposed for one-hidden layer neural networks (which
have no hidden state) by Hinton and van Camp26 using the restriction that Q((cid:18)) is
Gaussian.26 It has since been applied to various other models with hidden states and

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

38 Z. Ghahramani

no restrictions on Q((cid:18)) and Q(S) other than the assumption that they factorize in
some way.2;7;19;58 With only these factorization assumptions, free-form optimization
with respect to the distributions Q((cid:18)) and Q(S) is done using calculus of variations,
and often results in a modi(cid:12)ed EM-like algorithm.

= expfR

MacKay39 (cid:12)rst presented a variational Bayesian approach to learning in HMMs.
By assuming that the parameter prior was Dirichlet and approximating the poste-
rior to have independent parameters and hidden states, he showed that the optimal
Q((cid:18)) was a Dirichlet distribution. Furthermore, he showed that the optimal Q(S)
could be obtained by applying the forward{backward algorithm to an HMM with
d(cid:18)Q((cid:18)) log (cid:18)g, which can be evaluated for
pseudoparameters given by (cid:18)
Dirichlet distributions. Thus the whole variational Bayesian algorithm can be im-
plemented as a simple modi(cid:12)cation of the Baum{Welch algorithm. The variational
Bayesian method contains as special cases both the MAP approach and a simple
form of the Stolcke and Omohundro approach. While very promising, especially
given that it has been used successfully for nontrivial model structure learning
in other models,19 its potential has not been fully explored for HMMs and their
extensions.

(cid:3)

8. Conclusion

In this paper we have reviewed hidden Markov models in the context of recent ad-
vances in the understanding of Bayesian networks. We have shown how HMMs
are a kind of Bayesian network, and as such, the algorithms for learning and
inference in HMMs can be derived from more general algorithms for Bayesian net-
works. It is possible to invent many generalizations of the HMM | such as facto-
rial HMMs, tree structured HMMs, and switching state-space models | which, by
using richer hidden representations, can model more interesting temporal relation-
ships than HMMs. However having richer hidden state representations invariably
leads to computational intractability in the algorithms for inferring the hidden state
from observations. Monte Carlo methods, such as Gibbs sampling, and variational
methods are two ways of handling this intractability.

Finally, we discussed avoiding over(cid:12)tting and learning the model structure. We
presented several approaches, including one which makes a variational approxima-
tion to full Bayesian integration.

Acknowledgments

The author would like to thank Geo(cid:11)rey E. Hinton, Michael I. Jordan, David J.
C. MacKay and Lawrence K. Saul who were collaborators on some of the work
reviewed in this paper.

February 7, 2001 10:35 WSPC/115-IJPRAI

00083

An Introduction to Hidden Markov Models and Bayesian Networks

39

