Abstract

The Indian buffet process (IBP) is a Bayesian
nonparametric distribution whereby objects are
modelled using an unbounded number of latent
features. In this paper we derive a stick-breaking
representation for the IBP. Based on this new rep-
resentation, we develop slice samplers for the
IBP that are efcient, easy to implement and
are more generally applicable than the currently
available Gibbs sampler. This representation,
along with the work of Thibaux and Jordan [17],
also illuminates interesting theoretical connec-
tions between the IBP, Chinese restaurant pro-
cesses, Beta processes and Dirichlet processes.

1 INTRODUCTION

The Indian Buffet Process (IBP) is a distribution over bi-
nary matrices consisting of N > 0 rows and an unbounded
number of columns [6]. These binary matrices can be inter-
preted as follows: each row corresponds to an object, each
column to a feature, and a 1 in entry (i, k) indicates object
i has feature k. For example, objects can be movies like
Terminator 2, Shrek and Shanghai Knights, while
features can be action, comedy, stars Jackie Chan,
and the matrix can be [101; 010; 110] in Matlab notation.

Like the Chinese Restaurant Process (CRP) [1], the IBP
provides a tool for dening nonparametric Bayesian mod-
els with latent variables. However, unlike the CRP, in
which each object belongs to one and only one of innitely
many latent classes, the IBP allows each object to possess
potentially any combination of innitely many latent fea-
tures. This added exibility has resulted in a great deal of
interest in the IBP, and the development of a range of inter-
esting applications. These applications include models for
choice behaviour [5], protein-protein interactions [2], the
structure of causal graphs [19], dyadic data for collabora-
tive ltering applications [10], and human similarity judg-
ments [11].

In this paper, we derive a new, stick-breaking represen-
tation for the IBP, a development which is analogous
to Sethuramans seminal stick-breaking representation for
CRPs [15]. In this representation, as we will see in Sec-
tion 3, the probability of each feature is represented explic-
itly by a stick of length between 0 and 1. Sethuramans
representation paved the way for both novel samplers for
and generalizations of CRPs [7]. Similarly, we show how
our novel stick-breaking representation of the IBP can be
used to develop new slice samplers for IBPs that are ef-
cient, easy to implement and have better applicability to
non-conjugate models (Sections 4, 5.2, 6). This new repre-
sentation also suggests generalizations of the IBP (such as
a Pitman-Yor variant, in Section 3.2). Moreover, although
our stick-breaking representation of the IBP was derived
from a very different model than the CRP, we demonstrate
a surprising duality between the sticks in these two repre-
sentations which suggests deeper connections between the
two models (Section 3.2). The theoretical developments we
describe here, which show a stick-breaking representation
which is to the IBP what Sethuramans construction is to
the CRP, along with the recent work of Thibaux and Jordan
[17], showing that a particular subclass of Beta processes
is to the IBP as the Dirichlet process is to the CRP, rmly
establish the IBP in relation to the well-known classes of
Bayesian nonparametric models.

2 INDIAN BUFFET PROCESSES

The IBP is dened as the limit of a corresponding distri-
bution over matrices with K columns, as the number of
columns K  . Let Z be a random binary N  K ma-
trix, and denote entry (i, k) in Z by zik. For each feature k
let k be the prior probability that feature k is present in an
object. We place a Beta( 
K , 1) prior on k, with  being
the strength parameter of the IBP. The full model is:

k  Beta( 

K , 1)

zik|k  Bernoulli(k)

indepedently k
indepedently i, k

(1a)
(1b)

Let us now consider integrating out the ks and taking the

limit of K   to obtain the IBP. For the rst object,
the chance of it having each particular feature k is inde-
K once k is integrated out, thus the distribu-
pendently 
tion over the number of features it has is Binomial( 
K , K).
As K  , this approaches Poisson(). For subse-
quent objects i = 2, . . . , N, the probability of it also
having a feature k already belonging to a previous object
is
is the number of objects prior to i with feature k. Re-
peating the argument for the rst object, object i will
also have Poisson( 
i ) new features not belonging to pre-
vious objects. Note that even though the total number of
available features is unbounded, the actual number K + of
used features is always nite (and in fact is distributed as

i where m<i k = Pj<i zjk > 0


K +m<i k
K +1+i1  m<i k


Poisson(PN

i=1

1
i )).

The above generative process can be understood using the
metaphor of an Indian buffet restaurant. Customers (ob-
jects) come into the restaurant one at a time, and can sample
an innite number of dishes (features) at the buffet counter.
Each customer will try each dish that previous customers
have tried with probabilities proportional to how popular
each dish is; in addition the customer will try a number of
new dishes that others have not tried before.

To complete the model, let k be parameters associated
with feature k and xi be an observation associated with ob-
ject i. Let

k  H
xi  F (zi,:, :)

independently k
independently i

(2a)
(2b)

where H is the prior over parameters, F (zi,:, :) is the data
k=1 correspond-
distribution given the features zi,: = {zik}
ing to object i and feature parameters : = {k}
k=1. We
assume that F (zi,:, :) depends only on the parameters of
the present features.

2.1 GIBBS SAMPLER

The above generative process for the IBP can be used di-
rectly in a Gibbs sampler for posterior inference of Z and 
given data x = {xi} [6]. The representation consists of the
number K + of used (active) features, the matrix Z1:N,1:K+
of occurrences among the K + active features, and their pa-
rameters 1:K+. The superscript + denotes active features.
The sampler iterates through i = 1, . . . , N, for each object
i it updates the feature occurrences for the currently used
features, then considers adding new features to model the
data xi.

For the already used features k = 1, . . . , K +, the condi-
tional probability of zik = 1 given other variables is just

p(zik = 1|rest)  mi k

N f (xi|zi,k, zik = 1, 1:K+)

(3)

where mi k = Pj6=i zjk. The fraction is the conditional

prior of zik = 1, obtained by using exchangeability among

the customers and taking customer i to be the last customer
to enter the restaurant; the second term f (|) is the data
likelihood of xi if zik = 1. It is possible to integrate 1:K+
out from the likelihood term if H is conjugate to F . In fact
it is important for H to be conjugate to F when we consider
the probabilities of new features being introduced, because
all possible parameters for these new features have to be
taken into account.
If Li is the number of new features
introduced, we have

N

N )Li e 
p(Li|rest)  ( 
Z f (xi|zi,1:K+ , z

Li!



i,1:Li = 1, 1:K+, 

1:Li) dh(

1:Li)

(4)

i,1:Li

are occurrences for the new features and
where z
are their parameters, the superscript  denoting cur-

1:Li
rently unused (inactive) features. The fraction comes
from the probability of introducing Li new features under
N ) while the second term is the data likelihood,
Poisson( 
with the parameters 
integrated out with respect to the
prior density h().

1:Li

The need to integrate out the parameters for new features
is similar to the need to integrate out parameters for new
clusters in the Dirichlet process (DP) mixture model case
(see [13]). To perform this integration efciently, conju-
gacy is important, but the requirement for conjugacy limits
the applicability of the IBP in more elaborate settings. It is
possible to devise samplers in the non-conjugate case anal-
ogous to those developed for DP mixture models [10, 5].
In the next section we develop a different representation of
the IBP in terms of a stick-breaking construction, which
leads us to an easy to implement slice sampler for the non-
conjugate case.

3 STICK BREAKING CONSTRUCTION

In this section, we describe an alternative representation of
the IBP where the feature probabilities are not integrated
out, and a specic ordering is imposed on the features.
We call this the stick-breaking construction for the IBP.
We will see that the new construction bears strong rela-
tionships with the standard stick-breaking construction for
CRPs, paving the way to novel generalizations of and in-
ference techniques for the IBP.

3.1 DERIVATION

Let (1) > (2) > . . . > (K) be a decreasing ordering
of 1:K = {1, . . . , K}, where each l is Beta( 
K , 1).
We will show that in the limit K   the (k)s obey the
following law, which we shall refer to as the stick-breaking
construction for the IBP,

(k)

i.i.d.
 Beta(, 1) (k) = (k)(k1) =

k

Yl=1

(l)

(5)

We start by considering (1). For nite K it is

(1) = max

l=1,...,K

l

where each l is Beta( 

K , 1) and has density:

p(l) = 


K 1
K 
l

I(0  l  1)

(6)

(7)

where I(A) is the indicator function for a condition (mea-
surable set) A: I(A) = 1 if A is true, and 0 otherwise. The
cumulative distribution function (cdf) for l is then:

F (l) = Z l



= 
K
l



K t 

K 1I(0  t  1) dt

I(0  l  1) + I(1 < l)

(8)

Since the ls are independent, the cdf of (1) is just the
product of the cdfs of each l, so

F ((1)) = (cid:16)


K
(1)

I(0  (1)  1) + I(1 < (1) < )(cid:17)K

= 
(1)

I(0  (1)  1) + I(1 < (1))

(9)

Differentiating, we see that the density of (1) is

p((1)) = 1
(1)

I(0  (1)  1)

(10)

and therefore (1)  Beta(, 1).
We now derive the densities for subsequent (k)s. For
each k  1 let lk be such that lk = (k) and let Lk =
{1, . . . , K}\{l1, . . . , lk}. Since (1:k) = {(1), . . . , (k)}
are the k largest values among 1:K, we have

l  min
k0k

(k0) = (k)

(11)

for each l  Lk. Restricting the range of l to [0, (k)], the
cdf becomes

F (l|(1:k)) = R l
R (k)

0

0

=

 

(k) 
K
K
l



K t 
K t 

K 1 dt
K 1 dt



I(0  l  (k)) + I((k) < l)

(12)

Now (k+1) = maxlLk l with each l independent given
(1:k). The cdf of (k+1) is again the product of the cdfs of
l over l  Lk,

F ((k+1)|(1:k))

(13)

K 

=

 Kk
(k)


(k) 

(k+1)

Kk



I(0  (k+1)  (k)) + I((k) < (k+1))

K 
(k+1)
I(0  (k+1)  (k)) + I((k) < (k+1))

as K  . Differentiating, the density of (k+1) is,

p((k+1)|(1:k))

=

(k) 1

(k+1)

I(0  (k+1)  (k))

(14)

Notice that the (k)s have a Markov structure, with (k+1)
conditionally independent of (1:k1) given (k).
Finally, instead of working with the variables (k) directly,
we introduce a new set of variables (k) = (k)
with
(k1)
range [0, 1]. Using a change of variables, the density of
(k) is derived to be,

p((k)|(1:k1)) = 1
(k)

I(0  (k)  1)

(15)

Thus (k) are independent from (1:k1) and are simply
Beta(, 1) distributed. Expanding (k) = (k)(k1) =

Qk
l=1 (l), we obtain the stick-breaking construction (5).

The construction (5) can be understood metaphorically as
follows. We start with a stick of length 1. At iteration
k = 1, 2, . . ., we break off a piece at a point (k) relative
to the current length of the stick. We record the length (k)
of the stick we just broke off, and recurse on this piece,
discarding the other piece of stick.

3.2 RELATION TO DP

In iteration k of the construction (5), after breaking the stick
in two we always recurse on the stick whose length we de-
note by (k). Let (k) be the length of the other discarded
stick. We have,

(k) = (1  (k))(k1) = (1  (k))

Yl=1
Making a change of variables v(k) = 1  (k),

k1

(l)

(16)

v(k)

i.i.d.
 Beta(1, )

(k) = v(k)

k1

Yl=1

(1  v(l))

(17)

thus (1:) are the resulting stick lengths in a standard
stick-breaking construction for DPs [15, 7].

In both constructions the nal weights of interest are the
lengths of the sticks.
In DPs, the weights (k) are the
lengths of sticks discarded, while in IBPs, the weights (k)
are the lengths of sticks we have left. This difference leads
to the different properties of the weights: for DPs, the stick
lengths sum to a length of 1 and are not decreasing, while in
IBPs the stick lengths need not sum to 1 but are decreasing.
Both stick-breaking constructions are shown in Figure 1.
In both the weights decrease exponentially quickly in ex-
pectation.

The direct correspondence to stick-breaking in DPs implies
that a range of techniques for and extensions to the DP can
be adapted for the IBP. For example, we can generalize the
IBP by replacing the Beta(, 1) distribution on (k)s with
other distributions. One possibility is a Pitman-Yor [14]
extension of the IBP, dened as

(k)  Beta( + kd, 1  d)

(k) =

k

Yl=1

(l)

(18)

(1)
(2)
(3)
(4)
(5)
(6)

(4)

(5)

(6)

(2)

(3)


(1)

Figure 1: Stick-breaking construction for the DP and IBP.
The black stick at top has length 1. At each iteration the
vertical black line represents the break point. The brown
dotted stick on the right is the weight obtained for the DP,
while the blue stick on the left is the weight obtained for
the IBP.

where d  [0, 1) and  > d. The Pitman-Yor IBP
weights decrease in expectation as a O(k 1
d ) power-law,
and this may be a better t for some naturally occurring
data which have a larger number of features with signi-
cant but small weights [4].

An example technique for the DP which we could adapt to
the IBP is to truncate the stick-breaking construction after a
certain number of break points and to perform inference in
the reduced space. [7] gave a bound for the error introduced
by the truncation in the DP case which can be used here as
well. Let K  be the truncation level. We set (k) = 0 for
each k > K , while the joint density of (1:K ) is,

p((1:K )) =

K 

Yk=1

p((k)|(k1))

(19)

=K 



(K )

K 

Yk=1

1
(k)

I(0  (K )      (1)  1)

The conditional distribution of Z given (1:K ) is simply1

p(Z|(1:K )) =

N

K 

Yi=1

Yk=1

zik
(k)(1  (k))1zik

(20)

with zik = 0 for k > K . Gibbs sampling in this represen-
tation is straightforward, the only point to note being that
adaptive rejection sampling (ARS) [3] should be used to
sample each (k) given other variables (see next section).

4 SLICE SAMPLER

Gibbs sampling in the truncated stick-breaking construc-
tion is simple to implement, however the predetermined
truncation level seems to be an arbitrary and unneces-
sary approximation.
In this section, we propose a non-
approximate scheme based on slice sampling, which can be

1Note that we are making a slight abuse of notation by using
Z both to denote the original IBP matrix with arbitrarily ordered
columns, and the equivalent matrix with the columns reordered to
decreasing s. Similarly for the feature parameters s.

seen as adaptively choosing the truncation level at each it-
eration. Slice sampling is an auxiliary variable method that
samples from a distribution by sampling uniformly from
the region under its density function [12]. This turns the
problem of sampling from an arbitrary distribution to sam-
pling from uniform distributions. Slice sampling has been
successfully applied to DP mixture models [8], and our ap-
plication to the IBP follows a similar thread.

In detail, we introduce an auxiliary slice variable,

s|Z, (1:)  Uniform[0, ]

(21)

where  is a function of (1:) and Z, and is chosen to be
the length of the stick for the last active feature,

 = min(cid:26)1, min

k: i,zik=1

(k)(cid:27) .

(22)

The joint distribution of Z and the auxiliary variable s is

p(s, (1:), Z) = p(Z, (1:)) p(s|Z, (1:))

(23)

where p(s|Z, (1:)) = 1
I(0  s  ). Clearly, integrat-

ing out s preserves the original distribution over (1:) and
Z, while conditioned on Z and (1:), s is simply drawn
from (21). Given s, the distribution of Z becomes:

p(Z|x, s, (1:))  p(Z|x, (1:)) 1


I(0  s  ) (24)

which forces all columns k of Z for which (k) < s to be
zero. Let K  be the maximal feature index with (K ) > s.
Thus zik = 0 for all k > K , and we need only consider
updating those features k  K . Notice that K  serves
as a truncation level insofar as it limits the computational
costs to a nite amount without approximation.

Let K  be an index such that all active features have in-
dex k < K  (note that K  itself would be an inactive fea-
ture). The computational representation for the slice sam-
pler consists of the slice variables and the rst K  features:
hs, K , K , Z1:N,1:K , (1:K ), 1:K i. The slice sampler
proceeds by updating all variables in turn.

Update s. The slice variable is drawn from (21). If the new
value of s makes K   K  (equivalently, s < (K )), then
we need to pad our representation with inactive features
until K  < K . In the appendix we show that the stick
lengths (k) for new features k can be drawn iteratively
from the following distribution:

p((k)|(k1), z:,>k = 0)  exp(PN

1
(k) (1  (k))N I(0  (k)  (k1))

i=1

1
i (1  (k))i)
(25)

We used ARS to draw samples from (25) since it is log-
concave in log (k). The columns for these new features
are initialized to z:,k = 0 and their parameters drawn from
their prior k  H.

Update Z. Given s, we only need to update zik for each i
and k  K . The conditional probabilities are:

p(zik = 1|rest) 

(k)
 f (xi|zi,k, zik = 1, 1:K )

(26)

The  denominator is needed when different values of zik
induces different values of  by changing the index of the
last active feature.

Update k. For each k = 1, . . . , K , the conditional prob-
ability of k is:

p(k|rest)  h(k)

N

Yi=1

f (xi|zi,1:K  , k, k)

(27)

Update (k). For k = 1, . . . , K   1, combining (19) and
(20), the conditional probability of (k) is

p((k)|rest) mk1

(k)

(1  (k))N mk
I((k+1)  (k)  (k1))

(28)

where mk = PN

i=1 zik. For k = K , in addition to tak-
ing into account the probability of features K  is inactive,
we also have to take into account the probability that all
columns of Z beyond K  are inactive as well. The ap-
pendix shows that the resulting conditional probability of
(K ) is given by (25) with k = K . We draw from both
(28) and (25) using ARS.

5 CHANGE OF REPRESENTATIONS

Both the stick-breaking construction and the standard IBP
representation are different representations of the same
nonparametric object. In this section we consider updates
which change from one representation to the other. More
precisely, given a posterior sample in the stick-breaking
representation we wish to construct a posterior sample in
the IBP representation and vice versa. Such changes of
representation allow us to make use of efcient MCMC
moves in both representations, e.g. interlacing split-merge
moves in IBP representation [10] with the slice sampler
in stick-breaking representation. Furthermore, since both
stick lengths and the ordering of features are integrated out
in the IBP representation, we can efciently update both
in the stick-breaking representation by changing to the IBP
representation and back.

We appeal to the innite limit formulation of both repre-
sentations to derive the appropriate procedures. In particu-
lar, we note that the IBP is obtained by ignoring the order-
ing on features and integrating out the weights (1:K) in an
arbitrarily large nite model, while the stick-breaking con-
struction is obtained by enforcing an ordering with decreas-
ing weights. Thus, given a sample in either representations,
our approach is to construct a corresponding sample in an

arbitrarily large nite model, then to either ignore the or-
dering and weights (to get IBP) or to enforce the decreasing
weight ordering (to get stick-breaking).

Changing from stick-breaking to the standard IBP repre-
sentation is easy. We simply drop the stick lengths as
well as the inactive features, leaving us with the K + active
feature columns along with the corresponding parameters.
To change from IBP back to the stick-breaking represen-
tation, we have to draw both the stick lengths and order
the features in decreasing stick lengths, introducing inac-
tive features into the representation if required. We may
index the K + active features in the IBP representation as
k = 1, . . . , K + in the nite model. Let Z1:N,1:K+ be the
feature occurrence matrix. Suppose that we have K (cid:29) K+
features in the nite model. For the active features, the pos-
terior for the lengths are simply

+
k |z:,k  Beta(


K

+ mk, 1 + N  mk)

 Beta(mk, 1 + N  mk)

(29)

(1) > 

as K  . For the rest of the K  K + inactive fea-
tures, it is sufcient to consider only those inactive features
with stick lengths larger than mink +
k . Thus we consider
a decreasing ordering 
(2) >    on these lengths.
(25) gives their densities in the K   limit and ARS
k . Fi-
can be used to draw 
nally, the stick-breaking representation is obtained by re-
ordering +
(1:K ) in decreasing order, with the fea-
ture columns and parameters taking on the same ordering
(columns and parameters corresponding to inactive features
are set to 0 and drawn from their prior respectively), giving
us K + + K  features in the stick-breaking representation.

(K ) < mink +

(1:K ) until 

1:K+ , 

5.1 SEMI-ORDERED STICK-BREAKING

In deriving the change of representations from the IBP to
the stick-breaking representation, we made use of an in-
termediate representation whereby the active features are
unordered, while the inactive ones have an ordering of de-
creasing stick lengths. It is in fact possible to directly work
with this representation, which we shall call semi-ordered
stick-breaking.

The representation consists of K + active and unordered
features, as well as an ordered sequence of inactive fea-
tures. The stick lengths for the active features have condi-
tional distributions:

+
k |z:,k  Beta(m,k, 1 + N  m,k)

(30)

while for the inactive features we have a Markov property:

p(

(k)|
(

(k1), z:,>k = 0)  exp(PN
(k))1(1  
(k))N I(0  

1
i (1  
(k1))

i=1
(k)  

(k))i))
(31)

5.2 SLICE SAMPLER

To use the semi-ordered stick-breaking construction as a
representation for inference, we can again use the slice
sampler to adaptively truncate the representation for inac-
tive features. This gives an inference scheme which works
in the non-conjugate case, is not approximate, has an adap-
tive truncation level, but without the restrictive ordering
constraint of the stick-breaking construnction. The repre-
sentation hs, K +, Z1:N,1:K+, +
1:K+, 1:K+i consists only
of the K + active features and the slice variable s,

s  Uniform[0, ]  = min(cid:26)1, min

1kK+

k(cid:27) (32)
+

Once a slice value is drawn, we generate K  inactive
features, with their stick lengths drawn from (31) until
(K +1) < s. The associated feature columns Z 

1:N,1:K 
are initialized to 0 and the parameters 
1:K  drawn from
their prior. Sampling for the feature entries and parameters
for both the active and just generated inactive features pro-
ceed as before. Afterwards, we drop from the list of active
features any that became inactive, while we add to the list
any inactive feature that became active. Finally, the stick
lengths for the new list of active features are drawn from
their conditionals (30).

6 EXPERIMENT

In this section we compare the mixing performance of the
two proposed slice samplers against Gibbs sampling. We
chose a simple synthetic dataset so that we can be assured
of convergence to the true posterior and that mixing times
can be estimated reliably in a reasonable amount of compu-
tation time. We also chose to apply the three samplers on a
conjugate model since Gibbs sampling requires conjugacy,
although our implementation of the two slice samplers did
not make use of this. In the next section we demonstrate
the modelling performance of a non-conjugate model us-
ing the semi-ordered slice sampler on a dataset of MNIST
handwritten digits.

We used the conjugate linear-Gaussian binary latent fea-
ture model for comparing the performances of the different
samplers [6]. Each data point xi is modelled using a spher-
ical Gaussian with mean zi,:A and variance 2
X , where zi,:
is the row vector of feature occurrences corresponding to
xi, and A is a matrix whose kth row forms the parameters
for the kth feature. Entries of A are drawn i.i.d. from a zero
A. We generated 1, 2 and
mean Gaussian with variance 2
3 dimensional datasets from the model with data variance
xed at 2
X = 1, varying values of the strength parameter
 = 1, 2 and the latent feature variance 2
A = 1, 2, 4, 8. For
each combination of parameters we produced ve datasets
with 100 data points, giving a total of 120 datasets. For all
datasets, we xed 2
A to the generating values and
learned the feature matrix Z and .

X and 2

103

102

101

e
m

i
t


i

g
n
x
m

i

StickBreaking SemiOrdered   Gibbs Sampling

Figure 2: Autocorrelation times for K + for the slice sam-
pler in decreasing stick lengths ordering, in semi-ordered
stick-breaking representation, and for the Gibbs sampler.

For each dataset and each sampler, we repeated 5 runs of
15, 000 iterations. We used the autocorrelation coefcients
of the number of represented features K + and  (with a
maximum lag of 2500) as measures of mixing time. We
found that mixing in K + is slower than in  for all datasets
and report results only for K + here. We also found that
in this regime the autocorrelation times do not vary with
A. In Figure 2 we report the auto-
dimensionality or with 2
correlation times of K + over all runs, all datasets, and all
three samplers. As expected, the slice sampler using the de-
creasing stick lengths ordering was always slower than the
semi-ordered one. Surprisingly, we found that the semi-
ordered slice sampler was just as fast as the Gibbs sampler
which fully exploits conjugacy. This is about as well as we
would expect a more generally applicable non-conjugate
sampler to perform.

7 DEMONSTRATION

In this section we apply the semi-ordered slice sampler to
1000 examples of handwritten images of 3s in the MNIST
dataset. The model we worked with is a generalization of
that in Section 6, where in addition to modelling feature
occurrences, we also model per object features values [6].
In particular, let Y be a matrix of the same size as Z, with
i.i.d. zero mean unit variance Gaussian entries. We model
each xi as

xi|Z, Y, A, 2

X  N ((zi,: (cid:12) yi,:)A, 2

X I),

(33)

where (cid:12) is elementwise multiplication. Specication for
the rest of the model is as in Section 6. We can integrate Y
or A out while maintaining tractability, but not both.

The handwritten digit images are rst preprocessed by pro-
jecting on to the rst 64 PCA components, and the sampler
ran for 10000 iterations. The trace plot of the log likeli-
hood and the distribution of the number of active features
are shown in Figure 3. The model succesfully nds latent
features to reconstruct the images as shown in Figure 4.
Some of the latent features found are shown in Figure 5.
Most appear to model local shifts of small edge segments

105
4

4.1

4.2

4.3

300

200

100

d
o
o
h

i
l

e
k

i
l



g
o

l

)
k


e
r
u

t

a
e

f


h

t
i

w

s
t
c
e
b
o

j



#
(


k

m

0

20

40

60

80

k (feature label)

400

300

200

100

s
n
o

i
t

a
r
e

t
i


#

2500

5000

iterations

7500

10000

0
50

100

# active feats

150

j

s
t
c
e
b
o
#



150

100

50

0

5

10

# active feats

15

100

120

Figure 3: Top-left: the log likelihood trace plot. The sam-
pler quickly nds a high likelihood region. Top-right: his-
togram of the number of active features over the 10000 iter-
ations. Bottom-left: number of images sharing each feature
during the last MCMC iteration. Bottom-right: histogram
of the number of active features used by each input image.
Note that about half of the features are used by only a few
data points, and each data point is represented by a small
subset of the active features.

Figure 5: Features that are shared between many digits.

form A = P

ments. A direct consequence of our stick-breaking con-
struction is that a draw from such a Beta process has the
k=1 (k)k with (k) drawn from (5) and
k drawn i.i.d. from the base measure H. This is a par-
ticularly simply case of a more general construction called
the inverse Levy measure [18, 9]. Generalizations to us-
ing other stick-breaking constructions automatically lead
to generalizations of the Beta process, and we are currently
exploring a number of possibilities, including the Pitman-
Yor extension. Finally, the duality observed in Section 3.2
seems to be a hitherto unknown connection between the
Beta process and the DP which we are currently trying to
understand.

As an aside, it is interesting to note the importance of fea-
ture ordering in the development of the IBP. To make the
derivation rigorous, [6] had to carefully ignore the feature
ordering by considering permutation-invariant equivalence
classes before taking the innite limit. In this paper, we de-
rived the stick-breaking construction by imposing a feature
ordering with decreasing feature weights.

To conclude, our development of a stick-breaking construc-
tion for the IBP has lead to interesting insights and connec-
tions, as well as practical algorithms such as the new slice
samplers.

ACKNOWLEDGEMENTS

Figure 4: Last column: original digits. Second last column:
reconstructed digits. Other columns: features used for re-
construction.

We thank the reviewers for insightful comments. YWT
thanks the Lee Kuan Yew Endowment Fund for funding.

of the digits, and are reminiscent of the result of learning
models with sparse priors (e.g. ICA) on such images [16].

8 DISCUSSION AND FUTURE WORK

We have derived novel stick-breaking representations of the
Indian buffet process. Based on these representations new
MCMC samplers are proposed that are easy to implement
and work on more general models than Gibbs sampling.
In experiments we showed that these samplers are just as
efcient as Gibbs without using conjugacy.

[17] have recently showed that the IBP is a distribution
on matrices induced by the Beta process with a constant
strength parameter of 1. This relation to the Beta process
is proving to be a fertile ground for interesting develop-

