Abstract

We present a novel Text-to-Picture system that synthe-
sizes a picture from general, unrestricted natural lan-
guage text. The process is analogous to Text-to-Speech
synthesis, but with pictorial output that conveys the gist
of the text. Our system integrates multiple AI compo-
nents, including natural language processing, computer
vision, computer graphics, and machine learning. We
present an integration framework that combines these
components by rst identifying informative and pic-
turable text units, then searching for the most likely
image parts conditioned on the text, and nally optimiz-
ing the picture layout conditioned on both the text and
image parts. The effectiveness of our system is assessed
in two user studies using childrens books and news ar-
ticles. Experiments show that the synthesized pictures
convey as much information about childrens stories as
the original artists illustrations, and much more infor-
mation about news articles than their original photos
alone. These results suggest that Text-to-Picture synthe-
sis has great potential in augmenting human-computer
and human-human communication modalities, with ap-
plications in education and health care, among others.

Introduction

A picture is worth a thousand words. However, very few
systems convert general text to pictorial representations that
can be used in many circumstances to replace or augment
the text. We present a novel Text-to-Picture (TTP) synthe-
sis system which automatically generates pictures, that aims
to convey the primary content of general natural language
text. Figure 1 shows a picture automatically generated by
our TTP system. Our system employs AI techniques ranging
from natural language processing, computer vision, com-
puter graphics, to machine learning. We integrate these com-
ponents into a concatenative synthesizer, where the synergy
of text unit selection, image parts generation, and layout op-
timization produces coherent nal pictures. For example,
we use picturability to inuence word selection, and use
word importance to inuence the layout of the picture. The

We thank the anonymous reviewers for their constructive com-
ments. Research supported in part by the Wisconsin Alumni Re-
search Foundation.
Copyright c(cid:2) 2007, Association for the Advancement of Articial
Intelligence (www.aaai.org). All rights reserved.

First the
farmer gives
hay to the
goat.
the farmer
gets milk
from the
cow.

Then

Figure 1: A picture generated by our TTP system.

details, as well as an appropriate evaluation metric, are pre-
sented. User study experiments show that participants de-
scriptions of TTP collages contain words that are a closer (or
equivalent) match to the original text than their descriptions
of original illustrations or photos that accompany the text.

TTP has many applications when a text interface is not
appropriate. One important application is literacy develop-
ment. For children who are learning to read and for sec-
ond language learners, seeing pictures together with text
may enhance learning (Mayer 2001). Another application
is as a reading aid for people with learning disabilities or
brain damage. TTP can convert textual menus, signs, and
safety and operating instructions into graphical representa-
tions. Importantly, TTP output can be created on demand by
a user and does not depend on a vendor to produce it. Even-
tually, a person might carry a PDA equipped with TTP and
optical character recognition so that the person could gen-
erate visual translations as needed during their daily activi-
ties. TTP naturally acts as a universal language when com-
munication is needed simultaneously to many people who
speak different languages, for example for airport public an-
nouncements (Mihalcea & Leong 2006). TTP can produce
visual summaries for rapidly browsing long text documents.
The current work differs from previous text-to-scene type
systems in its focus on conveying the gist of general, unre-
stricted text. Previous systems were often meant to be used
by graphics designers as an alternative way to specify the
layout of a scene. Such text-to-scene systems tend to empha-
size spatial reasoning. Examples include NALIG (Adorni,
Manzo, & Giunchiglia 1984), SPRINT (Yamada et al.

1590

1992), Put (Clay & Wilhelms 1996) and, notably, Words-
Eye (Coyne & Sproat 2001). WordsEye is able to produce
highly realistic 3D scenes by utilizing thousands of pre-
dened 3D polyhedral object models with detailed manual
tags, and deep semantic representations of the text. Conse-
quently, WordsEye works best with certain descriptive sen-
tences, e.g., The lawn mower is 5 feet tall. John pushes the
lawn mower. The cat is 5 feet behind John. The cat is 10
feet tall. Other systems include (Brown & Chandrasekaran
1981; Lu & Zhang 2002). CarSim (Johansson et al. 2005)
converts special-domain narratives on road accidents into an
animated scene using icons. Blissymbols (Hehner 1980)
and other graphic symbol systems create symbol-for-word
strings rather than a coherent picture that conveys a global
meaning.

The Text-to-Picture System

Let the input text be a word sequence W1:n of length n. In
our concatenative TTP synthesizer, we rst use natural lan-
guage processing techniques to select k keyphrases (impor-
tant words or phrases found within W1:n) to draw. Then
for each selected keyphrase, we use computer vision tech-
niques to nd a corresponding image Ii. (We use the word
picture to denote the overall composed output, while im-
age to denote the individual constituents.) Finally we use
computer graphics techniques to spatially arrange all k im-
ages to create the output picture. To integrate these com-
ponents together, we formulate the TTP problem as nding
the most likely keyphrases K
1:k, and placement
C
1:k given the input text W1:n:
(K

(1)
In our implementation, the placement Ci of image i is speci-
ed by the center coordinates, but other factors such as scale,
rotation and depth can be incorporated too. To make the
optimization problem tractable, we factorize the probability
into

1:k) = argmaxK,I,C p(K, I, C|W1:n).

1:k, images I 

1:k, I 

1:k, C

p(K, I, C|W) = p(K|W)p(I|K, W)p(C|I, K, W),

(2)
and approximate the joint maximizer of Eq. (1) by the max-
imizers of each factor in Eq. (2), as described below.

1. Selecting Keyphrases
Given a piece of text, e.g., a sentence or a whole book,
the rst question is, which keyphrases should be selected
to form the picture? Formally, we solve the subproblem
K

1:k = argmaxK p(K|W).
Our approach is based on extractive picturable keyword
summarization. That is, it builds on standard keyword-based
text summarization (Turney 1999; Mihalcea & Tarau 2004),
where keywords and keyphrases are extracted from the text
based on lexicosyntactic cues. The central issue in key-
word summarization is to estimate the importance of lexical
units. We do so using an unsupervised learning approach
based on the TextRank algorithm (Mihalcea & Tarau 2004).
TextRank denes a graph over candidate words based on co-
occurrence in the current text, and uses the stationary distri-
bution of a teleporting random walk on the graph as the im-
portance measure. Our novelty is that we include a special

1591

teleporting distribution over the words in the graph. Our
teleporting distribution is based on picturability, which
measures the probability of nding a good image for a word.
Our approach thus selects keyphrases that are important to
the meaning of the text and are also easy to represent by an
image.
The TextRank Graph Following Mihalcea and Ta-
rau (2004), we dene the TextRank graph over individual
words. The ranking of these words will be used later to con-
struct the nal set of longer keyphrases. All nouns, proper
nouns, and adjectives (except those in a stop list) are selected
as candidate words using a part-of-speech tagger. We then
build a co-occurrence graph with each word as a vertex. We
represent this unweighted graph as a co-occurrence matrix,
where entry ij is 1 if term i and term j co-occur within a
window of size 5.
Teleporting Distribution based on Picturability We
base each graph vertexs teleporting probability on whether
we are likely to nd an image for the corresponding word.
We call this measure picturability and compute it using
a logistic regression model. The picturability logistic re-
gression model was trained on a manually-labeled set of 500
words, randomly selected from a large vocabulary. Five an-
notators independently labeled the words. A word is labeled
as picturable (y = 1) if an annotator is able to draw or nd a
good image of the word. When shown the image, other peo-
ple should be able to guess the word itself or a similar word.
Words labeled as non-picturable (y = 0) lack a clearly rec-
ognizable associated image (e.g., dignity).

We represent a word using 253 candidate features, derived
from the log-ratios between 22 raw counts. We obtain the
raw counts from various Web statistics, such as the num-
ber of hits from image and Web page search engines (e.g.,
Google, Yahoo!, Flickr) in response to a query of the word.
We perform forward feature selection with L2-regularized
logistic regression. The log-ratio between Google Image
Search hit count and Google Web Search hit count domi-
nated all other features in terms of cross-validation log like-
lihood. With the practical consideration that a light system
should request as few raw Web counts as possible, we de-
cided to create a model with only this one feature.
Intu-
itively, number of images vs. Web pages is a good pictura-
bility feature that measures image frequency with respect to
word frequency. The resulting picturability logistic regres-
sion model is

p(y = 1|x) =

1

(3)

(cid:2)

1 + exp((2.78x + 15.40))

(cid:3)
(c1 + 109)/(c2 + 109)

where x = log
is the log ra-
tio between smoothed counts c1 (Google Image hits) and
c2 (Google Web hits), and 109 is a smoothing constant to
prevent zero counts. For example, the word banana has
356,000 Google Image hits and 49,400,000 Web hits. We
nd that p(y = 1|banana) = 0.84, meaning banana is
probably a picturable word. On the other hand, the word
Bayesian has 17,400 Google Image hits and 10,400,000
Web hits, so p(y = 1|Bayesian) = 0.09, indicating it is
not so picturable.

We use Eq. (3) to compute a picturability value for each
candidate word in the TextRank graph. These values are
normalized to form the teleporting distribution vector r.
Determining the Final Keyphrases To obtain the rank-
ing of words, we compute the stationary distribution of the
teleporting random walk

P + (1  )1r

(cid:3),

where P is the graph-based transition matrix (i.e., row-
normalized co-occurrence matrix) and r is the teleporting
distribution dened above. This is the same computation
used by PageRank.  is an interpolation weight, which we
set to 0.75, and 1 is an all-ones vector. The stationary distri-
bution indicates the centrality or relative importance of each
word in the graph, taking into account picturability. We se-
lect the 20 words with the highest stationary probabilities,
and form keyphrases by merging adjacent instances of the
selected words (as long as the resulting phrase has a pic-
turability probability greater than 0.5). Next, we discard
phrases lacking nouns, multiple copies of the same phrase,
and phrases that are subsumed by other longer phrases. The
end result is a list of keyphrases that appear important and
are likely to be representable by an image. Finally, each ex-
tracted keyphrase Ki is assigned an importance score s(Ki),
which is equal to the average stationary probability of the
words comprising it.

p(Ii|W, K

i = argmaxIi

2. Selecting Images
The goal of this stage is to nd one image to represent each
extracted keyphrase. Our algorithm handles each keyphrase
independently: I 
i ), i = 1 . . . k.
Our image selection module combines two sources to nd
such an image. First, we use a manually labeled clipart li-
brary. Second, if the keyphrase cannot be found in the li-
brary, we use an image search engine and computer vision
techniques. Combining the two sources ensures accurate re-
sults for common keyphrases, which are likely to exist in the
library, and good results for other arbitrary keyphrases. We
focus on the second source below.

In particular,

Image search engines are not perfect, which means many
images returned do not visually represent the keyphrase
well.
the rst image returned by an im-
age search engine is often not a good image to depict the
keyphrase. Our approach to selecting the best image from
search results, which is similar to the method by Ben-Haim
et al. (2006), consists of the following steps. First, the top 15
images for this keyphrase are retrieved using Google Image
search. Next, each image is segmented into a set of disjoint
regions using an image segmentation algorithm (Felzen-
szwalb & Huttenlocher 2004). Parameters for the algorithm
were set so that, on average, each image is segmented into a
small number of segments so that over-segmentation of the
object of interest is less likely.

For each region extracted in each image, we next com-
pute a feature vector to describe the appearance of that re-
gion. Color histograms have been shown to perform well for
databases of arbitrary color photographs (Deselaers, Key-
sers, & Ney 2004). We compute a vector of color features

Figure 2: The image selection process on three retrieved im-
ages for the word pyramids. Segmentation boundaries are
overlaid on the images. The region closest to the centroid of
the largest cluster is indicated by the arrow, and that image
is selected as the best for the word.

to describe each region. Specically, the color histogram in
LUV color space of all pixels in a region is computed. The
L component is then quantized into 5 bins, and the UV pairs
of values are quantized into 25 bins, resulting in a feature
vector of size 30.

The feature vectors in all images are now clustered in fea-
ture space. Assuming there are several regions that corre-
spond to the keyphrase and their appearances are similar, we
expect to nd a compact cluster in feature space. We use the
Mean Shift clustering algorithm (Comaniciu & Meer 2002).
Assuming that regions corresponding to background parts of
an image are not as similar to one another as the regions that
correspond to the keyphrase, we treat the largest cluster as
the one that is most likely to correspond to the keyphrase.
Once the largest cluster is found, we nd the region whose
feature vector is closest to the centroid of this cluster. The
image which contains this region is then selected as the best
image for this keyphrase. Figure 2 shows an example of the
result of this algorithm.

3. Picture Layout
The third and nal stage takes the text, the keyphrases, and
their associated images, and determines a 2D spatial layout
of the images, C
1:k = argmaxC p(C|W, K, I ), to create
the output picture.

Our problem of composing a set of images is similar to
the problem of creating picture collages, e.g., (Wang et al.
2006). However, our goal is to create a layout that helps
to convey the meaning of the text by revealing the impor-
tant objects and their relations. Since we are interested in
handling unrestricted text, we do not assume the availability
of semantic knowledge or object recognition components,
relying instead on the structure of the text and general lay-
out rules that make the picture intuitively readable. To this
end, we rst scale all the images to make them roughly the
same size. To determine the best locations for the images,
we dene a good layout to have the following three proper-
ties:
1. Minimum overlap: Overlap between images should be

minimized,

2. Centrality: Important images should be near the center,

1592

3. Closeness: Images corresponding to keyphrases that are

close in the input text should be close in the picture.

Finding the best positions for all the images is formulated as
an optimization problem to minimize the objective:

k(cid:4)

k(cid:4)

1

k(cid:4)

o(Ii, Ij)
Atotal

+2

k(cid:4)

k(cid:4)

s(Ki)d(Ii)+3

q(i, j)

i=1

j<i

i=1

i=1

j<i

where s are weights, o(Ii, Ij) is the area of overlap be-
tween pictures Ii and Ij, Atotal is the sum of the areas of
all images, s(Ki) is the importance of keyphrase Ki, d(Ii)
is the distance of image Ii from the center of the picture,
and q(i, j) is an indicator function dened as

(cid:5)

q(i, j) =

1
0

if the closeness constraint is violated
otherwise.

The closeness constraint is violated if two keyphrases, Ki
and Kj, are close in the text but their corresponding images,
Ii and Ij, are not touching in the picture. Two keyphrases
are said to be close if they are less than 7 words apart and no
other keyphrase separates them in the input text.

To solve this highly non-convex optimization problem, we
use a Monte Carlo randomized algorithm to construct multi-
ple candidate pictures and then pick the one that minimizes
the objective function. At each step of the algorithm for
constructing a candidate picture, one image is selected and
its position in the picture is determined. When all images
have been selected, the candidate picture is complete.

The most important image is always placed rst at the
center of the picture. To select the next image to add to the
picture, we make a random decision between selecting an
image based on importance or based on obeying closeness
constraints. To select an image based on importance, a ran-
dom image is selected from the remaining images, where the
probability of selecting image Ii is
s(Kj ) and the sum-
mation is over all remaining images Ij. Recall that s(Ki) is
image Iis associated keyphrase importance. To choose an
image based on closeness constraints, an image is selected,
uniformly at random, from the remaining images that are
close to one of the images already placed. A local gradient
descent move is used to remove any overlap between im-
ages.

s(Ki)P

The process of creating a candidate picture is repeated a
large number of times (currently 1000), and the best picture
(with the lowest objective function) is selected as the nal
result. Branch-and-bound was also implemented so that a
partial picture is immediately rejected if the objective func-
tion exceeds that of the best picture found so far. Figure 3
shows an example of the picture layout optimization proce-
dure.

j

Evaluation Metric
To assess the systems performance, an evaluation measure
was used to gauge the amount of information conveyed
by the picture produced. The user is shown the gener-
ated picture alone without the original text, and is asked to
write down the meaning of the picture in text. Such user-
generated text, u, is automatically compared to the original

1593

a

d
cb

a

c b
d

a

cb
d

l

e
u
a
v


e
v
i
t
c
e
b
O

j

55

50

45

40

0

200

400

600

Iterations

800

1000

Figure 3: The minimum value of the objective function as a
function of the number of candidate pictures generated. At
selected points, the best layout found is shown. Closeness
constraints were (a,b), (b,c) and (c,d). Darker images repre-
sent more important keyphrases.

(reference) The large chocolatecolored horse trotted in the pasture.

1

0.9

1

0.9

1

1

0.9

(user) The brown horse runs in the grass.

Figure 4: An example TTP alignment for evaluation.

reference text, r, used to generate the picture. The assump-
tion is that the closer u is to r, the better the TTP system,
because the user gets more correct information out of the
picture. This procedure is similar to the game of Pictionary.
The key to this measure is an appropriate similarity func-
tion to compare u and r. For example, as shown in Figure 4,
assume the TTP system generates a picture from the refer-
ence sentence r =The large chocolate-colored horse trot-
ted in the pasture, and, during evaluation, the user produces
the sentence u =The brown horse runs in the grass. Note
several words are different but similar (i.e., substitutions).
Insertions and deletions can occur too.

Intuitively, we want two things simultaneously. On one
hand, the user sentence u should have all the words in the
reference sentence r (so important concepts are covered).
This can be captured by recall (R). The standard ROUGE
measure for text summarization (Lin & Hovy 2003) is such a
recall-based measure. On the other hand, the user sentence
u should not have too many irrelevant words (otherwise u
can always be the entire vocabulary, which would perfectly
cover r). This can be captured by precision (P ). The stan-
dard BLEU measure for machine translation (Papineni et al.
2002) is such a precision-based measure.

Since both recall and precision are important for evaluat-
ing TTP systems, we combine them and compute the stan-
dard F-score, F = 2P R/(P + R).
In order to compute
precision and recall, we need to (i) handle (near) synonyms,
and (ii) dene an alignment between the reference and user
text.

We address the synonym issue by dening a substitution
function that takes a pair of words and returns a similarity
measure between them. For example, the substitution func-
tion returns 1 if the two words are identical or share the same

stem (e.g., run vs. ran). The function returns a score less
than 1 if the two words are synonymous (e.g., pasture and
grass, mare and horse). Several WordNet-based similarity
measures exist (e.g., (Pedersen, Patwardhan, & Michelizzi
2004)). The results reported here use a similarity that decays
exponentially (by a factor of 0.9) as the number of levels be-
tween the two words in the WordNet lattice increases. Words
more than three levels apart receive a substitution score of 0.
Using the substitution function, a greedy alignment al-
gorithm was dened. That is, among all reference-user
word pairs, the pair with the highest substitution score is
picked. All pairs containing either one of the two words
are removed, and the procedure is then repeated until word
pairs are exhausted. In the example in Figure 4, the result
of greedy alignment is shown with the assumed substitu-
tion score of 1 for identical words and 0.9 for synonyms.
Let a(w) be the substitution score attached to word w af-
ter alignment, and |u| and |r| be the lengths of u and r, re-
spectively. The soft precision, recall, and F-score, which
i=1 a(ui)/|u|,
use substitution and alignment, are P =
i=1 a(ui)/|r|, F = 2P R/(P + R). For the example
R =
in Figure 4, P = 6.7/7, R = 6.7/9, and the nal F-score
is 0.84. Note that the actual evaluation measure ignores stop
words in both sentences.

(cid:6)|u|

(cid:6)|u|

Experimental Results

User studies were conducted to assess the TTP systems per-
formance in two scenarios: childrens book illustration and
news article visual summarization. In the rst scenario, TTP
was used to produce pictures to represent short texts that
originate from single pages of illustrated childrens books.
Our hope is that TTP-generated pictures convey as much in-
formation content as the original illustrations presented in
the childrens book.
In the second scenario, we examine
TTPs ability to present a visual summary of a news article,
which is more descriptive than the original news photograph.
We hope to show that, while the news photograph often lacks
enough details for a viewer to determine the main idea in
the article, combining the photograph with a TTP-generated
composite picture allows the user to understand the gist of
the article.
Childrens Book Illustration For the rst user study, the
TTP system was used to illustrate 20 randomly selected texts
from a large pool of childrens books. These texts range
from 16 to 140 words and span one or more sentences. Fig-
ure 5 shows the TTP output produced for one example text.
Note each text also has an original illustration, so there are
40 pictures in all (20 TTP, 20 illustrations). Users were
asked to write a short text description (i.e., the user text) of
each of the 40 pictures, so we can compare whether the TTP
picture or the illustration is better at presenting the mean-
ing of the original story (i.e., reference text). Astute users
may be able to gure out which illustration and TTP picture
present the same story, and thus may have more informa-
tion when describing the latter of the pair. To counteract
this phenomenon, we displayed all the TTP-generated pic-
tures (in random order) before all the illustrations (in differ-

1594

The girl
loved the
dog.
The
girl loved
the dogs
soft eyes
and warm
nose and big
paws.
girl wished
she had a
dog.

The

Figure 5: A TTP picture for the above text. Note the monkey
image obtained from image search represents, incorrectly,
the keyphrase soft eyes.

ent random order). This actually gives the book illustrations
an advantage, since users might have remembered TTP pic-
tures of the same stories shown before (and thus are able to
mention details not explicitly illustrated).

Six participants provided 40 short text descriptions each,
ranging from a few words to a few sentences. For example,
the responses for the TTP picture in Figure 5 were:
A girls pet puts its paw on her nose.
The dog walked up to the girl and sniffed her.
The dog bit the girl in her nose and ran away.
The girls nose smelled the dog and monkey as they walked away.
The girl walked her dog and saw a hairy man with a big nose.
The girl monkey nose smells dog paw prints.
Note that the actual book illustration shows only a girl sit-
ting on a sofa hugging a large dog. While the responses for
that picture (e.g., The girl and her giant dog hugged on the
couch.) tend to be accurate descriptions, they also differ
greatly from the true text of the story.

Post-study, we compared each of the user texts to the cor-
responding reference text using the F-score introduced ear-
lier. The scatter plot in Figure 6(a) shows the relationship
between F-score based on TTP pictures (x-axis) and F-score
based on original illustrations (y-axis). Each point repre-
sents one users score for one of the 20 stories. Just over
half (53%) of the points fall below the diagonal. If we aver-
age out individual user differences by combining the points
for the same stories, 70% of the aggregate points fall be-
low the diagonal (i.e., TTP helps recreate the reference text
better in 14 of the 20 cases). Averaged over all stories and
all users, the F-score based on TTP pictures is 0.98 times
the average F-score based on the hand-drawn illustrations,
suggesting that the TTP provides users with a picture that
conveys almost (but not quite) as much information as the
texts original illustration.
News Article Visual Summarization In the second study,
10 Associated Press news articles (350850 words, plus
one photograph) were randomly selected from different do-
mains. Here, the goal is to investigate TTPs ability to aug-
ment a simple news photo with more information. Thus,

0.8

0.6

0.4

0.2

e
r
o
c
s

F

n
o
i
t
a
r
t
s
u

l
l
I

0
0

0.15

0.1

0.05

e
r
o
c
s

F
o
o
h
P

t



0.2

0.4

0.6
TTP Fscore

0.8

0
0

0.05
0.1
TTP Fscore

0.15

(a) Childrens books

(b) News articles

Figure 6: Scatter plots comparing TTP pictures (x-axis) vs.
childrens book illustrations or news photographs (y-axis).

we rst show each real photograph, followed by the photo-
graph next to the TTP-generated picture. Note that in such a
long article, there will be many potentially picturable items,
but the keyphrase extraction algorithm selects the ones most
central to the texts meaning. To evaluate the difference in
information provided by the original and combined pictures,
the F-score was computed using the users text and the cor-
responding full article text. Given the length of the full text
compared to a typical user response, we expect these scores
to be low, but we care only about the difference between the
picture sources. Eight participants provided 20 user texts
each. Figure 6(b) plots F-score using photograph+TTP pic-
tures (x-axis) versus F-score based on original photographs
alone (y-axis), where each point represents a single user on a
single article. 94% of the points lie below the diagonal, and
if we average over users, 100% of the aggregate points lie
below the diagonal. The overall average F-score based on
TTP-augmented pictures is 2.21 times the average F-score
based on the original news photographs alone. This indi-
cates that TTP renders a visual representation that is far su-
perior in conveying the news article than its original photo-
graph. This is to be expected, as the photos typically show
only a single person or scene, whereas the articles discuss
many entities that the TTP pictures capture.

Overall, these experiments show that our TTP system
conveys as much or more of the content of the text through
the generated pictures, than the original illustrations or pho-
tos that accompany the text.

Conclusions

We presented a general-purpose Text-to-Picture synthesis
system, built upon a synergy of AI components using natural
language processing, computer vision and graphics, and ma-
chine learning. Two user studies quantitatively demonstrate
the TTP systems ability to generate pictures that convey the
gist of input text. The current work is a rst step towards
automatically producing pictures that realistically depict ar-
bitrary text. Future work includes incorporating context to
produce scenes, performing deeper semantic analysis, and
depicting actions with animation. We plan to investigate
several TTP applications, including literacy development for
children and rehabilitation for brain-injured patients.

1595

