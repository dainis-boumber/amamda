1 Introduction

One way of modeling a complicated, high-dimensional data distribution is
to use a large number of relatively simple probabilistic models and somehow
combine the distributions specied by each model. A well-known example
of this approach is a mixture of gaussians in which each simple model is
a gaussian, and the combination rule consists of taking a weighted arith-
metic mean of the individual distributions. This is equivalent to assuming
an overall generative model in which each data vector is generated by rst
choosing one of the individual generative models and then allowing that
individual model to generate the data vector. Combining models by form-
ing a mixture is attractive for several reasons. It is easy to t mixtures of
tractable models to data using expectation-maximization (EM) or gradient
ascent, and mixtures are usually considerably more powerful than their in-
dividual components. Indeed, if sufciently many models are included in
c(cid:1) 2002 Massachusetts Institute of Technology

Neural Computation 14, 17711800 (2002)

1772

Geoffrey E. Hinton

the mixture, it is possible to approximate complicated smooth distributions
arbitrarily accurately.

Unfortunately, mixture models are very inefcient in high-dimensional
spaces. Consider, for example, the manifold of face images. It takes about 35
real numbers to specify the shape, pose, expression, and illumination of a
face, and under good viewing conditions, our perceptual systems produce a
sharp posterior distribution on this 35-dimensional manifold. This cannot be
done using a mixture of models, each tuned in the 35-dimensional manifold,
because the posterior distribution cannot be sharper than the individual
models in the mixture and the individual models must be broadly tuned to
allow them to cover the 35-dimensional manifold.

A very different way of combining distributions is to multiply them to-
gether and renormalize. High-dimensional distributions, for example, are
often approximated as the product of one-dimensional distributions. If the
individual distributions are uni- or multivariate gaussians, their product
will also be a multivariate gaussian so, unlike mixtures of gaussians, prod-
ucts of gaussians cannot approximate arbitrary smooth distributions. If,
however, the individual models are a bit more complicated and each con-
tains one or more latent (i.e., hidden) variables, multiplying their distribu-
tions together (and renormalizing) can be very powerful. Individual models
of this kind will be called experts.

Products of experts (PoE) can produce much sharper distributions than
the individual expert models. For example, each expert model can con-
strain a different subset of the dimensions in a high-dimensional space, and
their product will then constrain all of the dimensions. For modeling hand-
written digits, one low-resolution model can generate images that have the
approximate overall shape of the digit, and other more local models can
ensure that small image patches contain segments of stroke with the correct
ne structure. For modeling sentences, each expert can enforce a nugget of
linguistic knowledge. For example, one expert could ensure that the tenses
agree, one could ensure that there is number agreement between the subject
and verb, and one could ensure that strings in which color adjectives follow
size adjectives are more probable than the the reverse.

Fitting a PoE to data appears difcult because it appears to be necessary
to compute the derivatives, with repect to the parameters, of the partition
function that is used in the renormalization. As we shall see, however, these
derivatives can be nessed by optimizing a less obvious objective function
than the log likelihood of the data.

2 Learning Products of Experts by Maximizing Likelihood

We consider individual expert models for which it is tractable to compute
the derivative of the log probability of a data vector with respect to the

Training Products of Experts

1773

parameters of the expert. We combine n individual expert models as follows:

p(d | 1, . . . , n) = m fm(d | m)
m fm(c | m)

(cid:1)

c

,

(2.1)

where d is a data vector in a discrete space, m is all the parameters of
individual model m, fm(d | m) is the probability of d under model m, and c
indexes all possible vectors in the data space.1 For continuous data spaces,
the sum is replaced by the appropriate integral.

For an individual expert to t the data well, it must give high probability
to the observed data, and it must waste as little probability as possible on
the rest of the data space. A PoE, however, can t the data well even if each
expert wastes a lot of its probability on inappropriate regions of the data
space, provided different experts waste probability in different regions.

The obvious way to t a PoE to a set of observed independently and
identically distributed (i.i.d.) data vectors 2 is to follow the derivative of the
log likelihood of each observed vector, d, under the PoE. This is given by

 log p(d | 1, . . . , n)

m

=  log fm(d | m)

(cid:2)

m
p(c | 1, . . . , n)



c

 log fm(c | m)

m

.

(2.2)

The second term on the right-hand side of equation 2.2 is just the ex-
pected derivative of the log probability of an expert on fantasy data, c, that
is generated from the PoE. So assuming that each of the individual experts
has a tractable derivative, the obvious difculty in estimating the derivative
of the log probability of the data under the PoE is generating correctly dis-
tributed fantasy data. This can be done in various ways. For discrete data,
it is possible to use rejection sampling. Each expert generates a data vec-
tor independently, and this process is repeated until all the experts happen
to agree. Rejection sampling is a good way of understanding how a PoE
species an overall probability distribution and how different it is from a
causal model, but it is typically very inefcient. Gibbs sampling is typically
much more efcient. In Gibbs sampling, each variable draws a sample from
its posterior distribution given the current states of the other variables (Ge-
man & Geman, 1984). Given the data, the hidden states of all the experts
can always be updated in parallel because they are conditionally indepen-
dent. This is an important consequence of the product formulation.3 If the

will generally be a probability in this article.

1 So long as fm(d | m) is positive, it does not need to be a probability at all, though it
2 For time-series models, d is a whole sequence.
3 The conditional independence is obvious in the undirected graphical model of a PoE
because the only path between the hidden states of two experts is via the observed data.

1774

Geoffrey E. Hinton

Figure 1: A visualization of alternating Gibbs sampling. At time 0, the visible
variables represent a data vector, and the hidden variables of all the experts
are updated in parallel with samples from their posterior distribution given the
visible variables. At time 1, the visible variables are all updated to produce a re-
construction of the original data vector from the hidden variables, and then the
hidden variables are again updated in parallel. If this process is repeated suf-
ciently often, it is possible to get arbitrarily close to the equilibrium distribution.
The correlations (cid:5)sisj(cid:6) shown on the connections between visible and hidden
variables are the statistics used for learning in RBMs, which are described in
section 7.

individual experts also have the property that the components of the data
vector are conditionally independent given the hidden state of the expert,
the hidden and visible variables form a bipartite graph, and it is possible to
update all of the components of the data vector in parallel given the hidden
states of all the experts. So Gibbs sampling can alternate between parallel
updates of the hidden and visible variables (see Figure 1). To get an un-
biased estimate of the gradient for the PoE, it is necessary for the Markov
chain to converge to the equilibrium distribution.

Unfortunately, even if it is computationally feasible to approach the equi-
librium distribution before taking samples, there is a second, serious dif-
culty. Samples from the equilibrium distribution generally have high vari-
ance since they come from all over the models distribution. This high vari-
ance swamps the estimate of the derivative. Worse still, the variance in the
samples depends on the parameters of the model. This variation in the vari-
ance causes the parameters to be repelled from regions of high variance even
if the gradient is zero. To understand this subtle effect, consider a horizon-
tal sheet of tin that is resonating in such a way that some parts have strong
vertical oscillations and other parts are motionless. Sand scattered on the
tin will accumulate in the motionless areas even though the time-averaged
gradient is zero everywhere.

3 Learning by Minimizing Contrastive Divergence

Maximizing the log likelihood of the data (averaged over the data distribu-
tion) is equivalent to minimizing the Kullback-Leibler divergence between
the data distribution, P0, and the equilibrium distribution over the visi-

Training Products of Experts

1775


 , that is produced by prolonged Gibbs sampling from the
ble variables, P
generative model,4
(cid:2)

(cid:2)

P0 (cid:8) P

 =


P0(d) log P0(d) 
 (cid:6)P0 ,
= H(P0)  (cid:5)log P


d

P0(d) log P


 (d)

d

(3.1)

where (cid:8) denotes a Kullback-Leibler divergence, the angle brackets denote
expectations over the distribution specied as a subscript, and H(P0) is the
entropy of the data distribution. P0 does not depend on the parameters of the

model, so H(P0) can be ignored during the optimization. Note that P
 (d)
is just another way of writing p(d | 1, . . . , n). Equation 2.2, averaged over
the data distribution, can be rewritten as
(cid:3)

(cid:3)

(cid:4)

(cid:3)

(cid:4)

(cid:4)


 (D)

 log P
m

=

 log fm

P0

m

P0



 log fm

m

,




P

(3.2)

where log fm is a random variable that could be written as log fm(D | m)
with D itself being a random variable corresponding to the data. There is a
simple and effective alternative to maximum likelihood learning that elim-
inates almost all of the computation required to get samples from the equi-
librium distribution and also eliminates much of the variance that masks
the gradient signal. This alternative approach involves optimizing a differ-
ent objective function. Instead of just minimizing P0 (cid:8) P

 , we minimize the
difference between P0 (cid:8) P

 and P1
 is the distribution over
the one-step reconstructions of the data vectors generated by one full step
of Gibbs sampling (see Figure 1).


 where P1

 (cid:8) P

The intuitive motivation for using this contrastive divergence is that
we would like the Markov chain that is implemented by Gibbs sampling to
leave the initial distribution P0 over the visible variables unaltered. Instead
of running the chain to equilibrium and comparing the initial and nal
derivatives, we can simply run the chain for one full step and then update
the parameters to reduce the tendency of the chain to wander away from
the initial distribution on the rst step. Because P1
 is one step closer to the
equilibrium distribution than P0, we are guaranteed that P0 (cid:8) P

 exceeds
 (cid:8) P

P1
 unless P0 equals P1
 , so the contrastive divergence can never be
negative. Also, for Markov chains in which all transitions have nonzero
 implies P0 = P
probability, P0 = P1

 , because if the distribution does not

4 P0 is a natural way to denote the data distribution if we imagine starting a Markov

chain at the data distribution at time 0.

1776

Geoffrey E. Hinton

change at all on the rst step, it must already be at equilibrium, so the
contrastive divergence can be zero only if the model is perfect.5

Another way of understanding contrastive divergence learning is to view
it as a method of eliminating all the ways in which the PoE model would
like to distort the true data. This is done by ensuring that, on average, the
reconstruction is no more probable under the PoE model than the original
data vector.

The mathematical motivation for the contrastive divergence is that the in-

 on the right-hand side of equation 3.2 cancels

tractable expectation over P
out:

(cid:4)

 log fm

m

P1



(3.3)

 
m

(P0 (cid:8) P

  P1


 (cid:8) P
 ) =


(cid:3)

(cid:4)

(cid:3)



 log fm

m
+ P1

m

P0
(P1


 )

.

 (cid:8) P
P1



If each expert is chosen to be tractable, it is possible to compute the exact
values of the derivative of log fm(d | m) for a data vector, d. It is also
straightforward to sample from P0 and P1
 , so the rst two terms on the
right-hand side of equation 3.3 are tractable. By denition, the following
procedure produces an unbiased sample from P1
 :

1. Pick a data vector, d, from the distribution of the data P0.
2. Compute, for each expert separately, the posterior probability distri-
bution over its latent (i.e., hidden) variables given the data vector,
d.

3. Pick a value for each latent variable from its posterior distribution.
4. Given the chosen values of all the latent variables, compute the con-
ditional distribution over all the visible variables by multiplying to-
gether the conditional distributions specied by each expert and renor-
malizing.

5. Pick a value for each visible variable from the conditional distribution.

These values constitute the reconstructed data vector, d.
The third term on the right-hand side of equation 3.3 represents the effect
 (cid:8) P

on P1
 of the change of the distribution of the one-step reconstructions
caused by a change in m. It is problematic to compute, but extensive simu-
lations (see section 10) show that it can safely be ignored because it is small

5 It is obviously possible to make the contrastive divergence small by using a Markov
chain that mixes very slowly, even if the data distribution is very far from the eventual
equilibrium distribution. It is therefore important to ensure mixing by using techniques
such as weight decay that ensure that every possible visible vector has a nonzero proba-
bility given the states of the hidden variables.

Training Products of Experts

1777

and seldom opposes the resultant of the other two terms. The parameters
of the experts can therefore be adjusted in proportion to the approximate
derivative of the contrastive divergence:
(cid:4)

(cid:4)

(cid:3)

m 

 log fm

m

P0

(cid:3)



 log fm

m

.

P1



(3.4)

This works very well in practice even when a single reconstruction of
each data vector is used in place of the full probability distribution over re-
constructions. The difference in the derivatives of the data vectors and their
reconstructions has some variance because the reconstruction procedure is
stochastic. But when the PoE is modeling the data moderately well, the one-
step reconstructions will be very similar to the data, so the variance will be
very small. The close match between a data vector and its reconstruction
reduces sampling variance in much the same way as the use of matched
pairs for experimental and control conditions in a clinical trial. The low
variance makes it feasible to perform on-line learning after each data vector
is presented, though the simulations described in this article use mini-batch
learning in which the parameter updates are based on the summed gradi-
ents measured on a rotating subset of the complete training set.6

There is an alternative justication for the learning algorithm in equa-
tion 3.4. In high-dimensional data sets, the data nearly always lie on, or
close to, a much lower-dimensional, smoothly curved manifold. The PoE
needs to nd parameters that make a sharp ridge of log probability along
the low-dimensional manifold. By starting with a point on the manifold
and ensuring that the typical reconstructions from the latent variables of
all the experts do not have signicantly higher probability, the PoE ensures
that the probability distribution has the right local structure. It is possible
that the PoE will accidentally assign high probability to other distant and
unvisited parts of the data space, but this is unlikely if the log probability
surface is smooth and both its height and its local curvature are constrained
at the data points. It is also possible to nd and eliminate such points by
performing prolonged Gibbs sampling without any data, but this is just a
way of improving the learning and not, as in Boltzmann machine learning,
an essential part of it.

4 A Simple Example

PoEs should work very well on data distributions that can be factorized
into a product of lower-dimensional distributions. This is demonstrated
in Figures 2 and 3. There are 15 unigauss experts, each of which is a

6 Mini-batch learning makes better use of the ability of Matlab to vectorize across

training examples.

1778

Geoffrey E. Hinton

Figure 2: Each dot is a data point. The data have been tted with a product of
15 experts. The ellipses show the one standard deviation contours of the gaus-
sians in each expert. The experts are initialized with randomly located, circular
gaussians that have about the same variance as the data. The ve unneeded
experts remain vague, but the mixing proportions, which determine the prior
probability with which each of these unigauss experts selects its gaussian rather
than its uniform, remain high.

mixture of a uniform distribution and a single axis-aligned gaussian. In the
tted model, each tight data cluster is represented by the intersection of two
experts gaussians, which are elongated along different axes. Using a con-
servative learning rate, the tting required 2000 updates of the parameters.
For each update of the parameters, the following computation is performed
on every observed data vector:

1. Given the data, d, calculate the posterior probability of selecting the
gaussian rather than the uniform in each expert and compute the rst
term on the right-hand side of equation 3.4.

2. For each expert, stochastically select the gaussian or the uniform ac-
cording to the posterior. Compute the normalized product of the se-
lected gaussians, which is itself a gaussian, and sample from it to get
a reconstructed vector in the data space. To avoid problems, there
is one special expert that is constrained to always pick its gaussian.

3. Compute the negative term in equation 3.4 using the reconstructed

data vector.

5 Learning a Population Code

A PoE can also be a very effective model when each expert is quite broadly
tuned on every dimension and precision is obtained by the intersection of a

Training Products of Experts

1779

Figure 3: Three hundred data points generated by prolonged Gibbs sampling
from the 15 experts tted in Figure 1. The Gibbs sampling started from a random
point in the range of the data and used 25 parallel iterations with annealing.
Notice that the tted model generates data at the grid point that is missing in
the real data.

large number of experts. Figure 4 shows what happens when the contrastive
divergence learning algorithm is used to t 40 unigauss experts to 100-
dimensional synthetic images that each contain one edge. The edges varied
in their orientation, position, and intensities on each side of the edge. The
intensity prole across the edge was a sigmoid. Each expert also learned
a variance for each pixel, and although these variances varied, individual
experts did not specialize in a small subset of the dimensions. Given an
image, about half of the experts have a high probability of picking their
gaussian rather than their uniform. The products of the chosen gaussians
are excellent reconstructions of the image. The experts at the top of Figure 4
look like edge detectors in various orientations, positions, and polarities.
Many of the experts farther down have even symmetry and are used to
locate one end of an edge. They each work for two different sets of edges
that have opposite polarities and different positions.

6 Initializing the Experts

One way to initialize a PoE is to train each expert separately, forcing the
experts to differ by giving them different or differently weighted training
cases or by training them on different subsets of the data dimensions, or by
using different model classes for the different experts. Once each expert has
been initialized separately, the individual probability distributions need to
be raised to a fractional power to create the initial PoE.

Separate initialization of the experts seems like a sensible idea, but sim-
ulations indicate that the PoE is far more likely to become trapped in poor
local optima if the experts are allowed to specialize separately. Better so-
lutions are obtained by simply initializing the experts randomly with very
vague distributions and using the learning rule in equation 3.4.

1780

Geoffrey E. Hinton

Figure 4: (a) Some 10 10 images that each contain a single intensity edge. The
location, orientation, and contrast of the edge all vary. (b) The means of all the
100-dimensional gaussians in a product of 40 experts, each of which is a mixture
of a gaussian and a uniform. The PoE was tted to 500 images of the type shown
on the left. The experts have been ordered by hand so that qualitatively similar
experts are adjacent.

7 PoEs and Boltzmann Machines

The Boltzmann machine learning algorithm (Hinton & Sejnowski, 1986) is
theoretically elegant and easy to implement in hardware but very slow in
networks with interconnected hidden units because of the variance prob-
lems described in section 2. Smolensky (1986) introduced a restricted type
of Boltzmann machine with one visible layer, one hidden layer, and no
intralayer connections. Freund and Haussler (1992) realized that in this re-
stricted Boltzmann machine (RBM), the probability of generating a visible
vector is proportional to the product of the probabilities that the visible vec-
tor would be generated by each of the hidden units acting alone. An RBM
is therefore a PoE with one expert per hidden unit.7 When the hidden unit

7 Boltzmann machines and PoEs are very different classes of probabilistic generative

model, and the intersection of the two classes is RBMs.

Training Products of Experts

1781

of an expert is off, it species a separable probability distribution in which
each visible unit is equally likely to be on or off. When the hidden unit is
on, it species a different factorial distribution by using the weight on its
connection to each visible unit to specify the log odds that the visible unit
is on. Multiplying together the distributions over the visible states speci-
ed by different experts is achieved by simply adding the log odds. Exact
inference of the hidden states given the visible data is tractable in an RBM
because the states of the hidden units are conditionally independent given
the data.

The learning algorithm given by equation 2.2 is exactly equivalent to the
standard Boltzmann learning algorithm for an RBM. Consider the derivative
of the log probability of the data with respect to the weight wij between a
visible unit i and a hidden unit j. The rst term on the right-hand side of
equation 2.2 is

 log fj(d | wj)

wij

= (cid:5)sisj(cid:6)d  (cid:5)sisj(cid:6)P




(j),

(7.1)

where wj is the vector of weights connecting hidden unit j to the visible
units, (cid:5)sisj(cid:6)d is the expected value of sisj when d is clamped on the visible
units and sj is sampled from its posterior distribution given d, and (cid:5)sisj(cid:6)P
(j)
is the expected value of sisj when alternating Gibbs sampling of the hidden
and visible units is iterated to get samples from the equilibrium distribution
in a network whose only hidden unit is j.




The second term on the right-hand side of equation 2.2 is:

p(c | w)

 log fj(c | wj)

wij

= (cid:5)sisj(cid:6)P




 (cid:5)sisj(cid:6)P




(j),

(7.2)

(cid:2)

c

where w is all of the weights in the RBM and (cid:5)sisj(cid:6)P
is the expected value
of sisj when alternating Gibbs sampling of all the hidden and all the visible
units is iterated to get samples from the equilibrium distribution of the RBM.
Subtracting equation 7.2 from equation 7.1 and taking expectations over




(cid:3)

the distribution of the data gives
=  (P0 (cid:8) P

 )
wij


 log P

wij

(cid:4)

P0

= (cid:5)sisj(cid:6)P0  (cid:5)sisj(cid:6)P

.




(7.3)

The time required to approach equilibrium and the high sampling vari-
ance in (cid:5)sisj(cid:6)P

 make learning difcult. It is much more effective to use
the approximate gradient of the contrastive divergence. For an RBM, this
approximate gradient is particularly easy to compute:

 
wij

(P0 (cid:8) P
  P1


 (cid:8) P

 )  (cid:5)sisj(cid:6)P0  (cid:5)sisj(cid:6)


,

P1



(7.4)

1782
where (cid:5)sisj(cid:6)
is the expected value of sisj when one-step reconstructions are
clamped on the visible units and sj is sampled from its posterior distribution
given the reconstruction (see Figure 1).

Geoffrey E. Hinton

P1



8 Learning the Features of Handwritten Digits

When presented with real high-dimensional data, a restricted Boltzmann
machine trained to minimize the contrastive divergence using equation 7.4
should learn a set of probabilistic binary features that model the data well.
To test this conjecture, an RBM with 500 hidden units and 256 visible units
was trained on 8000 16  16 real-valued images of handwritten digits from
all 10 classes. The images, from the br training set on the USPS Cedar
ROM1, were normalized in width and height, but they were highly variable
in style. The pixel intensities were normalized to lie between 0 and 1 so that
they could be treated as probabilities, and equation 7.4 was modied to use
probabilities in place of stochastic binary values for both the data and the
one-step reconstructions:

 
wij

(P0 (cid:8) P
  P1


 (cid:8) P

 )  (cid:5)pipj(cid:6)P0  (cid:5)pipj(cid:6)


.

P1



(8.1)

Stochastically chosen binary states of the hidden units were still used
for computing the probabilities of the reconstructed pixels, but instead of
picking binary states for the pixels from those probabilities, the probabilities
themselves were used as the reconstructed data vector.

It takes 10 hours in Matlab 5.3 on a 500 MHz pentium II workstation to
perform 658 epochs of learning. This is much faster than standard Boltz-
mann machine learning, comparable with the wake-sleep algorithm (Hin-
ton, Dayan, Frey, & Neal, 1995) and considerably slower than using EM to
t a mixture model with the same number of parameters. In each epoch,
the weights were updated 80 times using the approximate gradient of the
contrastive divergence computed on mini-batches of size 100 that contained
10 exemplars of each digit class. The learning rate was set empirically to be
about one-quarter of the rate that caused divergent oscillations in the pa-
rameters. To improve the learning speed further, a momentum method was
used. After the rst 10 epochs, the parameter updates specied by equa-
tion 8.1 were supplemented by adding 0.9 times the previous update.

The PoE learned localized features whose binary states yielded almost
perfect reconstructions. For each image, about one-third of the features were
turned on. Some of the learned features had on-center off-surround recep-
tive elds or vice versa, some looked like pieces of stroke, and some looked
like Gabor lters or wavelets. The weights of 100 of the hidden units, se-
lected at random, are shown in Figure 5.

Training Products of Experts

1783

Figure 5: The receptive elds of a randomly selected subset of the 500 hidden
units in a PoE that was trained on 8000 images of digits with equal numbers
from each class. Each block shows the 256 learned weights connecting a hidden
unit to the pixels. The scale goes from +2 (white) to 2 (black).

9 Using Learned Models of Handwritten Digits for Discrimination

An attractive aspect of PoEs is that it is easy to compute the numerator in
equation 2.1, so it is easy to compute the log probability of a data vector
up to an additive constant, log Z, which is the log of the denominator in
equation 2.1. Unfortunately, it is very hard to compute this additive constant.
This does not matter if we want to compare only the probabilities of two
different data vectors under the PoE, but it makes it difcult to evaluate the
model learned by a PoE, because the obvious way to measure the success
of learning is to sum the log probabilities that the PoE assigns to test data
vectors drawn from the same distribution as the training data but not used
during training.

For a novelty detection task, it would be possible to train a PoE on nor-
mal data and then to learn a single scalar threshold value for the unnormal-

1784

Geoffrey E. Hinton

ized log probabilities in order to optimize discrimination between normal
data and a few abnormal cases. This makes good use of the ability of a PoE
to perform unsupervised learning. It is equivalent to naive Bayesian classi-
cation using a very primitive separate model of abnormal cases that simply
returns the same learned log probability for all abnormal cases.

An alternative way to evaluate the learning procedure is to learn two
different PoEs on different data sets such as images of the digit 2 and im-
ages of the digit 3. After learning, a test image, t, is presented to PoE2 and
PoE3, and they compute log p(t | 2) + log Z2 and log p(t | 3) + log Z3, re-
spectively. If the difference between log Z2 and log Z3 is known, it is easy to
pick the most likely class of the test image, and since this difference is only
a single number, it is quite easy to estimate it discriminatively using a set of
validation images whose labels are known. If discriminative performance
is the only goal and all the relevant classes are known in advance, it is prob-
ably sensible to train all the parameters of a system discriminatively. In this
article, however, discriminative performance on the digits is used simply
as a way of demonstrating that unsupervised PoEs learn very good models
of the individual digit classes.

Figure 6 shows features learned by a PoE that contains a layer of 100
hidden units and is trained on 800 images of the digit 2. Figure 7 shows
some previously unseen test images of 2s and their one-step reconstructions
from the binary activities of the PoE trained on 2s and from an identical PoE
trained on 3s.

Figure 8 shows the unnormalized log probability scores of some training
and test images under a model trained on 825 images of the digit 4 and
a model trained on 825 images of the digit 6. Unfortunately, the ofcial
test set for the USPS digits violates the standard assumption that test data
should be drawn from the same distribution as the training data, so here
the test images were drawn from the unused portion of the ofcial training
set. Even for the previously unseen test images, the scores under the two
models allow perfect discrimination. To achieve this excellent separation,
it was necessary to use models with two hidden layers and average the
scores from two separately trained models of each digit class. For each digit
class, one model had 200 units in its rst hidden layer and 100 in its second
hidden layer. The other model had 100 in the rst hidden layer and 50 in
the second. The units in the rst hidden layer were trained without regard
to the second hidden layer. After training the rst hidden layer, the second
hidden layer was trained using the probabilities of feature activation in the
rst hidden layer as the data. For testing, the scores provided by the two
hidden layers were simply added together. Omitting the score provided by
the second hidden layer leads to considerably worse separation of the digit
classes on test data.

Figure 9 shows the unnormalized log probability scores for previously
unseen test images of 7s and 9s, which are the most difcult classes to
discriminate. Discrimination is not perfect, but it is encouraging that all

Training Products of Experts

1785

Figure 6: The weights learned by 100 hidden units trained on 16  16 images
of the digit 2. The scale goes from +3 (white) to 3 (black). Note that the elds
are mostly quite local. A local feature like the one in column 1, row 7 looks like
an edge detector, but it is best understood as a local deformation of a template.
Suppose that all the other active features create an image of a 2 that differs from
the data in having a large loop whose top falls on the black part of the receptive
eld. By turning on this feature, the top of the loop can be removed and replaced
by a line segment that is a little lower in the image.

of the errors are close to the decision boundary, so there are no condent
misclassications.

9.1 Dealing with Multiple Classes. If there are 10 different PoEs for the
10 digit classes, it is slightly less obvious how to use the 10 unnormalized
scores of a test image for discrimination. One possibility is to use a validation
set to train a logistic discrimination network that takes the unnormalized
log probabilities given by the PoEs and converts them into a probability
distribution across the 10 labels. Figure 10 shows the weights in a logistic

1786

Geoffrey E. Hinton

Figure 7: The center row is previously unseen images of 2s. (Top) Pixel proba-
bilities when the image is reconstructed from the binary activities of 100 feature
detectors that have been trained on 2s. (Bottom) Pixel probabilities for recon-
structions from the binary states of 100 feature detectors trained on 3s.

Log scores of both models on training data

Log scores under both models on test data

900

800

700

600

500

400

300

200

l

6

e
d
o
m


r
e
d
n
u



e
r
o
c
S

100

100

200

300

400

500

600

700

Score under model4

900

800

700

600

500

400

300

200

l

6

e
d
o
m


r
e
d
n
u
e
r
o
c
S



800

900

100

100

200

300

400

Score under model4

500

600

700

800

900

(a)

(b)

Figure 8: (a) The unnormalized log probability scores of the training images of
the digits 4 and 6 under the learned PoEs for 4 and 6. (b) The log probability
scores for previously unseen test images of 4s and 6s. Note the good separation
of the two classes.

discrimination network that is trained after tting 10 PoE models to the 10
separate digit classes. In order to see whether the second hidden layers were
providing useful discriminative information, each PoE provided two scores.
The rst score was the unnormalized log probability of the pixel intensities
under a PoE model that consisted of the units in the rst hidden layer. The
second score was the unnormalized log probability of the probabilities of
activation of the rst layer of hidden units under a PoE model that consisted
of the units in the second hidden layer. The weights in Figure 10 show that
the second layer of hidden units provides useful additional information.

Training Products of Experts

1787

Figure 9: The unnormalized log probability scores of the previously unseen test
images of 7s and 9s. Although the classes are not linearly separable, all the errors
are close to the best separating line, so there are no condent errors.

Presumably this is because it captures the way in which features represented
in the rst hidden layer are correlated. A second-level model should be able
to assign high scores to the vectors of hidden activities that are typical of
the rst-level 2 model when it is given images of 2s and low scores to the
hidden activities of the rst-level 2 model when it is given images that
contain combinations of features that are not normally present at the same
time in a 2.

The error rate is 1.1% which compares very favorably with the 5.1%
error rate of a simple nearest-neighbor classier on the same training and
test sets and is about the same as the very best classier based on elastic
models of the digits (Revow, Williams, & Hinton, 1996). If 7% rejects are
allowed (by choosing an appropriate threshold for the probability level of
the most probable class), there are no errors on the 2750 test images.

Several different network architectures were tried for the digit-specic
PoEs, and the results reported are for the architecture that did best on the
test data. Although this is typical of research on learning algorithms, the
fact that test data were used for model selection means that the reported
results are a biased estimate of the performance on genuinely unseen test
images. Mayraz and Hinton (2001) report good comparative results for the
larger MNIST database, and they were careful to do all the model selection
using subsets of the training data so that the ofcial test data were used only
to measure the nal error rate.

1788

Geoffrey E. Hinton

Figure 10: The weights learned by doing multinomial logistic discrimination on
the training data with the labels as outputs and the unnormalized log probability
scores from the trained, digit-specic PoEs as inputs. Each column corresponds
to a digit class, starting with digit 1. The top row is the biases for the classes.
The next 10 rows are the weights assigned to the scores that represent the log
probability of the pixels under the model learned by the rst hidden layer of
each PoE. The last 10 rows are the weights assigned to the scores that represent
the log probabilities of the probabilities on the rst hidden layer under the model
learned by the second hidden layer. Note that although the weights in the last
10 rows are smaller, they are still quite large, which shows that the scores from
the second hidden layers provide useful, additional discriminative information.
Note also that the scores produced by the 2 model provide useful evidence in
favor of 7s.

10 How Good Is the Approximation?

The fact that the learning procedure in equation 3.4 gives good results in
the simulations described in sections 4, 5, and 9 suggests that it is safe to
ignore the nal term in the right-hand side of equation 3.3 that comes from
the change in the distribution P1
 .

To get an idea of the relative magnitude of the term that is being ig-
nored, extensive simulations were performed using restricted Boltzmann
machines with small numbers of visible and hidden units. By performing
computations that are exponential in the number of hidden units and the

Training Products of Experts

1789

Figure 11: (a) A histogram of the improvements in the contrastive divergence
as a result of using equation 7.4 to perform one update of the weights in each of
105 networks. The expected values on the right-hand side of equation 7.4 were
computed exactly. The networks had eight visible and four hidden units. The
initial weights were randomly chosen from a gaussian with mean 0 and standard
deviation 20. The training data were chosen at random. (b) The improvements
in the log likelihood of the data for 1000 networks chosen in exactly the same
way as in Figure 11a. Note that the log likelihood decreased in two cases. The
changes in the log likelihood are the same as the changes in P0 (cid:8) P

 but with a
sign reversal.

. It is also possible to measure what happens to P0 (cid:8) P

number of visible units, it is possible to compute the exact values of (cid:5)sisj(cid:6)P0
and(cid:5)sisj(cid:6)
 (cid:8) P


when the approximation in equation 7.4 is used to update the weights by an
amount that is large compared with the numerical precision of the machine
but small compared with the curvature of the contrastive divergence.

 P1


P1



The RBMs used for these simulations had random training data and ran-
dom weights. They did not have biases on the visible or hidden units. The
main result can be summarized as follows: For an individual weight, the
right-hand side of equation 7.4, summed over all training cases, occasion-
ally differs in sign from the left-hand side. But for networks containing more
than two units in each layer it is almost certain that a parallel update of all
the weights based on the right-hand side of equation 7.4 will improve the
contrastive divergence. In other words, when we average over the train-
ing data, the vector of parameter updates given by the right-hand side is
almost certain to have a positive cosine with the true gradient dened by
the left-hand side. Figure 11a is a histogram of the improvements in the
contrastive divergence when equation 7.4 was used to perform one par-
allel weight update in each of 100,000 networks. The networks contained
eight visible and four hidden units, and their weights were chosen from
a gaussian distribution with mean zero and standard deviation 20. With
smaller weights or larger networks, the approximation in equation 7.4 is
even better.

1790

Geoffrey E. Hinton

Figure 11b shows that the learning procedure does not always improve
the log likelihood of the training data, though it has a strong tendency to
do so. Note that only 1000 networks were used for this histogram.

Figure 12 compares the contributions to the gradient of the contrastive
divergence made by the right-hand side of equation 7.4 and by the term
that is being ignored. The vector of weight updates given by equation 7.4
makes the contrastive divergence worse if the dots in Figure 12 are above
the diagonal line, so it is clear that in these networks, the approximation in

equation 7.4 is quite safe. Intuitively, we expect P1
 to lie between P0 and P
 ,

 closer to P0, the changes
so when the parameters are changed to move P

should also move P1
 .

The ignored changes in P1
 and thus
an improvement in the contrastive divergence (which is what Figure 12
shows).

 toward P0 and away from the previous position of P

 should cause an increase in P1

 (cid:8) P

It is tempting to interpret the learning rule in equation 3.4 as approximate

optimization of the contrastive log likelihood:
(cid:5)log P
 (cid:6)P0  (cid:5)log P
 (cid:6)



P1



.

Unfortunately, the contrastive log likelihood can achieve its maximum
value of 0 by simply making all possible vectors in the data space equally
probable. The contrastive divergence differs from the contrastive log like-
lihood by including the entropies of the distributions P0 and P1
 (see equa-
tion 8.1), and so the high entropy of P1
 rules out the solution in which all
possible data vectors are equiprobable.

11 Other Types of Expert

Binary stochastic pixels are not unreasonable for modeling preprocessed
images of handwritten digits in which ink and background are represented
as 1 and 0. In real images, however, there is typically very high mutual infor-
mation between the real-valued intensity of one pixel and the real-valued
intensities of its neighbors. This cannot be captured by models that use bi-
nary stochastic pixels because a binary pixel can never have more than 1 bit
of mutual information with anything. It is possible to use multinomial pix-
els that have n discrete values. This is a clumsy solution for images because
it fails to capture the continuity and one-dimensionality of pixel intensity,
though it may be useful for other types of data. A better approach is to
imagine replicating each visible unit so that a pixel corresponds to a whole
set of binary visible units that all have identical weights to the hidden units.
The number of active units in the set can then approximate a real-valued in-
tensity. During reconstruction, the number of active units will be binomially
distributed, and because all the replicas have the same weights, the single
probability that controls this binomial distribution needs to be computed
only once. The same trick can be used to allow replicated hidden units to

Training Products of Experts

1791

(cid:8) P

 (old)

Figure 12: A scatter plot that shows the relative magnitudes of the modeled and
unmodeled effects of a parallel weight update on the contrastive divergence. The
100 networks used for this gure have 10 visible and 10 hidden units, and their
weights are drawn from a zero-mean gaussian with a standard deviation of
10. The horizontal axis shows (P0 (cid:8) P
)  (P0 (cid:8) P
 (new) 


 (old)
(cid:8) P

P1
 (new)) where old and new denote the distributions before and after the
 (old)
weight update. This modeled reduction in the contrastive divergence differs
from the true reduction because it ignores the fact that changing the weights
changes the distribution of the one-step reconstructions. The increase in the
 (new) (cid:8) P

contrastive divergence due to the ignored term, P1
 (new),
is plotted on the vertical axis. Points above the diagonal line would correspond
to cases in which the unmodeled increase outweighed the modeled decrease,
so that the net effect was to make the contrastive divergence worse. Note that
the unmodeled effects almost always cause an additional improvement in the
contrastive divergence rather than being in conict with the modeled effects.

(cid:8) P
 (new)P1


 P1

 (old)

 (old)

approximate real values using binomially distributed integer states. A set of
replicated units can be viewed as a computationally cheap approximation
to units whose weights actually differ, or it can be viewed as a stationary
approximation to the behavior of a single unit over time, in which case the
number of active replicas is a ring rate. Teh and Hinton (2001) have shown
that this type of rate coding can be quite effective for modeling real-valued
images of faces, provided the images are normalized.

An alternative to replicating hidden units is to use unifactor experts
that each consist of a mixture of a uniform distribution and a factor analyzer

1792

Geoffrey E. Hinton

with just one factor. Each expert has a binary latent variable that species
whether to use the uniform or the factor analyzer and a real-valued latent
variable that species the value of the factor (if it is being used). The factor
analyzer has three sets of parameters: a vector of factor loadings that spec-
ify the direction of the factor in image space, a vector of means in image
space, and a vector of variances in image space.8 Experts of this type have
been explored in the context of directed acyclic graphs (Hinton, Sallans, &
Ghahramani, 1998), but they should work better in a PoE.

An alternative to using a large number of relatively simple experts is to
make each expert as complicated as possible, while retaining the ability to
compute the exact derivative of the log likelihood of the data with respect
to the parameters of an expert. In modeling static images, for example, each
expert could be a mixture of many axis-aligned gaussians. Some experts
might focus on one region of an image by using very high variances for
pixels outside that region. But so long as the regions modeled by different
experts overlap, it should be possible to avoid block boundary artifacts.

11.1 Products of Hidden Markov Models. Hidden Markov models
(HMMs) are of great practical value in modeling sequences of discrete
symbols or sequences of real-valued vectors because there is an efcient
algorithm for updating the parameters of the HMM to improve the log like-
lihood of a set of observed sequences. HMMs are, however, quite limited
in their generative power because the only way that the portion of a string
generated up to time t can constrain the portion of the string generated after
time t is by the discrete hidden state of the generator at time t. So if the rst
part of a string has, on average, n bits of mutual information with the rest of
the string, the HMM must have 2n hidden states to convey this mutual in-
formation by its choice of hidden state. This exponential inefciency can be
overcome by using a product of HMMs as a generator. During generation,
each HMM gets to pick a hidden state at each time so the mutual informa-
tion between the past and the future can be linear in the number of HMMs.
It is therefore exponentially more efcient to have many small HMMs than
one big one. However, to apply the standard forward-backward algorithm
to a product of HMMs, it is necessary to take the cross-product of their state-
spaces, which throws away the exponential win. For products of HMMs to
be of practical signicance, it is necessary to nd an efcient way to train
them.

Andrew Brown (Brown & Hinton, 2001) has shown that the learning
algorithm in equation 3.4 works well. The forward-backward algorithm is
used to get the gradient of the log likelihood of an observed or reconstructed

8 The last two sets of parameters are exactly equivalent to the parameters of a uni-
gauss expert introduced in section 4, so a unigauss expert can be considered to be a
mixture of a uniform with a factor analyzer that has no factors.

Training Products of Experts

1793

Figure 13: A hidden Markov model. The rst and third nodes have output dis-
tributions that are uniform across all words. If the rst node has a high transition
probability to itself, most strings of English words are given the same low prob-
ability by this expert. Strings that contain the word shut followed directly or
indirectly by the word up have higher probability under this expert.

sequence with respect to the parameters of an individual expert. The one-
step reconstruction of a sequence is generated as follows:

1. Given an observed sequence, use the forward-backward algorithm in
each expert separately to calculate the posterior probability distribu-
tion over paths through the hidden states.

2. For each expert, stochastically select a hidden path from the posterior

given the observed sequence.

3. At each time step, select an output symbol or output vector from the
product of the output distributions specied by the selected hidden
state of each HMM.

If more realistic products of HMMs can be trained successfully by mini-
mizing the contrastive divergence, they should be better than single HMMs
for many different kinds of sequential data. Consider, for example, the HMM
shown in Figure 13. This expert concisely captures a nonlocal regularity. A
single HMM that must also model all the other regularities in strings of
English words could not capture this regularity efciently because it could
not afford to devote its entire memory capacity to remembering whether
the word shut had already occurred in the string.

12 Discussion

There have been previous attempts to learn representations by adjusting
parameters to cancel out the effects of brief iteration in a recurrent network
(Hinton & McClelland, 1988; OReilly, 1996; Seung, 1998), but these were

1794

Geoffrey E. Hinton

not formulated using a stochastic generative model and an appropriate
objective function.

Minimizing contrastive divergence has an unexpected similarity to the
learning algorithm proposed by Winston (1975). Winstons program com-
pared arches made of blocks with near misses supplied by a teacher, and
it used the differences in its representations of the correct and incorrect
arches to decide which aspects of its representation were relevant. By using
a stochastic generative model, we can dispense with the teacher, but it is
still the differences between the real data and the near misses generated by
the model that drive the learning of the signicant features.

m

Z

12.1 Logarithmic Opinion Pools. The idea of combining the opinions
of multiple different expert models by using a weighted average in the log
probability domain is far from new (Genest & Zidek, 1986; Heskes, 1998), but
research has focused on how to nd the best weights for combining experts
that have already been learned or programmed separately (Berger, Della
Pietra, & Della Pietra, 1996) rather than training the experts cooperatively.
The geometric mean of a set of probability distributions has the attractive
property that its Kullback-Leibler divergence from the true distribution,
P, is smaller than the average of the Kullback-Leibler divergences of the
individual distributions, Q:
(cid:2)


(cid:5)
P (cid:8) mQwm

wmKL(P (cid:8) Qm)

(12.1)

(cid:6)

KL

m

where the wm are nonnegative and sum to 1, and Z = (cid:1)
m (c). When
all of the individual models are identical, Z = 1. Otherwise, Z is less than
one, and the difference between the two sides of equation 12.1 is log(1/Z).
This makes it clear that the benet of combining very different experts comes
from the fact that they make Z small, especially in parts of the data space
that do not contain data.

mQwm

c

It is tempting to augment PoEs by giving each expert, m, an additional
adaptive parameter, wm, that scales its log probabilities. However, this makes
inference much more difcult (Yee-Whye Teh, personal communication,
2000). Consider, for example, an expert with wm = 100. This is equivalent to
having 100 copies of an expert but with their latent states all tied together,
and this tying affects the inference. It is easier to x wm = 1 and allow
the PoE learning algorithm to determine the appropriate sharpness of the
expert.

12.2 Relationship to Boosting. Within the supervised learning litera-
ture, methods such as bagging or boosting attempt to make experts dif-
ferent from one another by using different, or differently weighted, training
data. After learning, these methods use the weighted average of the out-
puts of the individual experts. The way in which the outputs are combined

Training Products of Experts

1795

is appropriate for a conditional PoE model in which the output of an indi-
vidual expert is the mean of a gaussian, its weight is the inverse variance
of the gaussian, and the combined output is the mean of the product of all
the individual gaussians. Zemel and Pitassi (2001) have recently shown that
this view allows a version of boosting to be derived as a greedy method of
optimizing a sensible objective function.

The fact that boosting works well for supervised learning suggests that
it should be tried for unsupervised learning. In boosting, the experts are
learned sequentially, and each new expert is tted to data that have been
reweighted so that data vectors that are modeled well by the existing ex-
perts receive very little weight and hence make very little contribution to
the gradient for the new expert. A PoE ts all the experts at once, but it
achieves an effect similar to reweighting by subtracting the gradient of the
reconstructed data so that there is very little learning on data that are al-
ready modeled well. One big advantage of a PoE over boosting is that a PoE
can focus the learning on the parts of a training vector that have high re-
construction errors. This allows PoEs to learn local features. With boosting,
an entire training case receives a single scalar weight rather than a vector of
reconstruction errors, so when boosting is used for unsupervised learning,
it does not so easily discover local features.

12.3 Comparison with Directed Acyclic Graphical Models. Inference
in a PoE is trivial because the experts are individually tractable and the prod-
uct formulation ensures that the hidden states of different experts are condi-
tionally independent given the data.9 This makes them relevant as models
of biological perceptual systems, which must be able to do inference very
rapidly. Alternative approaches based on directed acyclic graphical models
(Neal, 1992) suffer from the explaining-away phenomenon. When such
graphical models are densely connected, exact inference is intractable, so
it is necessary to resort to clever but implausibly slow iterative techniques
for approximate inference (Saul & Jordan, 2000) or to use crude approxima-
tions that ignore explaining away during inference and rely on the learning
algorithm to nd representations for which the shoddy inference technique
is not too damaging (Hinton et al., 1995).

Unfortunately, the ease of inference in PoEs is balanced by the difculty
of generating fantasy data from the model. This can be done trivially in one
ancestral pass in a directed acyclic graphical model but requires an iterative
procedure such as Gibbs sampling in a PoE. If, however, equation 3.4 is used
for learning, the difculty of generating samples from the model is not a
major problem.

In addition to the ease of inference that results from the conditional in-
dependence of the experts given the data, PoEs have a more subtle ad-

9 This ceases to be true when there are missing data.

1796

Geoffrey E. Hinton

vantage over generative models that work by rst choosing values for the
latent variables and then generating a data vector from these latent values.
If such a model has a single hidden layer and the latent variables have
independent prior distributions, there will be a strong tendency for the
posterior values of the latent variables in a well-tted model to reect the
marginal independence that occurs when the model generates data.10 For
this reason, there has been little success with attempts to learn such gen-
erative models one hidden layer at a time in a greedy, bottom-up way.
With PoEs, however, even though the experts have independent priors,
the latent variables in different experts will be marginally dependent: they
can be highly correlated across cases even for fantasy data generated by
the PoE itself. So after the rst hidden layer has been learned greedily,
there may still be lots of statistical structure in the latent variables for the
second hidden layer to capture. There is therefore some hope that an en-
tirely unsupervised network could learn to extract a hierarchy of repre-
sentations from patches of real images, but progress toward this goal re-
quires an effective way of dealing with real-valued data. The types of ex-
pert that have been investigated so far have not performed as well as inde-
pendent component analysis at extracting features like edges from natural
images.

The most attractive property of a set of orthogonal basis functions is that
it is possible to compute the coefcient on each basis function separately
without worrying about the coefcients on other basis functions. A PoE
retains this attractive property while allowing nonorthogonal experts and
a nonlinear generative model.

12.4 Lateral Connections Between Hidden Units. The ease of inferring
the states of the hidden units (latent variables) given the data is a major
advantage of PoEs. This advantage appears to be lost if the latent variables
of different experts are allowed to interact directly. If, for example, there
are direct, symmetrical connections between the hidden units in a restricted
Boltzmann machine, it becomes intractable to infer the exact distribution
over hidden states when given the visible states. However, preliminary
simulations show that the contrastive divergence idea can still be applied
successfully using a damped mean-eld method to nd an approximating
distribution over the hidden units for both the data vector and its recon-
struction. The learning procedure then has the following steps for each data
vector:

10 This is easy to understand from a coding perspective in which the data are commu-
nicated by rst specifying the states of the latent variables under an independent prior and
then specifying the data given the latent states. If the latent states are not marginally in-
dependent, this coding scheme is inefcient, so pressure toward coding efciency creates
pressure toward independence.

Training Products of Experts

1797

1. With the data vector clamped on the visible units, compute the total
bottom-up input, xj, to each hidden unit, j, and initialize it to have
real-valued state, q0
j

=  (xj), where  (.) is the logistic function.

2. Perform 10 damped mean-eld iterations in which each hidden unit

computes its total lateral input yt
j at time t,
(cid:2)
wkjqt1

=

yt
j

,

k

k

and then adjusts its state, qt
j ,

= 0.5qt1

j

+ 0.5 (xj + yt

j

).

qt
j

Measure siq10
j
Also measure q10

for each pair of a visible unit, i, and a hidden unit, j.
j q10
k

for all pairs of hidden units, j, k.

3. Pick a nal binary state for each hidden unit, j, according to q10
j
use these binary states to generate a reconstructed data vector.

, and

4. Perform one more damped mean-eld iteration on the hidden units
starting from the nal state found with the data, but using the bottom-
up input from the reconstruction rather than the data. Measure the
same statistics as above.

5. Update every weight in proportion to the difference in the measured

statistics in steps 2 and 4.

It is necessary for the mean-eld iterations to converge for this proce-
dure to work, which may require limiting or decaying the weights on the
lateral connections. The usual worrythat the mean-eld approximation
is hopeless for multimodal distributionsmay not be relevant for learn-
ing a perceptual system, since it makes sense to avoid learning models of
the world in which there are multiple, very different interpretations of the
same sensory input. Contrastive divergence learning nesses the problem
of nding the highly multimodal equilibrium distribution that results if
both visible and hidden units are unclamped. It does this by assuming that
the observed data cover all of the different modes with roughly the right
frequency for each mode.

The fact that the initial simulations work is very promising since net-
works with multiple hidden layers can always be viewed as networks that
have a single laterally connected hidden layer with many of the lateral
and feedforward connections missing. However, the time taken for the net-
work to settle means that networks with lateral connections are considerably
slower than purely feedforward networks, and more research is required
to demonstrate that the loss of speed is worth the extra representational
power.

1798

Geoffrey E. Hinton

A much simpler way to use xed lateral interactions is to divide the
hidden units into mutually exclusive pools. Within each pool, exactly one
hidden unit is allowed to turn on, and this unit is chosen using the softmax
distribution:
(cid:1)

(12.2)

pj = exp(xj)
k exp(xk)

.

Curiously, this type of probabilistic winner-take-all competition among
the hidden units has no effect whatsoever on the contrastive divergence
learning rule. The learning does not even need to know which hidden units
compete with each other. The competition can be implemented in a very
simple way by making each hidden unit, j, be a Poisson process with a rate
of exp(xj). The rst unit to emit a spike is the winner. The other units in
the pool could then be shut off by an inhibitory unit that is excited by the
winner. If the pool is allowed to produce a xed number of spikes before
being shut off, the learning rule remains unaltered, but quantities like sj
may take on integer values larger than 1. If a hidden unit is allowed to be
a member of several different overlapping pools, the analysis gets much
more difcult, and more research is needed.

12.5 Relationship to Analysis-by-Synthesis. PoEs provide an efcient
instantiation of the old psychological idea of analysis-by-synthesis. This idea
never worked properly because the generative models were not selected to
make the analysis easy. In a PoE, it is difcult to generate data from the
generative model, but given the model, it is easy to compute how any given
data vector might have been generated, and, as we have seen, it is relatively
easy to learn the parameters of the generative model. Paradoxically, the
generative models that are most appropriate for analysis-by-synthesis may
be the ones in which synthesis is intractable.

Acknowledgments

This research was funded by the Gatsby Charitable Foundation. Thanks
to Zoubin Ghahramani, David MacKay, Peter Dayan, Radford Neal, David
Lowe, Yee-Whye Teh, Guy Mayraz, Andy Brown, and other members of
the Gatsby unit for helpful discussions and to the referees for many helpful
comments that improved the article.

