For the purposes of this textbook, I shall assume that you have access to a computer system on which Perl is available, and that you know how to log on to the system and get to a point where the system is displaying a prompt and inviting you to enter a command. Perl is free, and versions are available for all the usual operating systems, so if you are working in a multi-user environment such as a university computer centre then Perl is almost sure to be on your system already. (It would take us too far out of our way to go through the details of installing Perl on a home computer which does not already have it; though, if the home computer is a Mac running OS X, it will already have Perl – available from the Terminal utility under Applications  Utilities.) Assuming, then, that you have access to Perl, let us get started by creating and running a very simple program.2 Adding two and two is perhaps as simple as it gets. This could be a very short Perl program indeed, but I’ll offer a slightly longer one which illustrates some basics of the language. First, create a file with the following contents. Use a text editor to create it, not a word-processing application such as Word – files created via WP apps contain a lot of extra, hidden material apart from the wording typed by the user and displayed on the screen, but we need a file containing just the characters shown below and no others. 

Save it under some suitable name – twoandtwo.pl is as good a name as any. The .pl extension is optional – Perl itself does not care about the format of filenames, and it would respond to the program just the same if you called it simply twoandtwo – but some operating systems want to see filename extensions in some circumstances, so it is probably sensible to get in the habit of including .pl in the names of your Perl programs. Your twoandtwo.pl file will contain just what is shown above. But later in this book, when we look at more extended examples of Perl code I shall give them a label in brackets and number the lines, like this: 

These labels will be purely for convenience in discussing the code, for instance I shall write “line 1.3” to identify the line print $b. The labels are not part of what you will type to create a program. However, when your programs grow longer you may find it helpful to create them using an editor which shows line-numbers; the error messages generated by the Perl interpreter will use line numbers to identify places where it finds problems. 

In (1), the symbols $a and $b are variables – names for pigeonholes containing values (in this case, numbers). Line 1.1 means “assign the value 2 to the variable $a”. Line 1.2 means “assign the result of adding the value of $a to itself to the variable $b”. Line 1.3 means “display the value of $b”. Note that each instruction (the usual word is statement) ends in a semicolon. To run the program, enter the command 

to which the system will respond (I’ll show system responses in italics) with 

Actually, if your system prompt is, say, %, what you see will be 

– since nothing in the twoandtwo.pl program has told the system to output a newline after displaying the result and before displaying the next prompt. For that matter, nothing in our little program has told the system how much precision to include in displaying the answer; rather than responding with 4, some systems might respond with 4.00000000000000 (which is a more precise way of saying the same thing). In due course we shall see how to include extra material in a program to deal with issues like these. For now, the point is that the job in hand has been correctly done. 

If you have typed the code exactly as shown and Perl does not respond correctly (or at all) when you try running it, various system-dependent problems may be to blame. I assume that, where you are working, there will be someone responsible for telling you what is needed to run Perl on your local system. But meanwhile, I can offer two suggestions. It may be that your program needs to tell the system where the Perl interpreter is located (this is likely if you are seeing an error message suggesting that the command perl is not recognized). In that case it is worth trying the following. Include as the first line of your program this “magic line”:3 

This will not be the right “magic line” for every system, but for many systems it will be. Secondly, if Perl appears to run without generating error messages, but outputs no result, or outputs material suggesting that it stopped reading your program before the end, it may be that your editor is supplying the wrong newline symbols – so that the sequence of lines looks to the system like one long line. That will often lead to problems; for instance, if the first line of your program is the above “magic line”, but Perl sees your whole program as one long line, then nothing will happen when you run it, because the Perl interpreter will only begin to operate on the line following the “magic line”. Set your editor to use Unix (decimal 10) newlines. If neither of these solutions works, then, sorry, you really will need to find that computer-support staff member to tell you how to run Perl on the particular system you are working at! 

Let’s now go back to the contents of program (1). One point which may have surprised you about our first program is the dollar signs in the variable names $a and $b. Why not simply name our variables a and b? In many programming languages, these latter names would be fine, but in Perl they are not. One of the rules of Perl is that any variable name must begin with a special character identifying what kind of entity it is, and for individual variables – names for single separate pigeonholes, as opposed to names for whole sets of pigeonholes – the identifying character is a dollar sign.