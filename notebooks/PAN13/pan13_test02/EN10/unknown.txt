This creates a folder of the name you give it (labelmaker) and a Makefile, a modules.mk file which
can be used by the Make utility, and a file called mod_labelmaker.c.
The C file generated is kind of like a Hello World for Apache. It may look like a complex thing but it
does supply a long explanatory comment header which is worth reading. The idea is that when
Apache starts any modules in a specified location which are configured as needing to be loaded in the
server configuration files, will be loaded. The *_register_hooks function lists the names and
signatures of functions that can be called at specific stages in the Apache server process. In this case if
the name http://localhost/labelmaker is called this module will be asked to handle whatever happens in
the *_handler function.

The configuration of the server can be a bit fiddly but in OpenSuse we have to add this to the file

and in /etc/config.sys/apache2 we add the name of our module labelmaker to long comma-separated
list in the line starting
APACHE_MODULES=”.....,labelmaker”
Now go to the folder labelmaker and type:

Now we can plug in the work we did for the graphics library in Chapter 6 as a replacement handler
function (in the code Chapter7_1.c there are BOTH handlers, one commented out). Note the
(highlighted) call to a modified decode_value function that uses the r->args pointer to get the
QUERY_STRING rather than getenv() . Also Apache handles the output a bit differently too – get get
a pointer to the array of bytes in the image by calling gdImageGifPtr then the ap_rwrite function
outputs the data. We have to free the pointer with gdFree after the output call.

Whilst tricky to write and debug, this is probably the most rewarding and esoteric area where you can
do real, commerically useful and safely deployable web content generation. It is easy to see how this
example could be extended with parameters for colours and fonts to make a useful web content tool.
There is very little clear simple material about apache modukles but start with the on-line
documentation at http://httpd.apache.org/docs/2.2/developer/
One recent book worth looking at is “The Apache Modules Book” Nick Kew, Prentice Hall.

The ability to write short programs in C to automate tedious tasks or to do things that would otherwise
take hours of fiddling about with cumbersome tools such as doing mail-merge, is one on the things
you will be most pleased you have learned how to do. This project is such a time-saver. Ghost is a
lightweight PHP generator for you to customise.
If you find yourself having to build PHP web sites all the time, a quick way to generate all the
parameter-passing, decoding, forms building and database management code in one step would be
useful. Tools like Ruby on Rails offer such functionality but are infinitely more complex to set up and
run and you end up with needing to learn yet another language to go any further.
Probably the best way to start with this tool is to compile and run it. Unzip the ghost.zip source into
your public_html folder which creates a folder called ghost. The Makefile contains a target g1 that
compiles and links ghost. So go to public_html/ghost and type: make g1 .
To run the site generator type:
- ./ghost testwebsite data1 data2 data1 data3 data4 data6 data6
- This will create:
- a folder public_html/testwebsite
- a mysql database table called testwebsite with text fields data1 data2 data1 data3 data4 data6
data6
- atestwebsite.css file
- empty header.html and footer.html pages
- index.php that demonstrates a form handling entry, edit & update, and delete to the database
table for the data items specified.
In a browser what you see is this at http://localhost/~yourname/testwebsite
The idea behind this is that all the mechanical bits to create and manage the form content are done and
can be customised. This screen shot shows the result of submitting one record. Thde top row is for
entering new data, the lower row(s) allow editing or deleting of records. It is a framework that allows
you to take and use parts in your own website design.
Let us examine this code in sections.
The first section declares the required data and creates the folder and CSS file.
Next the header.html and footer.html files are generated. These files is loaded by the PHP file and
could be used as a generic common header and footers. The CSS file is referenced from the
header.html file.
Next we create the data base.
The complicated part starts now, of generating a php script. The best way to understand this is to
examine the actual output of the program when we view the source of the page in the browser.
The top row is a form with a text box for each column defined in the table generated by running the
ghost program.
For each row in the table we now generate a form allowing editing of the data and an anchor link to do
a delete operation.
Close examination of the file index.php will allow you to see where all this happens, and to work
backward to find where in the ghost.c source code this PHP code is generated. A good idea is to use a
highlighter pen on a printout as we are embedding a language (HTML) inside another language (PHP)
which is in turn inside another language so very very careful use is made of the escape characters '\ 'to
express quotation marks both single and double where necessary to make it all work. This may seem
complex – but the speedy prototyping that ghost permits makes it worthwhile to spend time customising
the C code so the PHP that you want and the database you want come out the way you want it.
Here is the part of the PHP file index.php which generates the edit or delete rows. The static HTML is
highlighted and the other parts are inserted by MySQL PHP function calls.
As you can see a great deal of tedious and repetitive works has been automated. You can move on by
modifying the PHP code or go deeper to customise the C program which generates all of it.
I personally use ghost frequently to save time on site-building and this is why I wrote it. I got bored
making mistakes writing virtually identical code to decode HTML forms and populate or update
databases.